{
.appVersion = "3424";
.formatVersion = 3;
axes = (
{
name = Weight;
tag = wght;
}
);
classes = (
{
automatic = 1;
code = "A Aacute Abreve Acircumflex Agrave Atilde B C D Dcroat E Eacute Ecircumflex Egrave F G H I Iacute Igrave Itilde J K L M N O Oacute Ocircumflex Ograve Ohorn Otilde P Q R S T U Uacute Ugrave Uhorn Utilde V W X Y Yacute Ygrave Z M.ss01 N.ss01 Abreveacute Abrevedotbelow Abrevegrave Abrevehookabove Abrevetilde Acircumflexacute Acircumflexdotbelow Acircumflexgrave Acircumflexhookabove Acircumflextilde Adieresis Adotbelow Ahookabove Amacron Aogonek Aring AE Cacute Ccaron Ccedilla Cdotaccent Dcaron Eth Ecaron Ecircumflexacute Ecircumflexdotbelow Ecircumflexgrave Ecircumflexhookabove Ecircumflextilde Edieresis Edotaccent Edotbelow Ehookabove Emacron Eogonek Etilde Gbreve Gcommaaccent Gdotaccent Hbar Icircumflex Idieresis Idotaccent Idotbelow Ihookabove Imacron Iogonek Kcommaaccent Lacute Lcaron Lcommaaccent Lslash Nacute Ncaron Ncommaaccent Ntilde Ocircumflexacute Ocircumflexdotbelow Ocircumflexgrave Ocircumflexhookabove Ocircumflextilde Odieresis Odotbelow Ohookabove Ohornacute Ohorndotbelow Ohorngrave Ohornhookabove Ohorntilde Ohungarumlaut Oslash OE Thorn Racute Rcaron Sacute Scaron Scedilla Scommaaccent Germandbls Tcaron Tcommaaccent Ucircumflex Udieresis Udotbelow Uhookabove Uhornacute Uhorndotbelow Uhorngrave Uhornhookabove Uhorntilde Uhungarumlaut Umacron Uogonek Uring Wacute Wcircumflex Wdieresis Wgrave Ycircumflex Ydieresis Ydotbelow Yhookabove Ytilde Zacute Zcaron Zdotaccent";
name = Uppercase;
}
);
customParameters = (
{
name = panose;
value = (
3,
2,
8,
2,
4,
5,
2,
2,
11,
6
);
},
{
name = unicodeRanges;
value = (
0,
1,
2,
3,
5,
6,
7,
29,
31,
33,
35,
37,
38,
45
);
},
{
name = codePageRanges;
value = (
"1252",
"1258",
"bit 29"
);
},
{
name = blueScale;
value = 0.037;
},
{
name = glyphOrder;
value = (
.notdef,
space,
A,
Aacute,
Abreve,
uni1EAE,
uni1EB6,
uni1EB0,
uni1EB2,
uni1EB4,
Acircumflex,
uni1EA4,
uni1EAC,
uni1EA6,
uni1EA8,
uni1EAA,
uni1EA0,
Agrave,
uni1EA2,
Atilde,
B,
C,
D,
Dcroat,
E,
Eacute,
Ecircumflex,
uni1EBE,
uni1EC6,
uni1EC0,
uni1EC2,
uni1EC4,
uni1EB8,
Egrave,
uni1EBA,
uni1EBC,
F,
G,
H,
I,
Iacute,
uni1ECA,
Igrave,
uni1EC8,
Itilde,
J,
K,
L,
M,
N,
O,
Oacute,
Ocircumflex,
uni1ED0,
uni1ED8,
uni1ED2,
uni1ED4,
uni1ED6,
uni1ECC,
Ograve,
uni1ECE,
Ohorn,
uni1EDA,
uni1EE2,
uni1EDC,
uni1EDE,
uni1EE0,
Otilde,
P,
Q,
R,
S,
T,
U,
Uacute,
uni1EE4,
Ugrave,
uni1EE6,
Uhorn,
uni1EE8,
uni1EF0,
uni1EEA,
uni1EEC,
uni1EEE,
Utilde,
V,
W,
X,
Y,
Yacute,
uni1EF4,
Ygrave,
uni1EF6,
uni1EF8,
Z,
A.ss01,
Aacute.ss01,
Abreve.ss01,
uni1EAE.ss01,
uni1EB6.ss01,
uni1EB0.ss01,
uni1EB2.ss01,
uni1EB4.ss01,
Acircumflex.ss01,
uni1EA4.ss01,
uni1EAC.ss01,
uni1EA6.ss01,
uni1EA8.ss01,
uni1EAA.ss01,
uni1EA0.ss01,
Agrave.ss01,
uni1EA2.ss01,
Atilde.ss01,
B.ss01,
C.ss01,
D.ss01,
Dcroat.ss01,
E.ss01,
Eacute.ss01,
Ecircumflex.ss01,
uni1EBE.ss01,
uni1EC6.ss01,
uni1EC0.ss01,
uni1EC2.ss01,
uni1EC4.ss01,
uni1EB8.ss01,
Egrave.ss01,
uni1EBA.ss01,
uni1EBC.ss01,
F.ss01,
G.ss01,
H.ss01,
I.ss01,
Iacute.ss01,
uni1ECA.ss01,
Igrave.ss01,
uni1EC8.ss01,
Itilde.ss01,
J.ss01,
K.ss01,
L.ss01,
M.ss01,
N.ss01,
O.ss01,
Oacute.ss01,
Ocircumflex.ss01,
uni1ED0.ss01,
uni1ED8.ss01,
uni1ED2.ss01,
uni1ED4.ss01,
uni1ED6.ss01,
uni1ECC.ss01,
Ograve.ss01,
uni1ECE.ss01,
Ohorn.ss01,
uni1EDA.ss01,
uni1EE2.ss01,
uni1EDC.ss01,
uni1EDE.ss01,
uni1EE0.ss01,
Otilde.ss01,
P.ss01,
Q.ss01,
R.ss01,
S.ss01,
T.ss01,
U.ss01,
Uacute.ss01,
uni1EE4.ss01,
Ugrave.ss01,
uni1EE6.ss01,
Uhorn.ss01,
uni1EE8.ss01,
uni1EF0.ss01,
uni1EEA.ss01,
uni1EEC.ss01,
uni1EEE.ss01,
Utilde.ss01,
V.ss01,
W.ss01,
X.ss01,
Y.ss01,
Yacute.ss01,
uni1EF4.ss01,
Ygrave.ss01,
uni1EF6.ss01,
uni1EF8.ss01,
Z.ss01,
A.ss02,
Aacute.ss02,
Abreve.ss02,
uni1EAE.ss02,
uni1EB6.ss02,
uni1EB0.ss02,
uni1EB2.ss02,
uni1EB4.ss02,
Acircumflex.ss02,
uni1EA4.ss02,
uni1EAC.ss02,
uni1EA6.ss02,
uni1EA8.ss02,
uni1EAA.ss02,
uni1EA0.ss02,
Agrave.ss02,
uni1EA2.ss02,
Atilde.ss02,
B.ss02,
C.ss02,
D.ss02,
Dcroat.ss02,
E.ss02,
Eacute.ss02,
Ecircumflex.ss02,
uni1EBE.ss02,
uni1EC6.ss02,
uni1EC0.ss02,
uni1EC2.ss02,
uni1EC4.ss02,
uni1EB8.ss02,
Egrave.ss02,
uni1EBA.ss02,
uni1EBC.ss02,
F.ss02,
G.ss02,
H.ss02,
I.ss02,
Iacute.ss02,
uni1ECA.ss02,
Igrave.ss02,
uni1EC8.ss02,
Itilde.ss02,
J.ss02,
K.ss02,
L.ss02,
M.ss02,
N.ss02,
O.ss02,
Oacute.ss02,
Ocircumflex.ss02,
uni1ED0.ss02,
uni1ED8.ss02,
uni1ED2.ss02,
uni1ED4.ss02,
uni1ED6.ss02,
uni1ECC.ss02,
Ograve.ss02,
uni1ECE.ss02,
Ohorn.ss02,
uni1EDA.ss02,
uni1EE2.ss02,
uni1EDC.ss02,
uni1EDE.ss02,
uni1EE0.ss02,
Otilde.ss02,
P.ss02,
Q.ss02,
R.ss02,
S.ss02,
T.ss02,
U.ss02,
Uacute.ss02,
uni1EE4.ss02,
Ugrave.ss02,
uni1EE6.ss02,
Uhorn.ss02,
uni1EE8.ss02,
uni1EF0.ss02,
uni1EEA.ss02,
uni1EEC.ss02,
uni1EEE.ss02,
Utilde.ss02,
V.ss02,
W.ss02,
X.ss02,
Y.ss02,
Yacute.ss02,
uni1EF4.ss02,
Ygrave.ss02,
uni1EF6.ss02,
uni1EF8.ss02,
Z.ss02,
A.ss03,
Aacute.ss03,
Abreve.ss03,
uni1EAE.ss03,
uni1EB6.ss03,
uni1EB0.ss03,
uni1EB2.ss03,
uni1EB4.ss03,
Acircumflex.ss03,
uni1EA4.ss03,
uni1EAC.ss03,
uni1EA6.ss03,
uni1EA8.ss03,
uni1EAA.ss03,
uni1EA0.ss03,
Agrave.ss03,
uni1EA2.ss03,
Atilde.ss03,
B.ss03,
C.ss03,
D.ss03,
Dcroat.ss03,
E.ss03,
Eacute.ss03,
Ecircumflex.ss03,
uni1EBE.ss03,
uni1EC6.ss03,
uni1EC0.ss03,
uni1EC2.ss03,
uni1EC4.ss03,
uni1EB8.ss03,
Egrave.ss03,
uni1EBA.ss03,
uni1EBC.ss03,
F.ss03,
G.ss03,
H.ss03,
I.ss03,
Iacute.ss03,
uni1ECA.ss03,
Igrave.ss03,
uni1EC8.ss03,
Itilde.ss03,
J.ss03,
K.ss03,
L.ss03,
M.ss03,
N.ss03,
O.ss03,
Oacute.ss03,
Ocircumflex.ss03,
uni1ED0.ss03,
uni1ED8.ss03,
uni1ED2.ss03,
uni1ED4.ss03,
uni1ED6.ss03,
uni1ECC.ss03,
Ograve.ss03,
uni1ECE.ss03,
Ohorn.ss03,
uni1EDA.ss03,
uni1EE2.ss03,
uni1EDC.ss03,
uni1EDE.ss03,
uni1EE0.ss03,
Otilde.ss03,
P.ss03,
Q.ss03,
R.ss03,
S.ss03,
T.ss03,
U.ss03,
Uacute.ss03,
uni1EE4.ss03,
Ugrave.ss03,
uni1EE6.ss03,
Uhorn.ss03,
uni1EE8.ss03,
uni1EF0.ss03,
uni1EEA.ss03,
uni1EEC.ss03,
uni1EEE.ss03,
Utilde.ss03,
V.ss03,
W.ss03,
X.ss03,
Y.ss03,
Yacute.ss03,
uni1EF4.ss03,
Ygrave.ss03,
uni1EF6.ss03,
uni1EF8.ss03,
Z.ss03,
a,
aacute,
abreve,
uni1EAF,
uni1EB7,
uni1EB1,
uni1EB3,
uni1EB5,
acircumflex,
uni1EA5,
uni1EAD,
uni1EA7,
uni1EA9,
uni1EAB,
uni1EA1,
agrave,
uni1EA3,
atilde,
b,
c,
d,
dcroat,
e,
eacute,
ecircumflex,
uni1EBF,
uni1EC7,
uni1EC1,
uni1EC3,
uni1EC5,
uni1EB9,
egrave,
uni1EBB,
uni1EBD,
f,
g,
h,
i,
iacute,
uni1ECB,
igrave,
uni1EC9,
itilde,
j,
k,
l,
m,
n,
o,
oacute,
ocircumflex,
uni1ED1,
uni1ED9,
uni1ED3,
uni1ED5,
uni1ED7,
uni1ECD,
ograve,
uni1ECF,
ohorn,
uni1EDB,
uni1EE3,
uni1EDD,
uni1EDF,
uni1EE1,
otilde,
p,
q,
r,
s,
t,
u,
uacute,
uni1EE5,
ugrave,
uni1EE7,
uhorn,
uni1EE9,
uni1EF1,
uni1EEB,
uni1EED,
uni1EEF,
utilde,
v,
w,
x,
y,
yacute,
uni1EF5,
ygrave,
uni1EF7,
uni1EF9,
z,
a.ss01,
aacute.ss01,
abreve.ss01,
uni1EAF.ss01,
uni1EB7.ss01,
uni1EB1.ss01,
uni1EB3.ss01,
uni1EB5.ss01,
acircumflex.ss01,
uni1EA5.ss01,
uni1EAD.ss01,
uni1EA7.ss01,
uni1EA9.ss01,
uni1EAB.ss01,
uni1EA1.ss01,
agrave.ss01,
uni1EA3.ss01,
atilde.ss01,
b.ss01,
c.ss01,
d.ss01,
dcroat.ss01,
e.ss01,
eacute.ss01,
ecircumflex.ss01,
uni1EBF.ss01,
uni1EC7.ss01,
uni1EC1.ss01,
uni1EC3.ss01,
uni1EC5.ss01,
uni1EB9.ss01,
egrave.ss01,
uni1EBB.ss01,
uni1EBD.ss01,
f.ss01,
g.ss01,
h.ss01,
i.ss01,
iacute.ss01,
uni1ECB.ss01,
igrave.ss01,
uni1EC9.ss01,
itilde.ss01,
j.ss01,
k.ss01,
l.ss01,
m.ss01,
n.ss01,
o.ss01,
oacute.ss01,
ocircumflex.ss01,
uni1ED1.ss01,
uni1ED9.ss01,
uni1ED3.ss01,
uni1ED5.ss01,
uni1ED7.ss01,
uni1ECD.ss01,
ograve.ss01,
uni1ECF.ss01,
ohorn.ss01,
uni1EDB.ss01,
uni1EE3.ss01,
uni1EDD.ss01,
uni1EDF.ss01,
uni1EE1.ss01,
otilde.ss01,
p.ss01,
q.ss01,
r.ss01,
s.ss01,
t.ss01,
u.ss01,
uacute.ss01,
uni1EE5.ss01,
ugrave.ss01,
uni1EE7.ss01,
uhorn.ss01,
uni1EE9.ss01,
uni1EF1.ss01,
uni1EEB.ss01,
uni1EED.ss01,
uni1EEF.ss01,
utilde.ss01,
v.ss01,
w.ss01,
x.ss01,
y.ss01,
yacute.ss01,
uni1EF5.ss01,
ygrave.ss01,
uni1EF7.ss01,
uni1EF9.ss01,
z.ss01,
a.ss02,
aacute.ss02,
abreve.ss02,
uni1EAF.ss02,
uni1EB7.ss02,
uni1EB1.ss02,
uni1EB3.ss02,
uni1EB5.ss02,
acircumflex.ss02,
uni1EA5.ss02,
uni1EAD.ss02,
uni1EA7.ss02,
uni1EA9.ss02,
uni1EAB.ss02,
uni1EA1.ss02,
agrave.ss02,
uni1EA3.ss02,
atilde.ss02,
b.ss02,
c.ss02,
d.ss02,
dcroat.ss02,
e.ss02,
eacute.ss02,
ecircumflex.ss02,
uni1EBF.ss02,
uni1EC7.ss02,
uni1EC1.ss02,
uni1EC3.ss02,
uni1EC5.ss02,
uni1EB9.ss02,
egrave.ss02,
uni1EBB.ss02,
uni1EBD.ss02,
f.ss02,
g.ss02,
h.ss02,
i.ss02,
iacute.ss02,
uni1ECB.ss02,
igrave.ss02,
uni1EC9.ss02,
itilde.ss02,
j.ss02,
k.ss02,
l.ss02,
m.ss02,
n.ss02,
o.ss02,
oacute.ss02,
ocircumflex.ss02,
uni1ED1.ss02,
uni1ED9.ss02,
uni1ED3.ss02,
uni1ED5.ss02,
uni1ED7.ss02,
uni1ECD.ss02,
ograve.ss02,
uni1ECF.ss02,
ohorn.ss02,
uni1EDB.ss02,
uni1EE3.ss02,
uni1EDD.ss02,
uni1EDF.ss02,
uni1EE1.ss02,
otilde.ss02,
p.ss02,
q.ss02,
r.ss02,
s.ss02,
t.ss02,
u.ss02,
uacute.ss02,
uni1EE5.ss02,
ugrave.ss02,
uni1EE7.ss02,
uhorn.ss02,
uni1EE9.ss02,
uni1EF1.ss02,
uni1EEB.ss02,
uni1EED.ss02,
uni1EEF.ss02,
utilde.ss02,
v.ss02,
w.ss02,
x.ss02,
y.ss02,
yacute.ss02,
uni1EF5.ss02,
ygrave.ss02,
uni1EF7.ss02,
uni1EF9.ss02,
z.ss02,
a.ss03,
aacute.ss03,
abreve.ss03,
uni1EAF.ss03,
uni1EB7.ss03,
uni1EB1.ss03,
uni1EB3.ss03,
uni1EB5.ss03,
acircumflex.ss03,
uni1EA5.ss03,
uni1EAD.ss03,
uni1EA7.ss03,
uni1EA9.ss03,
uni1EAB.ss03,
uni1EA1.ss03,
agrave.ss03,
uni1EA3.ss03,
atilde.ss03,
b.ss03,
c.ss03,
d.ss03,
dcroat.ss03,
e.ss03,
eacute.ss03,
ecircumflex.ss03,
uni1EBF.ss03,
uni1EC7.ss03,
uni1EC1.ss03,
uni1EC3.ss03,
uni1EC5.ss03,
uni1EB9.ss03,
egrave.ss03,
uni1EBB.ss03,
uni1EBD.ss03,
f.ss03,
g.ss03,
h.ss03,
i.ss03,
iacute.ss03,
uni1ECB.ss03,
igrave.ss03,
uni1EC9.ss03,
itilde.ss03,
j.ss03,
k.ss03,
l.ss03,
m.ss03,
n.ss03,
o.ss03,
oacute.ss03,
ocircumflex.ss03,
uni1ED1.ss03,
uni1ED9.ss03,
uni1ED3.ss03,
uni1ED5.ss03,
uni1ED7.ss03,
uni1ECD.ss03,
ograve.ss03,
uni1ECF.ss03,
ohorn.ss03,
uni1EDB.ss03,
uni1EE3.ss03,
uni1EDD.ss03,
uni1EDF.ss03,
uni1EE1.ss03,
otilde.ss03,
p.ss03,
q.ss03,
r.ss03,
s.ss03,
t.ss03,
u.ss03,
uacute.ss03,
uni1EE5.ss03,
ugrave.ss03,
uni1EE7.ss03,
uhorn.ss03,
uni1EE9.ss03,
uni1EF1.ss03,
uni1EEB.ss03,
uni1EED.ss03,
uni1EEF.ss03,
utilde.ss03,
v.ss03,
w.ss03,
x.ss03,
y.ss03,
yacute.ss03,
uni1EF5.ss03,
ygrave.ss03,
uni1EF7.ss03,
uni1EF9.ss03,
z.ss03,
a.ss04,
v.ss04,
w.ss04,
y.ss04,
zero,
one,
two,
three,
four,
five,
six,
seven,
eight,
nine,
zero.ss01,
one.ss01,
two.ss01,
three.ss01,
four.ss01,
five.ss01,
six.ss01,
seven.ss01,
eight.ss01,
nine.ss01,
zero.ss02,
one.ss02,
two.ss02,
three.ss02,
four.ss02,
five.ss02,
six.ss02,
seven.ss02,
eight.ss02,
nine.ss02,
zero.ss03,
one.ss03,
two.ss03,
three.ss03,
four.ss03,
five.ss03,
six.ss03,
seven.ss03,
eight.ss03,
nine.ss03,
period,
comma,
colon,
semicolon,
ellipsis,
exclam,
exclamdown,
question,
questiondown,
periodcentered,
bullet,
asterisk,
numbersign,
slash,
backslash,
hyphen,
endash,
emdash,
underscore,
parenleft,
parenright,
braceleft,
braceright,
bracketleft,
bracketright,
quotesinglbase,
quotedblbase,
quotedblleft,
quotedblright,
quoteleft,
quoteright,
guillemotleft,
guillemotright,
guilsinglleft,
guilsinglright,
quotedbl,
quotesingle,
uni0E3F,
at,
ampersand,
paragraph,
copyright,
registered,
degree,
bar,
brokenbar,
cent,
dollar,
dong,
Euro,
sterling,
yen,
plus,
minus,
multiply,
divide,
equal,
notequal,
greater,
less,
greaterequal,
lessequal,
plusminus,
approxequal,
asciitilde,
asciicircum,
percent,
perthousand,
arrowup,
uni2197,
arrowright,
uni2198,
arrowdown,
uni2199,
arrowleft,
uni2196,
arrowboth,
arrowupdn,
grave,
acute,
circumflex,
breve,
ring,
tilde,
icon,
icon.001,
icon.002,
icon.003,
icon.004,
icon.005,
icon.006,
icon.007,
icon.008,
icon.009,
icon.010,
icon.011,
icon.012,
icon.013,
icon.014,
icon.015,
icon.016,
icon.017,
icon.018
);
},
{
name = fsType;
value = (
);
},
{
name = "Use Typo Metrics";
value = 1;
}
);
date = "2024-07-28 17:26:45 +0000";
familyName = "Momo Trust Display";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn ROM;
languagesystem latn MOL;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature ordn;
feature case;
feature ss01;
";
tag = aalt;
},
{
automatic = 1;
code = "lookup ccmp_DFLT_1 {
	@CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb dieresiscomb dotaccentcomb gravecomb hookabovecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	lookupflag UseMarkFilteringSet @CombiningTopAccents;
	sub i' @CombiningTopAccents by idotless;
	sub j' @CombiningTopAccents by jdotless;
} ccmp_DFLT_1;

lookup ccmp_DFLT_2 {
	lookupflag 0;
	sub brevecomb acutecomb by brevecomb_acutecomb;
	sub brevecomb gravecomb by brevecomb_gravecomb;
	sub brevecomb hookabovecomb by brevecomb_hookabovecomb;
	sub brevecomb tildecomb by brevecomb_tildecomb;
	sub circumflexcomb acutecomb by circumflexcomb_acutecomb;
	sub circumflexcomb gravecomb by circumflexcomb_gravecomb;
	sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;
	sub circumflexcomb tildecomb by circumflexcomb_tildecomb;
} ccmp_DFLT_2;

lookup ccmp_Other_1 {
	lookupflag 0;
	@Markscomb = [horncomb];
	@MarkscombCase = [horncomb.case];
	sub @Markscomb @Markscomb' by @MarkscombCase;
	sub @Uppercase @Markscomb' by @MarkscombCase;
} ccmp_Other_1;

lookup ccmp_Other_2 {
	lookupflag 0;
	sub @Markscomb' @MarkscombCase by @MarkscombCase;
	sub @MarkscombCase @Markscomb' by @MarkscombCase;
} ccmp_Other_2;
";
tag = ccmp;
},
{
automatic = 1;
code = "script latn;
language ROM;
lookup locl_latn_0 {
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
} locl_latn_0;
language MOL;
lookup locl_latn_0;
";
tag = locl;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
";
tag = ordn;
},
{
automatic = 1;
code = "sub exclamdown by exclamdown.case;
sub questiondown by questiondown.case;
sub horncomb by horncomb.case;
";
tag = case;
},
{
automatic = 1;
code = "sub M by M.ss01;
sub N by N.ss01;
";
labels = (
{
language = dflt;
value = ss01;
}
);
notes = "Alternative M, N";
tag = ss01;
}
);
fontMaster = (
{
axesValues = (
400
);
customParameters = (
{
name = typoAscender;
value = 1025;
},
{
name = typoDescender;
value = -275;
},
{
name = typoLineGap;
value = 0;
},
{
name = winAscent;
value = 1165;
},
{
name = winDescent;
value = 555;
},
{
name = hheaAscender;
value = 1025;
},
{
name = hheaDescender;
value = -275;
},
{
name = strikeoutPosition;
value = 339;
},
{
name = strikeoutSize;
value = 50;
},
{
name = "prep Table Assembly";
value = "SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
200 
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 1 
INSTCTRL[ ]	/* SetInstrExecControl */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
PUSHW[ ]	/* 2 values pushed */
2048 2048 
MUL[ ]	/* Multiply */
WCVTF[ ]	/* WriteCVTInFUnits */
PUSHB[ ]	/* 2 values pushed */
0 7 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 5 values pushed */
0 49 29 3 0 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
56 4 36 8 18 7 3 10 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 7 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 8 values pushed */
62 2 46 6 27 5 3 10 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 10 
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
3648 2368 1216 3 11 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
0 13 
WS[ ]	/* WriteStore */
PUSHW[ ]	/* 5 values pushed */
64 64 64 3 11 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 2 values pushed */
3 0 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
36 1 
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 100 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 2 values pushed */
40 1 
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 1 value pushed */
2048 
GETINFO[ ]	/* GetInfo */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
39 1 
GETINFO[ ]	/* GetInfo */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHW[ ]	/* 3 values pushed */
2176 1 1088 
GETINFO[ ]	/* GetInfo */
MUL[ ]	/* Multiply */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHW[ ]	/* 2 values pushed */
3 0 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 8 values pushed */
58 4 38 8 20 7 3 14 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHW[ ]	/* 1 value pushed */
511 
SCANCTRL[ ]	/* ScanConversionControl */
PUSHB[ ]	/* 1 value pushed */
4 
SCANTYPE[ ]	/* ScanType */
PUSHB[ ]	/* 2 values pushed */
2 0 
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 4 values pushed */
5 100 6 0 
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */";
},
{
name = "fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */
0 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
RCVT[ ]	/* ReadCVT */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHW[ ]	/* 1 value pushed */
11 
LTEQ[ ]	/* LessThenOrEqual */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
6 
GTEQ[ ]	/* GreaterThanOrEqual */
AND[ ]	/* LogicalAnd */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
52 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
40 
EIF[ ]	/* EndIf */
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048 
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32 
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
2 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 4 values pushed */
3 20 21 0 
WS[ ]	/* WriteStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
19 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
2 20 
RS[ ]	/* ReadStore */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
37 3 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
EQ[ ]	/* Equal */
JROT[ ]	/* JumpRelativeOnTrue */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
12 
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
4 
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 3 values pushed */
2 2 2 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
33 
NEG[ ]	/* Negate */
JMPR[ ]	/* Jump */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 3 values pushed */
14 21 1 
WS[ ]	/* WriteStore */
JMPR[ ]	/* Jump */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
19 1 19 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 3 values pushed */
22 1 2 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
4 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
3 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
21 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
22 
RS[ ]	/* ReadStore */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192 
LT[ ]	/* LessThan */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
AND[ ]	/* LogicalAnd */
PUSHB[ ]	/* 3 values pushed */
40 1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
6 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
EIF[ ]	/* EndIf */
GT[ ]	/* GreaterThan */
OR[ ]	/* LogicalOr */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
ROLL[ ]	/* RollTopThreeStack */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
80 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
56 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
56 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
40 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
48 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
48 
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
192 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
FLOOR[ ]	/* Floor */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
54 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
54 
ADD[ ]	/* Add */
ELSE[ ]	/* Else */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
12 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
0 
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
10 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
12 
RS[ ]	/* ReadStore */
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
30 
MPPEM[ ]	/* MeasurePixelPerEm */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 1 value pushed */
4096 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
12 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1280 
DIV[ ]	/* Divide */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
ABS[ ]	/* Absolute */
SUB[ ]	/* Subtract */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
22 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
5 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
7 
RS[ ]	/* ReadStore */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
7 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
8 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
6 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 2 values pushed */
7 98 
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
6 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 2 values pushed */
1 13 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
3 
ADD[ ]	/* Add */
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
5 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
8 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
48 5 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
ADD[ ]	/* Add */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
SUB[ ]	/* Subtract */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
EIF[ ]	/* EndIf */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
7 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 3 values pushed */
0 2 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
8 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
7 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
9 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
9 14 0 
RS[ ]	/* ReadStore */
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 3 values pushed */
0 1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
11 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 3 values pushed */
0 1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
12 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
32 
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
48 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
32 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
13 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ABS[ ]	/* Absolute */
PUSHB[ ]	/* 1 value pushed */
36 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
0 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
64 
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NEG[ ]	/* Negate */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
14 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 4 values pushed */
13 12 0 3 
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
15 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 2 
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
100 
SUB[ ]	/* Subtract */
WCVTP[ ]	/* WriteCVTInPixels */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
16 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15 
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
15 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
16 
RS[ ]	/* ReadStore */
MD[1]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
0 
GT[ ]	/* GreaterThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
17 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHW[ ]	/* 1 value pushed */
1024 
MUL[ ]	/* Multiply */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
17 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
17 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
18 
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
13 
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
19 
FDEF[ ]	/* FunctionDefinition */
MPPEM[ ]	/* MeasurePixelPerEm */
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
MPPEM[ ]	/* MeasurePixelPerEm */
GTEQ[ ]	/* GreaterThanOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
4 100 
WCVTP[ ]	/* WriteCVTInPixels */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
DEPTH[ ]	/* GetDepthStack */
PUSHB[ ]	/* 1 value pushed */
19 
NEG[ ]	/* Negate */
SWAP[ ]	/* SwapTopStack */
JROT[ ]	/* JumpRelativeOnTrue */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
20 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 18 
RS[ ]	/* ReadStore */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
18 18 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
17 
CALL[ ]	/* CallFunction */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
15 2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
16 2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
SZPS[ ]	/* SetZonePointerS */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 2 values pushed */
1 0 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
16 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
15 
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
16 
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
0 0 
SZP0[ ]	/* SetZonePointer0 */
SWAP[ ]	/* SwapTopStack */
WCVTP[ ]	/* WriteCVTInPixels */
PUSHB[ ]	/* 1 value pushed */
1 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
0 
MIAP[0]	/* MoveIndirectAbsPt */
PUSHB[ ]	/* 3 values pushed */
1 1 1 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
21 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13 
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 8 values pushed */
24 24 1 0 17 0 19 0 
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
20 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
20 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
20 8 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139 
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
22 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
23 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
24 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
25 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
26 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
27 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
28 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
29 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
30 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
31 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 21 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
43 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
6 
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1 
DELTAP1[ ]	/* DeltaExceptionP1 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
44 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
22 
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1 
DELTAP2[ ]	/* DeltaExceptionP2 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
45 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
16 
DIV[ ]	/* Divide */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
38 
ADD[ ]	/* Add */
MPPEM[ ]	/* MeasurePixelPerEm */
EQ[ ]	/* Equal */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
1 
DELTAP3[ ]	/* DeltaExceptionP3 */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
32 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
18 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
RCVT[ ]	/* ReadCVT */
PUSHB[ ]	/* 1 value pushed */
14 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
13 
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
ADD[ ]	/* Add */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1 
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 6 values pushed */
24 24 1 0 17 0 
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 2 values pushed */
20 8 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
139 
CALL[ ]	/* CallFunction */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
33 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
34 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
35 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
36 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
3 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
37 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
4 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
38 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
5 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
39 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
6 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
40 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
7 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
41 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
8 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
42 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
9 32 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
46 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
24 
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
RS[ ]	/* ReadStore */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
46 
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
48 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
47 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
47 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
49 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
NEQ[ ]	/* NotEqual */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
50 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6 
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1 
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
51 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 1 value pushed */
15 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
0 2 
RCVT[ ]	/* ReadCVT */
EQ[ ]	/* Equal */
IF[ ]	/* If */
PUSHB[ ]	/* 2 values pushed */
14 6 
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
49 
LOOPCALL[ ]	/* LoopAndCallFunction */
PUSHB[ ]	/* 2 values pushed */
5 1 
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ELSE[ ]	/* Else */
CLEAR[ ]	/* ClearStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
52 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
SHC[1]	/* ShiftContourByLastPt */
PUSHB[ ]	/* 1 value pushed */
1 
ADD[ ]	/* Add */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
53 
FDEF[ ]	/* FunctionDefinition */
SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */
PUSHB[ ]	/* 2 values pushed */
14 6 
RCVT[ ]	/* ReadCVT */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
1 
RCVT[ ]	/* ReadCVT */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 5 values pushed */
0 0 0 0 0 
WCVTP[ ]	/* WriteCVTInPixels */
MIAP[0]	/* MoveIndirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
52 1 
SZP2[ ]	/* SetZonePointer2 */
LOOPCALL[ ]	/* LoopAndCallFunction */
POP[ ]	/* PopTopStack */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
54 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
55 
FDEF[ ]	/* FunctionDefinition */
MDAP[0]	/* MoveDirectAbsPt */
SLOOP[ ]	/* SetLoopVariable */
ALIGNRP[ ]	/* AlignRelativePt */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
56 
FDEF[ ]	/* FunctionDefinition */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
14 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
0 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
1 
RS[ ]	/* ReadStore */
MUL[ ]	/* Multiply */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
2 0 
SZPS[ ]	/* SetZonePointerS */
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
1 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
56 1 1 
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 2 values pushed */
12 0 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
NEG[ ]	/* Negate */
ROLL[ ]	/* RollTopThreeStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26 
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
SWAP[ ]	/* SwapTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
60 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SWAP[ ]	/* SwapTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
61 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
62 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
0 
EQ[ ]	/* Equal */
IF[ ]	/* If */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
6 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
CINDEX[ ]	/* CopyXToTopStack */
MD[0]	/* MeasureDistance */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
SUB[ ]	/* Subtract */
PUSHW[ ]	/* 2 values pushed */
2048 2048 
MUL[ ]	/* Multiply */
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
IF[ ]	/* If */
DIV[ ]	/* Divide */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
MUL[ ]	/* Multiply */
PUSHW[ ]	/* 1 value pushed */
1024 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
SWAP[ ]	/* SwapTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
63 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
23 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
10 
RS[ ]	/* ReadStore */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
ADD[ ]	/* Add */
PUSHB[ ]	/* 1 value pushed */
32 
ADD[ ]	/* Add */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
64 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
65 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
66 
FDEF[ ]	/* FunctionDefinition */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
GT[ ]	/* GreaterThan */
ELSE[ ]	/* Else */
LT[ ]	/* LessThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
67 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
58 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
68 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
59 
CALL[ ]	/* CallFunction */
ROLL[ ]	/* RollTopThreeStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
ROLL[ ]	/* RollTopThreeStack */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
23 
RS[ ]	/* ReadStore */
IF[ ]	/* If */
LT[ ]	/* LessThan */
ELSE[ ]	/* Else */
GT[ ]	/* GreaterThan */
EIF[ ]	/* EndIf */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
EIF[ ]	/* EndIf */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
69 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
MINDEX[ ]	/* MoveXToTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
12 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
70 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
10 4 
CINDEX[ ]	/* CopyXToTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
CINDEX[ ]	/* CopyXToTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 2 values pushed */
12 0 
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
11 
RS[ ]	/* ReadStore */
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
96 
LT[ ]	/* LessThan */
IF[ ]	/* If */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
64 
LTEQ[ ]	/* LessThenOrEqual */
IF[ ]	/* If */
PUSHB[ ]	/* 4 values pushed */
4 32 5 32 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 4 values pushed */
4 38 5 26 
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
ADD[ ]	/* Add */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
DUP[ ]	/* DuplicateTopStack */
ROLL[ ]	/* RollTopThreeStack */
ROLL[ ]	/* RollTopThreeStack */
SUB[ ]	/* Subtract */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
ABS[ ]	/* Absolute */
SWAP[ ]	/* SwapTopStack */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ABS[ ]	/* Absolute */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
4 
RS[ ]	/* ReadStore */
SUB[ ]	/* Subtract */
ELSE[ ]	/* Else */
PUSHB[ ]	/* 1 value pushed */
5 
RS[ ]	/* ReadStore */
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 1 value pushed */
3 
CINDEX[ ]	/* CopyXToTopStack */
PUSHB[ ]	/* 1 value pushed */
2 
DIV[ ]	/* Divide */
DUP[ ]	/* DuplicateTopStack */
PUSHB[ ]	/* 1 value pushed */
0 
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
64 
ADD[ ]	/* Add */
EIF[ ]	/* EndIf */
FLOOR[ ]	/* Floor */
PUSHB[ ]	/* 1 value pushed */
1 
MUL[ ]	/* Multiply */
SUB[ ]	/* Subtract */
PUSHB[ ]	/* 1 value pushed */
2 
CINDEX[ ]	/* CopyXToTopStack */
GC[0]	/* GetCoordOnPVector */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
SWAP[ ]	/* SwapTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
1 
CALL[ ]	/* CallFunction */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
71 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 58 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
72 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 59 
CALL[ ]	/* CallFunction */
POP[ ]	/* PopTopStack */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
DUP[ ]	/* DuplicateTopStack */
ALIGNRP[ ]	/* AlignRelativePt */
PUSHB[ ]	/* 1 value pushed */
6 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
SWAP[ ]	/* SwapTopStack */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
6 
RS[ ]	/* ReadStore */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
48 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
73 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1 
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
74 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZP2[ ]	/* SetZonePointer2 */
DUP[ ]	/* DuplicateTopStack */
GC[1]	/* GetCoordOnPVector */
PUSHB[ ]	/* 1 value pushed */
0 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 3 values pushed */
0 1 1 
SZP2[ ]	/* SetZonePointer2 */
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 1 value pushed */
54 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
75 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 1 
SZP1[ ]	/* SetZonePointer1 */
SZP0[ ]	/* SetZonePointer0 */
PUSHB[ ]	/* 1 value pushed */
55 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
76 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
57 
LOOPCALL[ ]	/* LoopAndCallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
77 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
RCVT[ ]	/* ReadCVT */
SWAP[ ]	/* SwapTopStack */
DUP[ ]	/* DuplicateTopStack */
MDAP[0]	/* MoveDirectAbsPt */
DUP[ ]	/* DuplicateTopStack */
GC[0]	/* GetCoordOnPVector */
ROLL[ ]	/* RollTopThreeStack */
SWAP[ ]	/* SwapTopStack */
SUB[ ]	/* Subtract */
SHPIX[ ]	/* ShiftZoneByPixel */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
78 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
10 
SWAP[ ]	/* SwapTopStack */
WS[ ]	/* WriteStore */
PUSHB[ ]	/* 1 value pushed */
77 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
79 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
80 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
81 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
82 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 70 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
83 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
84 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
85 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
86 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 71 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
87 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
88 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
89 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
90 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
91 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
92 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
93 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
94 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 67 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
95 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
96 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
97 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
98 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 69 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
99 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 0 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
100 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
0 1 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
101 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 0 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
102 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
1 1 72 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
103 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
104 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
105 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
106 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 0 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
107 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 0 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
108 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
0 1 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
109 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 0 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
110 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 4 values pushed */
1 1 1 68 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
111 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
112 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
113 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
114 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
0 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
115 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
116 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
117 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
0 
SZPS[ ]	/* SetZonePointerS */
PUSHB[ ]	/* 2 values pushed */
1 60 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
118 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
119 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
120 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
121 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
122 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
123 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
124 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 61 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
125 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
126 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
127 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
128 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
129 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
130 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
131 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 62 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
132 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
MDAP[0]	/* MoveDirectAbsPt */
PUSHB[ ]	/* 2 values pushed */
48 1 
SZP1[ ]	/* SetZonePointer1 */
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
133 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
134 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
135 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
0 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
136 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
64 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
137 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
65 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
138 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 2 values pushed */
1 63 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
66 
CALL[ ]	/* CallFunction */
ENDF[ ]	/* EndFunctionDefinition */
PUSHB[ ]	/* 1 value pushed */
139 
FDEF[ ]	/* FunctionDefinition */
PUSHB[ ]	/* 3 values pushed */
11 0 3 
RCVT[ ]	/* ReadCVT */
LT[ ]	/* LessThan */
IF[ ]	/* If */
PUSHB[ ]	/* 1 value pushed */
6 
ELSE[ ]	/* Else */
PUSHB[ ]	/* 3 values pushed */
4 2 3 
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
SWAP[ ]	/* SwapTopStack */
POP[ ]	/* PopTopStack */
ELSE[ ]	/* Else */
POP[ ]	/* PopTopStack */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
WS[ ]	/* WriteStore */
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 1 value pushed */
8 
NEG[ ]	/* Negate */
PUSHB[ ]	/* 1 value pushed */
3 
DEPTH[ ]	/* GetDepthStack */
LT[ ]	/* LessThan */
JROT[ ]	/* JumpRelativeOnTrue */
PUSHB[ ]	/* 2 values pushed */
5 1 
SZP2[ ]	/* SetZonePointer2 */
RCVT[ ]	/* ReadCVT */
IF[ ]	/* If */
IUP[0]	/* InterpolateUntPts */
EIF[ ]	/* EndIf */
ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = "(
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    24,
    24,
    24,
    24,
    760,
    0,
    579,
    0,
    \"-178\",
    1010,
    \"-210\",
    760,
    0,
    579,
    0,
    \"-178\",
    1010,
    \"-210\",
    155,
    155,
    139,
    139,
    748,
    0,
    748,
    579,
    0,
    \"-178\",
    1010,
    \"-210\",
    760,
    \"-12\",
    826,
    591,
    \"-12\",
    \"-178\",
    1010,
    \"-210\",
    24,
    24,
    24,
    24,
    886,
    430,
    1010,
    \"-210\",
    886,
    423,
    1010,
    \"-210\"
)";
},
{
name = "Master Icon Glyph Name";
value = m;
}
);
guides = (
{
pos = (317,979);
},
{
pos = (362,969);
},
{
pos = (368,591);
},
{
pos = (382,939);
}
);
iconName = SemiBold;
id = m002;
metricValues = (
{
pos = 950;
},
{
over = 15;
pos = 750;
},
{
over = 15;
pos = 570;
},
{
over = -15;
},
{
over = -15;
pos = -180;
},
{
}
);
name = Regular;
userData = {
GSCornerRadius = 5;
KernOnIndependentPairs = (
"c n",
"f o",
"t v",
"c l",
"h quotesingle",
"endash n",
"e quotedblleft",
"S I",
"ellipsis zero",
"o x",
"y n",
"O X",
"i z",
"f g",
"r n",
"S W",
"r o",
"W A",
"W W",
"O V",
"R W",
"b acircumflexacute",
"z g",
"k w",
"a quotedbl",
"s period",
"T ohorntilde",
"T ohorngrave",
"T ograve",
"T ohornhookabove",
"T otilde",
"T ohornacute",
"T ohorndotbelow",
"T ohookabove",
"H period",
"T ocircumflex",
"T o",
"T ocircumflexacute",
"T ocircumflexgrave",
"T ocircumflexhookabove",
"T ocircumflextilde",
"T ocircumflexdotbelow",
"V aacute",
"V agrave",
"V ahookabove",
"V atilde",
"V adotbelow",
"V acircumflexacute",
"V acircumflexgrave",
"V acircumflexhookabove",
"T ohorn",
"V acircumflex",
"V a",
"V abrevegrave",
"V abreveacute",
"V acircumflextilde",
"V acircumflexdotbelow",
"V abrevehookabove"
);
KernOnModels = (
"V A",
"slash slash",
"V abreve",
"V abrevedotbelow",
"T colon",
"r r",
"O Y",
"quotesingle egrave",
"r a",
"h u",
"S t",
"L o",
"K Y",
"h t",
"X T",
"d o",
"G o",
"N J",
"degree C",
"s o",
"u x",
"t f",
"f b",
"f f",
"f y",
"k y",
"y comma",
"s comma",
"H E",
"Z E",
"E X",
"T Z",
"Z Z",
"eight comma",
"H colon",
"H quotesingle",
"slash two",
"emdash a",
"M i",
"f i",
"b ocircumflexgrave",
"S dollar",
"period period",
"z z",
"P hyphen",
"zero parenright",
"z colon",
"t colon",
"dcroat itilde",
"i parenright"
);
KernOnUserSetAutopairs = (
"V abrevetilde"
);
};
}
);
glyphs = (
{
glyphname = .notdef;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(295,66,l),
(295,311,l),
(172,311,l),
(172,435,l),
(50,435,l),
(50,189,l),
(172,189,l),
(172,66,l)
);
},
{
closed = 1;
nodes = (
(295,-180,l),
(295,-57,l),
(172,-57,l),
(172,-180,l)
);
},
{
closed = 1;
nodes = (
(172,-57,l),
(172,66,l),
(50,66,l),
(50,-57,l)
);
},
{
closed = 1;
nodes = (
(295,435,l),
(295,557,l),
(172,557,l),
(172,435,l)
);
},
{
closed = 1;
nodes = (
(172,557,l),
(172,681,l),
(50,681,l),
(50,557,l)
);
},
{
closed = 1;
nodes = (
(295,681,l),
(295,803,l),
(172,803,l),
(172,681,l)
);
}
);
width = 345;
}
);
},
{
glyphname = space;
lastChange = "2025-03-16 14:26:48 +0000";
layers = (
{
layerId = m002;
width = 220;
}
);
unicode = 32;
},
{
glyphname = A;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (373,0);
},
{
name = ogonek;
pos = (734,0);
},
{
name = top;
pos = (373,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(187,0,l),
(372,572,l),
(373,577,o),
(377,577,o),
(378,572,cs),
(556,0,l),
(734,0,l),
(524,614,ls),
(491,709,o),
(459,765,o),
(374,765,cs),
(289,765,o),
(261,709,o),
(227,612,cs),
(11,0,l)
);
},
{
closed = 1;
nodes = (
(573,159,l),
(573,307,l),
(182,307,l),
(182,159,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
5 1 3 0 1 76 0 3 6 1 4 1 3 4 104 0 0 0 38 77 5 2 2 1 1 39 1 78 7 7 0 0 7 10 7 10 9 8 0 6 0 6 17 17 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = A;
unicode = 65;
userData = {
KernOnName = A;
};
},
{
glyphname = Aacute;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
guides = (
{
angle = 180;
pos = (371,816);
}
);
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (264,0);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
9 1 5 2 1 76 7 1 1 0 0 2 1 0 103 0 5 9 1 6 3 5 6 104 0 2 2 38 77 8 4 2 3 3 39 3 78 11 11 4 4 0 0 11 14 11 14 13 12 4 10 4 10 8 7 6 5 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Aacute;
unicode = 193;
},
{
glyphname = Abreve;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (160,0);
ref = brevecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
19 1 7 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
9 3 2 1 2 2 1 112 0 2 0 0 4 2 0 106 0 7 11 1 8 5 7 8 104 0 4 4 38 77 10 6 2 5 5 39 5 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 37 values pushed */
9 3 2 1 2 1 133 0 2 0 0 4 2 0 106 0 7 11 1 8 5 7 8 104 0 4 4 38 77 10 6 2 5 5 39 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
21 21 14 14 0 0 21 24 21 24 23 22 14 20 14 20 18 17 16 15 0 13 0 13 34 18 34 12 8 25 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Abreve;
unicode = 258;
},
{
glyphname = Acircumflex;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (149,0);
ref = circumflexcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 71 values pushed */
5 1 1 0 12 1 6 3 2 76 0 0 8 2 2 1 3 0 1 103 0 6 10 1 7 4 6 7 104 0 3 3 38 77 9 5 2 4 4 39 4 78 14 14 7 7 0 0 14 17 14 17 16 15 7 13 7 13 11 10 9 8 0 6 0 6 17 17 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Acircumflex;
unicode = 194;
},
{
glyphname = Agrave;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (140,0);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 57 values pushed */
9 1 5 2 1 76 0 0 0 1 2 0 1 103 0 5 8 1 6 3 5 6 104 0 2 2 38 77 7 4 2 3 3 39 3 78 11 11 4 4 11 14 11 14 13 12 4 10 4 10 17 18 17 16 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Agrave;
unicode = 192;
},
{
glyphname = Atilde;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (120,0);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
38 1 9 6 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 4 3 1 3 4 114 0 1 0 0 1 112 11 5 2 3 2 1 0 6 3 0 105 0 9 13 1 10 7 9 10 104 0 6 6 38 77 12 8 2 7 7 39 7 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 4 3 1 3 4 1 128 0 1 0 3 1 0 126 11 5 2 3 2 1 0 6 3 0 105 0 9 13 1 10 7 9 10 104 0 6 6 38 77 12 8 2 7 7 39 7 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 54 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 2 0 3 2 103 11 1 5 0 0 6 5 0 105 0 9 13 1 10 7 9 10 104 0 6 6 38 77 12 8 2 7 7 39 7 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 32 values pushed */
40 40 33 33 0 0 40 43 40 43 42 41 33 39 33 39 37 36 35 34 0 32 0 32 40 34 18 39 34 14 8 27 
CALL[ ]	/* CallFunction */";
};
width = 745;
}
);
note = Atilde;
unicode = 195;
},
{
glyphname = B;
kernLeft = KO_E;
kernRight = KO_B;
lastChange = "2025-03-16 14:26:48 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(415,0,ls),
(578,0,o),
(669,80,o),
(669,209,cs),
(669,317,o),
(605,378,o),
(518,392,c),
(514,377,l),
(599,394,o),
(653,459,o),
(653,546,cs),
(653,673,o),
(562,750,o),
(399,750,cs),
(74,750,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(247,321,l),
(409,321,ls),
(461,321,o),
(500,288,o),
(500,235,cs),
(500,182,o),
(461,148,o),
(409,148,cs),
(247,148,l)
);
},
{
closed = 1;
nodes = (
(247,602,l),
(390,602,ls),
(442,602,o),
(481,576,o),
(481,527,cs),
(481,477,o),
(442,451,o),
(390,451,cs),
(247,451,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
7 1 4 0 3 2 4 3 103 0 5 5 1 95 0 1 1 38 77 6 1 2 2 0 95 0 0 0 39 0 78 29 28 20 19 35 33 28 36 29 36 26 24 19 27 20 27 33 39 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 715;
}
);
metricLeft = H;
note = B;
unicode = 66;
},
{
glyphname = C;
kernLeft = KO_O;
kernRight = KO_C;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (399,0);
},
{
name = top;
pos = (399,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(586,-15,o),
(708,94,o),
(717,280,c),
(542,280,l),
(533,206,o),
(497,138,o),
(401,138,cs),
(289,138,o),
(226,232,o),
(226,374,cs),
(226,518,o),
(291,610,o),
(396,610,cs),
(475,610,o),
(525,557,o),
(536,482,c),
(712,482,l),
(707,648,o),
(583,765,o),
(394,765,cs),
(181,765,o),
(46,615,o),
(46,375,cs),
(46,134,o),
(181,-15,o),
(399,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 1 2 4 2 1 4 128 0 4 3 2 4 3 126 0 2 2 0 97 6 1 0 0 46 77 0 3 3 5 97 0 5 5 47 5 78 1 0 26 24 21 20 17 15 9 7 5 4 0 32 1 32 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 763;
}
);
metricLeft = O;
metricRight = O;
note = C;
unicode = 67;
userData = {
KernOnName = C;
};
},
{
glyphname = D;
kernLeft = KO_E;
kernRight = KO_O;
lastChange = "2025-03-02 13:24:19 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (354,0);
},
{
name = top;
pos = (354,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(375,0,ls),
(588,0,o),
(722,146,o),
(722,376,cs),
(722,607,o),
(588,750,o),
(375,750,cs),
(74,750,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(248,606,l),
(375,606,ls),
(479,606,o),
(542,523,o),
(542,376,cs),
(542,228,o),
(479,144,o),
(375,144,cs),
(248,144,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 0 95 4 1 0 0 38 77 0 3 3 1 95 0 1 1 39 1 78 12 11 1 0 15 13 11 21 12 21 9 7 0 10 1 10 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 767;
}
);
metricLeft = H;
note = D;
unicode = 68;
},
{
glyphname = Dcroat;
kernRight = KO_Dcroat;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(369,318,l),
(369,433,l),
(-3,433,l),
(-3,318,l)
);
},
{
ref = D;
}
);
width = 769;
}
);
note = Dcroat;
unicode = 272;
},
{
glyphname = E;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (340,0);
},
{
name = ogonek;
pos = (584,0);
},
{
name = top;
pos = (340,750);
},
{
name = topleft;
pos = (74,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(584,0,l),
(584,151,l),
(248,151,l),
(248,313,l),
(563,313,l),
(563,458,l),
(248,458,l),
(248,599,l),
(584,599,l),
(584,750,l),
(74,750,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
0 1 0 2 3 1 2 103 0 0 0 5 95 6 1 5 5 38 77 0 3 3 4 95 0 4 4 39 4 78 0 0 0 11 0 11 17 17 17 17 17 7 8 27 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
metricLeft = H;
note = E;
unicode = 69;
userData = {
KernOnName = E;
};
},
{
glyphname = Eacute;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (231,0);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 65 values pushed */
8 1 1 0 0 7 1 0 103 0 3 0 4 5 3 4 103 0 2 2 7 95 9 1 7 7 38 77 0 5 5 6 95 0 6 6 39 6 78 4 4 0 0 4 15 4 15 14 13 12 11 10 9 8 7 6 5 0 3 0 3 17 10 8 23 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = Eacute;
unicode = 201;
},
{
glyphname = Ecircumflex;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (116,0);
ref = circumflexcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 73 values pushed */
5 1 1 0 1 76 0 0 9 2 2 1 8 0 1 103 0 4 0 5 6 4 5 103 0 3 3 8 95 10 1 8 8 38 77 0 6 6 7 95 0 7 7 39 7 78 7 7 0 0 7 18 7 18 17 16 15 14 13 12 11 10 9 8 0 6 0 6 17 17 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = Ecircumflex;
unicode = 202;
},
{
glyphname = Egrave;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (107,0);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 54 values pushed */
0 0 0 1 7 0 1 103 0 3 0 4 5 3 4 103 0 2 2 7 95 8 1 7 7 38 77 0 5 5 6 95 0 6 6 39 6 78 4 4 4 15 4 15 17 17 17 17 18 17 16 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 633;
}
);
note = Egrave;
unicode = 200;
},
{
glyphname = F;
kernLeft = KO_E;
kernRight = KO_F;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(248,0,l),
(248,290,l),
(554,290,l),
(554,437,l),
(248,437,l),
(248,599,l),
(573,599,l),
(573,750,l),
(74,750,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 1 0 2 3 1 2 103 0 0 0 4 95 5 1 4 4 38 77 0 3 3 39 3 78 0 0 0 9 0 9 17 17 17 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 607;
}
);
metricLeft = H;
note = F;
unicode = 70;
},
{
glyphname = G;
kernLeft = KO_O;
kernRight = KO_G;
lastChange = "2025-09-12 12:56:33 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (397,0);
},
{
name = top;
pos = (397,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(644,-15,o),
(728,162,o),
(728,285,cs),
(728,367,o),
(689,415,o),
(590,415,cs),
(408,415,l),
(408,272,l),
(605,272,l),
(551,316,l),
(544,194,o),
(488,138,o),
(403,138,cs),
(292,138,o),
(226,229,o),
(226,377,cs),
(226,520,o),
(288,611,o),
(396,611,cs),
(473,611,o),
(527,560,o),
(532,490,c),
(712,490,l),
(712,650,o),
(582,765,o),
(396,765,cs),
(183,764,o),
(46,614,o),
(46,374,cs),
(46,135,o),
(182,-15,o),
(403,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 5 1 5 4 1 128 0 1 0 0 6 1 0 103 0 5 5 3 97 0 3 3 46 77 0 6 6 2 97 0 2 2 47 2 78 38 34 19 38 35 17 16 7 8 29 
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
metricLeft = C;
metricRight = C;
note = G;
unicode = 71;
userData = {
KernOnName = G;
};
},
{
glyphname = H;
kernLeft = KO_E;
kernRight = KO_H;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(691,0,l),
(691,750,l),
(515,750,l),
(515,0,l)
);
},
{
closed = 1;
nodes = (
(250,0,l),
(250,750,l),
(74,750,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(545,317,l),
(545,473,l),
(220,473,l),
(220,317,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
0 4 8 1 5 1 4 5 104 2 1 0 0 38 77 7 3 6 3 1 1 39 1 78 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 765;
}
);
note = H;
unicode = 72;
userData = {
KernOnName = H;
};
},
{
glyphname = I;
kernLeft = KO_E;
kernRight = KO_H;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (163,0);
},
{
name = ogonek;
pos = (251,0);
},
{
name = top;
pos = (163,750);
},
{
name = topleft;
pos = (20,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(251,0,l),
(251,750,l),
(74,750,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 38 77 0 0 0 39 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
metricLeft = H;
metricRight = H;
note = I;
unicode = 73;
userData = {
KernOnName = I;
};
},
{
glyphname = Iacute;
kernLeft = KO_Eacute;
kernRight = KO_Iacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (54,0);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 0 3 1 0 103 5 1 3 3 38 77 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = Iacute;
unicode = 205;
},
{
glyphname = Igrave;
kernLeft = KO_Eacute;
kernRight = KO_Iacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-70,0);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 1 3 0 1 103 4 1 3 3 38 77 0 2 2 39 2 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = Igrave;
unicode = 204;
},
{
glyphname = Itilde;
kernLeft = KO_Eacute;
kernRight = KO_Iacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-90,0);
ref = tildecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 4 3 1 3 4 114 0 1 0 0 1 112 8 5 2 3 2 1 0 7 3 0 105 9 1 7 7 38 77 0 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 38 values pushed */
0 4 3 1 3 4 1 128 0 1 0 3 1 0 126 8 5 2 3 2 1 0 7 3 0 105 9 1 7 7 38 77 0 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 2 0 3 2 103 8 1 5 0 0 7 5 0 105 9 1 7 7 38 77 0 6 6 39 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
33 33 0 0 33 36 33 36 35 34 0 32 0 32 40 34 18 39 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 325;
}
);
note = Itilde;
unicode = 296;
},
{
glyphname = J;
kernLeft = KO_J;
kernRight = KO_H;
lastChange = "2025-09-12 13:18:15 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (242,0);
},
{
name = top;
pos = (317,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(317,-15,o),
(410,83,o),
(410,268,cs),
(410,750,l),
(233,750,l),
(233,269,ls),
(233,175,o),
(196,135,o),
(118,135,cs),
(89,135,o),
(58,140,o),
(31,148,c),
(31,0,l),
(72,-9,o),
(113,-15,o),
(152,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
0 2 2 38 77 0 1 1 0 96 3 1 0 0 39 0 78 1 0 8 7 4 2 0 11 1 11 4 8 22 
CALL[ ]	/* CallFunction */";
};
width = 484;
}
);
note = J;
unicode = 74;
userData = {
KernOnName = J;
};
},
{
glyphname = K;
kernLeft = KO_E;
kernRight = KO_K;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (360,0);
},
{
name = top;
pos = (360,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(689,750,l),
(474,750,l),
(155,321,l),
(201,136,l)
);
},
{
closed = 1;
nodes = (
(249,0,l),
(249,750,l),
(74,750,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(708,0,l),
(450,511,l),
(327,371,l),
(495,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
11 7 2 0 1 1 76 3 1 1 1 38 77 2 1 0 0 39 0 78 19 18 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 719;
}
);
metricLeft = H;
metricRight = A;
note = K;
unicode = 75;
userData = {
KernOnName = K;
};
},
{
glyphname = L;
kernLeft = KO_E;
kernRight = KO_L;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = center;
pos = (303,375);
},
{
name = top;
pos = (303,750);
},
{
name = topright;
pos = (586,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(579,0,l),
(579,155,l),
(250,155,l),
(250,750,l),
(74,750,l),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
3 1 2 2 38 77 0 0 0 1 96 0 1 1 39 1 78 0 0 0 5 0 5 17 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 606;
}
);
metricLeft = H;
note = L;
unicode = 76;
userData = {
KernOnName = L;
};
},
{
glyphname = M;
kernLeft = KO_H;
kernRight = KO_H;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(564,-15,o),
(606,30,o),
(626,111,cs),
(733,538,ls),
(734,542,o),
(738,540,o),
(738,537,cs),
(738,1,l),
(908,1,l),
(908,610,ls),
(908,709,o),
(846,765,o),
(762,765,cs),
(681,765,o),
(628,715,o),
(603,622,cs),
(494,212,ls),
(493,208,o),
(489,208,o),
(488,212,cs),
(376,622,ls),
(350,719,o),
(300,765,o),
(221,765,cs),
(137,765,o),
(74,709,o),
(74,610,cs),
(74,1,l),
(245,1,l),
(245,530,ls),
(245,533,o),
(249,534,o),
(250,531,cs),
(356,111,ls),
(377,29,o),
(420,-15,o),
(492,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
13 8 3 3 0 3 1 76 5 4 2 3 3 38 77 2 1 2 0 0 39 0 78 0 0 0 14 0 14 17 19 19 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 982;
}
);
metricLeft = H;
metricRight = H;
note = M;
unicode = 77;
userData = {
KernOnName = M;
};
},
{
glyphname = N;
kernLeft = KO_H;
kernRight = KO_H;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (387,0);
},
{
name = top;
pos = (387,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(645,-15,o),
(700,21,o),
(700,99,cs),
(700,750,l),
(534,750,l),
(534,271,ls),
(534,266,o),
(530,265,o),
(528,269,cs),
(338,663,ls),
(306,729,o),
(262,765,o),
(196,765,cs),
(131,765,o),
(74,721,o),
(74,638,cs),
(74,1,l),
(240,1,l),
(240,502,ls),
(240,507,o),
(244,507,o),
(246,503,cs),
(449,93,ls),
(487,16,o),
(526,-15,o),
(587,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
11 5 2 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 17 19 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
metricLeft = H;
metricRight = H;
note = N;
unicode = 78;
userData = {
KernOnName = N;
};
},
{
glyphname = O;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (400,0);
},
{
name = top;
pos = (400,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(617,-15,o),
(754,135,o),
(754,374,cs),
(754,614,o),
(617,765,o),
(400,765,cs),
(183,765,o),
(46,614,o),
(46,374,cs),
(46,135,o),
(183,-15,o),
(400,-15,cs)
);
},
{
closed = 1;
nodes = (
(293,140,o),
(226,230,o),
(226,374,cs),
(226,519,o),
(293,610,o),
(400,610,cs),
(507,610,o),
(574,519,o),
(574,374,cs),
(574,230,o),
(507,140,o),
(400,140,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 46 77 5 1 2 2 0 97 4 1 0 0 47 0 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = O;
unicode = 79;
userData = {
KernOnName = O;
};
},
{
glyphname = Oacute;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (291,0);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 1 0 0 3 1 0 103 0 5 5 3 97 0 3 3 46 77 8 1 4 4 2 97 7 1 2 2 47 2 78 21 20 5 4 0 0 29 27 20 35 21 35 13 11 4 19 5 19 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = Oacute;
unicode = 211;
},
{
glyphname = Ocircumflex;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (176,0);
ref = circumflexcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
5 1 1 0 1 76 0 0 7 2 2 1 4 0 1 103 0 6 6 4 97 0 4 4 46 77 9 1 5 5 3 97 8 1 3 3 47 3 78 24 23 8 7 0 0 32 30 23 38 24 38 16 14 7 22 8 22 0 6 0 6 17 17 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = Ocircumflex;
unicode = 212;
},
{
glyphname = Ograve;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (167,0);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 0 0 1 3 0 1 103 0 5 5 3 97 0 3 3 46 77 7 1 4 4 2 97 6 1 2 2 47 2 78 21 20 5 4 29 27 20 35 21 35 13 11 4 19 5 19 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = Ograve;
unicode = 210;
},
{
glyphname = Ohorn;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (392,0);
},
{
name = center;
pos = (392,374);
},
{
name = top;
pos = (392,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(609,-15,o),
(746,135,o),
(746,374,cs),
(746,614,o),
(609,765,o),
(392,765,cs),
(175,765,o),
(38,614,o),
(38,374,cs),
(38,135,o),
(175,-15,o),
(392,-15,cs)
);
},
{
closed = 1;
nodes = (
(279,135,o),
(208,227,o),
(208,374,cs),
(208,522,o),
(279,615,o),
(392,615,cs),
(505,615,o),
(576,522,o),
(576,374,cs),
(576,227,o),
(505,135,o),
(392,135,cs)
);
},
{
closed = 1;
nodes = (
(665,653,o),
(731,724,o),
(719,833,c),
(588,833,l),
(595,769,o),
(578,742,o),
(531,748,cs),
(490,754,o),
(462,765,o),
(392,765,c),
(557,658,l)
);
}
);
width = 784;
}
);
unicode = 416;
},
{
glyphname = Otilde;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (147,0);
ref = tildecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 4 3 1 3 4 114 0 1 0 0 1 112 10 5 2 3 2 1 0 7 3 0 105 0 9 9 7 97 0 7 7 46 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
0 4 3 1 3 4 1 128 0 1 0 3 1 0 126 10 5 2 3 2 1 0 7 3 0 105 0 9 9 7 97 0 7 7 46 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 55 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 2 0 3 2 103 10 1 5 0 0 7 5 0 105 0 9 9 7 97 0 7 7 46 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
50 49 34 33 0 0 58 56 49 64 50 64 42 40 33 48 34 48 0 32 0 32 40 34 18 39 34 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
note = Otilde;
unicode = 213;
},
{
glyphname = P;
kernLeft = KO_E;
kernRight = KO_P;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(248,0,l),
(248,262,l),
(362,262,ls),
(549,262,o),
(662,350,o),
(662,506,cs),
(662,662,o),
(549,750,o),
(362,750,cs),
(74,750,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(248,603,l),
(362,603,ls),
(432,603,o),
(482,572,o),
(482,506,cs),
(482,440,o),
(432,409,o),
(362,409,cs),
(248,409,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
6 1 3 0 1 2 3 1 103 0 4 4 0 95 5 1 0 0 38 77 0 2 2 39 2 78 14 13 1 0 20 18 13 21 14 21 11 10 9 7 0 12 1 12 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 685;
}
);
metricLeft = H;
note = P;
unicode = 80;
userData = {
KernOnName = P;
};
},
{
glyphname = Q;
kernLeft = KO_O;
kernRight = KO_Q;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(617,-15,o),
(754,135,o),
(754,374,cs),
(754,614,o),
(617,765,o),
(400,765,cs),
(183,765,o),
(46,614,o),
(46,374,cs),
(46,135,o),
(183,-15,o),
(400,-15,cs)
);
},
{
closed = 1;
nodes = (
(753,-38,l),
(593,154,l),
(477,58,l),
(638,-134,l)
);
},
{
closed = 1;
nodes = (
(293,140,o),
(226,230,o),
(226,374,cs),
(226,519,o),
(293,610,o),
(400,610,cs),
(507,610,o),
(574,519,o),
(574,374,cs),
(574,230,o),
(507,140,o),
(400,140,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
2 1 2 3 1 1 0 2 2 76 3 1 0 73 0 3 3 1 97 0 1 1 46 77 5 1 2 2 0 97 4 1 0 0 47 0 78 21 20 5 4 29 27 20 35 21 35 13 11 4 19 5 19 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 800;
}
);
metricLeft = O;
metricRight = O;
note = Q;
unicode = 81;
},
{
glyphname = R;
kernLeft = KO_E;
kernRight = KO_R;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (344,0);
},
{
name = top;
pos = (344,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(248,0,l),
(248,274,l),
(372,274,ls),
(443,274,o),
(480,234,o),
(480,159,cs),
(480,0,l),
(652,0,l),
(652,177,ls),
(652,286,o),
(614,347,o),
(463,369,c),
(464,333,l),
(591,356,o),
(662,428,o),
(662,532,cs),
(662,672,o),
(558,750,o),
(372,750,cs),
(74,750,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(248,601,l),
(372,601,ls),
(443,601,o),
(482,570,o),
(482,515,cs),
(482,455,o),
(443,421,o),
(372,421,cs),
(248,421,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
6 1 4 0 1 0 4 1 103 0 5 5 3 95 0 3 3 38 77 2 1 0 0 39 0 78 23 22 29 27 22 30 23 30 33 17 35 20 7 8 26 
CALL[ ]	/* CallFunction */";
};
width = 708;
}
);
metricLeft = H;
note = R;
unicode = 82;
userData = {
KernOnName = R;
};
},
{
glyphname = S;
kernLeft = KO_S;
kernRight = KO_S;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (346,0);
},
{
name = top;
pos = (346,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(531,-15,o),
(647,79,o),
(647,219,cs),
(647,324,o),
(591,386,o),
(463,424,cs),
(296,474,ls),
(246,489,o),
(225,510,o),
(225,544,cs),
(225,589,o),
(262,618,o),
(332,618,cs),
(403,618,o),
(447,587,o),
(461,523,c),
(641,523,l),
(625,677,o),
(511,765,o),
(339,765,cs),
(161,765,o),
(46,670,o),
(46,521,cs),
(46,391,o),
(133,351,o),
(228,323,cs),
(388,276,ls),
(445,259,o),
(473,244,o),
(473,206,cs),
(473,160,o),
(421,134,o),
(349,134,cs),
(275,134,o),
(221,169,o),
(215,244,c),
(37,244,l),
(37,76,o),
(177,-15,o),
(353,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 46 77 0 2 2 0 97 6 1 0 0 47 0 78 1 0 35 33 30 29 26 24 10 8 5 4 0 48 1 48 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 691;
},
{
associatedMasterId = m002;
layerId = "15B94583-42FA-4614-B7C9-3A0F9C887742";
name = "27 Jun 24 at 12:43";
shapes = (
{
closed = 1;
nodes = (
(529,-15,o),
(642,78,o),
(642,226,cs),
(642,352,o),
(561,412,o),
(457,434,cs),
(385,449,o),
(375,449,o),
(319,457,cs),
(261,465,o),
(211,473,o),
(211,538,cs),
(211,590,o),
(254,623,o),
(332,623,cs),
(423,623,o),
(455,579,o),
(466,523,c),
(636,523,l),
(623,657,o),
(518,765,o),
(337,765,cs),
(188,765,o),
(41,692,o),
(41,525,cs),
(41,408,o),
(113,339,o),
(258,317,cs),
(312,309,o),
(288,312,o),
(374,300,cs),
(435,292,o),
(476,268,o),
(476,220,cs),
(476,166,o),
(423,129,o),
(341,129,cs),
(265,129,o),
(198,161,o),
(190,244,c),
(26,244,l),
(31,78,o),
(164,-15,o),
(347,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 46 77 0 2 2 0 97 6 1 0 0 47 0 78 1 0 35 33 30 29 26 24 10 8 5 4 0 48 1 48 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = S;
unicode = 83;
userData = {
KernOnName = S;
};
},
{
glyphname = T;
kernLeft = KO_T;
kernRight = KO_T;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (320,0);
},
{
name = center;
pos = (320,375);
},
{
name = top;
pos = (320,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(408,0,l),
(408,594,l),
(620,594,l),
(620,750,l),
(20,750,l),
(20,594,l),
(232,594,l),
(232,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
2 1 0 0 3 95 4 1 3 3 38 77 0 1 1 39 1 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = T;
unicode = 84;
userData = {
KernOnName = T;
};
},
{
glyphname = U;
kernLeft = KO_U;
kernRight = KO_U;
lastChange = "2025-03-16 14:26:48 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = ogonek;
pos = (567,30);
},
{
name = top;
pos = (385,750);
},
{
name = topright;
pos = (530,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(576,-15,o),
(706,103,o),
(706,290,cs),
(706,750,l),
(530,750,l),
(530,290,ls),
(530,195,o),
(474,135,o),
(384,135,cs),
(296,135,o),
(240,195,o),
(240,290,cs),
(240,750,l),
(64,750,l),
(64,290,ls),
(64,103,o),
(194,-15,o),
(386,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
3 1 1 1 38 77 0 2 2 0 95 4 1 0 0 39 0 78 1 0 16 15 12 9 6 5 0 21 1 20 5 8 22 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = U;
unicode = 85;
},
{
glyphname = Uacute;
kernLeft = KO_U;
kernRight = KO_Uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (276,0);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 49 values pushed */
6 1 1 0 0 3 1 0 103 5 1 3 3 38 77 0 4 4 2 95 7 1 2 2 39 2 78 5 4 0 0 20 19 16 13 10 9 4 25 5 24 0 3 0 3 17 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = Uacute;
unicode = 218;
},
{
glyphname = Ugrave;
kernLeft = KO_U;
kernRight = KO_Uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (152,0);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
0 0 0 1 3 0 1 103 5 1 3 3 38 77 0 4 4 2 95 6 1 2 2 39 2 78 5 4 20 19 16 13 10 9 4 25 5 24 17 16 7 8 24 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = Ugrave;
unicode = 217;
},
{
glyphname = Uhorn;
kernLeft = KO_U;
kernRight = KO_Uhorn;
lastChange = "2025-09-12 13:00:47 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (385,0);
},
{
name = top;
pos = (385,750);
}
);
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (480,0);
ref = horncomb;
}
);
width = 770;
}
);
unicode = 431;
},
{
glyphname = Utilde;
kernLeft = KO_U;
kernRight = KO_Uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (132,0);
ref = tildecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 4 3 1 3 4 114 0 1 0 0 1 112 10 5 2 3 2 1 0 7 3 0 105 9 1 7 7 38 77 0 8 8 6 95 11 1 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 4 3 1 3 4 1 128 0 1 0 3 1 0 126 10 5 2 3 2 1 0 7 3 0 105 9 1 7 7 38 77 0 8 8 6 95 11 1 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 50 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 3 0 2 0 3 2 103 10 1 5 0 0 7 5 0 105 9 1 7 7 38 77 0 8 8 6 95 11 1 6 6 39 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
34 33 0 0 49 48 45 42 39 38 33 54 34 53 0 32 0 32 40 34 18 39 34 12 8 27 
CALL[ ]	/* CallFunction */";
};
width = 770;
}
);
note = Utilde;
unicode = 360;
},
{
glyphname = V;
kernLeft = KO_V;
kernRight = KO_V;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(447,-15,o),
(480,37,o),
(522,155,cs),
(736,750,l),
(554,750,l),
(375,215,ls),
(374,211,o),
(370,210,o),
(369,215,cs),
(194,750,l),
(11,750,l),
(215,153,ls),
(255,34,o),
(292,-15,o),
(368,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 2 0 1 76 1 1 0 0 38 77 3 1 2 2 39 2 78 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 747;
}
);
metricLeft = A;
metricRight = A;
note = V;
unicode = 86;
userData = {
KernOnName = V;
};
},
{
glyphname = W;
kernLeft = KO_W;
kernRight = KO_W;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (515,0);
},
{
name = top;
pos = (515,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(375,-15,o),
(412,39,o),
(432,135,cs),
(513,528,ls),
(514,533,o),
(518,533,o),
(519,528,cs),
(599,135,ls),
(619,39,o),
(656,-15,o),
(743,-15,cs),
(824,-15,o),
(867,33,o),
(889,136,cs),
(1019,750,l),
(851,750,l),
(742,215,ls),
(741,210,o),
(737,210,o),
(736,215,cs),
(651,632,ls),
(635,713,o),
(593,765,o),
(519,765,cs),
(445,765,o),
(404,713,o),
(388,632,cs),
(303,208,ls),
(302,203,o),
(298,203,o),
(297,208,cs),
(185,750,l),
(11,750,l),
(142,136,ls),
(164,33,o),
(207,-15,o),
(288,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 8 3 3 0 2 1 76 5 4 3 3 2 2 38 77 1 1 0 0 39 0 78 0 0 0 12 0 12 18 17 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1030;
}
);
metricLeft = V;
metricRight = V;
note = W;
unicode = 87;
userData = {
KernOnName = W;
};
},
{
glyphname = X;
kernLeft = KO_X;
kernRight = KO_X;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(738,0,l),
(245,750,l),
(44,750,l),
(537,0,l)
);
},
{
closed = 1;
nodes = (
(228,0,l),
(409,290,l),
(304,413,l),
(33,0,l)
);
},
{
closed = 1;
nodes = (
(742,750,l),
(547,750,l),
(369,468,l),
(475,347,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 20 values pushed */
3 1 1 1 38 77 2 1 0 0 39 0 78 17 17 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 774;
}
);
note = X;
unicode = 88;
userData = {
KernOnName = X;
};
},
{
glyphname = Y;
kernLeft = KO_Y;
kernRight = KO_Y;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (337,0);
},
{
name = top;
pos = (337,748);
},
{
name = topleft;
pos = (15,748);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(417,0,l),
(417,347,l),
(391,263,l),
(679,750,l),
(486,750,l),
(305,404,l),
(371,404,l),
(188,750,l),
(-6,750,l),
(277,263,l),
(252,347,l),
(252,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
7 4 1 3 0 1 1 76 3 2 2 1 1 38 77 0 0 0 39 0 78 0 0 0 8 0 8 18 18 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = Y;
unicode = 89;
userData = {
KernOnName = Y;
};
},
{
glyphname = Yacute;
kernLeft = KO_Yacute;
kernRight = KO_Yacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (228,-2);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
11 8 5 3 2 3 1 76 5 1 1 0 0 3 1 0 103 6 4 2 3 3 38 77 0 2 2 39 2 78 4 4 0 0 4 12 4 12 10 9 7 6 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = Yacute;
unicode = 221;
},
{
glyphname = Ygrave;
kernLeft = KO_Yacute;
kernRight = KO_Yacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (104,-2);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
11 8 5 3 2 3 1 76 0 0 0 1 3 0 1 103 5 4 2 3 3 38 77 0 2 2 39 2 78 4 4 4 12 4 12 18 19 17 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 673;
}
);
note = Ygrave;
unicode = 7922;
},
{
glyphname = Z;
kernLeft = KO_Z;
kernRight = KO_Z;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (327,0);
},
{
name = center;
pos = (327,375);
},
{
name = top;
pos = (327,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(599,0,l),
(599,150,l),
(248,150,ls),
(244,150,o),
(242,152,o),
(245,156,cs),
(576,538,ls),
(602,568,o),
(617,605,o),
(617,650,cs),
(617,712,o),
(577,750,o),
(490,750,cs),
(58,750,l),
(58,601,l),
(403,601,ls),
(407,601,o),
(408,599,o),
(405,595,cs),
(94,247,ls),
(51,198,o),
(30,150,o),
(30,104,cs),
(30,41,o),
(72,0,o),
(140,0,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
6 1 2 0 2 1 76 0 2 2 3 95 4 1 3 3 38 77 0 0 0 1 95 0 1 1 39 1 78 0 0 0 9 0 9 18 17 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 654;
}
);
note = Z;
unicode = 90;
userData = {
KernOnName = Z;
};
},
{
color = 6;
glyphname = M.ss01;
kernLeft = KO_H;
kernRight = KO_H;
lastChange = "2025-09-12 12:56:40 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(239,0,l),
(239,505,ls),
(239,576,o),
(279,619,o),
(343,619,cs),
(409,619,o),
(450,576,o),
(450,505,cs),
(450,0,l),
(616,0,l),
(616,505,ls),
(616,576,o),
(656,619,o),
(722,619,cs),
(786,619,o),
(824,576,o),
(824,505,cs),
(824,0,l),
(991,0,l),
(991,505,ls),
(991,662,o),
(894,765,o),
(745,765,cs),
(638,765,o),
(553,714,o),
(514,632,c),
(555,632,l),
(516,714,o),
(430,765,o),
(322,765,cs),
(172,765,o),
(73,662,o),
(73,505,cs),
(73,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
13 8 3 3 0 3 1 76 5 4 2 3 3 38 77 2 1 2 0 0 39 0 78 0 0 0 14 0 14 17 19 19 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 1064;
}
);
},
{
color = 6;
glyphname = N.ss01;
kernLeft = KO_H;
kernRight = KO_H;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(240,0,l),
(240,486,ls),
(240,569,o),
(290,621,o),
(369,621,cs),
(448,621,o),
(498,569,o),
(498,486,cs),
(498,0,l),
(665,0,l),
(665,488,ls),
(665,658,o),
(551,765,o),
(369,765,cs),
(188,765,o),
(74,658,o),
(74,488,cs),
(74,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
11 5 2 1 0 1 76 3 1 0 0 38 77 2 1 1 1 39 1 78 17 19 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 739;
}
);
metricLeft = H;
metricRight = H;
},
{
glyphname = a;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (323,0);
},
{
name = ogonek;
pos = (594,0);
},
{
name = top;
pos = (323,570);
}
);
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(392,-15,o),
(471,62,o),
(485,173,c),
(485,417,l),
(471,517,o),
(391,585,o),
(281,585,cs),
(135,585,o),
(32,463,o),
(32,290,cs),
(32,111,o),
(139,-15,o),
(291,-15,cs)
);
},
{
closed = 1;
nodes = (
(244,127,o),
(197,190,o),
(197,290,cs),
(197,390,o),
(244,452,o),
(320,452,cs),
(395,452,o),
(442,390,o),
(442,290,cs),
(442,190,o),
(395,127,o),
(320,127,cs)
);
},
{
closed = 1;
nodes = (
(594,0,l),
(594,570,l),
(460,570,l),
(442,431,l),
(442,148,l),
(460,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
35 34 13 12 4 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
0 3 3 1 97 4 1 1 1 49 77 7 1 2 2 0 97 8 5 6 3 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 4 41 77 0 3 3 1 97 0 1 1 49 77 8 1 5 5 39 77 7 1 2 2 0 97 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
33 33 18 17 1 0 33 38 33 38 37 36 26 24 17 32 18 32 9 7 0 16 1 16 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = a.ss01;
unicode = 97;
userData = {
KernOnName = a;
};
},
{
glyphname = aacute;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (214,-180);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
39 38 17 16 4 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
8 1 1 0 0 3 1 0 103 0 5 5 3 97 6 1 3 3 49 77 10 1 4 4 2 97 11 7 9 3 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
8 1 1 0 0 3 1 0 103 0 6 6 41 77 0 5 5 3 97 0 3 3 49 77 11 1 7 7 39 77 10 1 4 4 2 97 9 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
37 37 22 21 5 4 0 0 37 42 37 42 41 40 30 28 21 36 22 36 13 11 4 20 5 20 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = aacute.ss01;
unicode = 225;
userData = {
KernOnName = aacute;
};
},
{
glyphname = abreve;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (110,-180);
ref = brevecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
49 48 27 26 4 6 7 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
10 3 2 1 2 2 1 112 0 0 0 2 97 0 2 2 38 77 0 7 7 5 97 8 1 5 5 49 77 12 1 6 6 4 97 13 9 11 3 4 4 47 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
10 3 2 1 2 2 1 112 0 2 0 0 5 2 0 106 0 7 7 5 97 8 1 5 5 49 77 12 1 6 6 4 97 13 9 11 3 4 4 47 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
10 3 2 1 2 2 1 112 0 0 0 2 97 0 2 2 38 77 0 7 7 5 97 8 1 5 5 49 77 12 1 6 6 4 97 13 9 11 3 4 4 47 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 43 values pushed */
10 3 2 1 2 1 133 0 0 0 2 97 0 2 2 38 77 0 7 7 5 97 8 1 5 5 49 77 12 1 6 6 4 97 13 9 11 3 4 4 47 4 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 51 values pushed */
10 3 2 1 2 1 133 0 0 0 2 97 0 2 2 38 77 0 8 8 41 77 0 7 7 5 97 0 5 5 49 77 13 1 9 9 39 77 12 1 6 6 4 97 11 1 4 4 47 4 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 49 values pushed */
10 3 2 1 2 1 133 0 2 0 0 5 2 0 106 0 8 8 41 77 0 7 7 5 97 0 5 5 49 77 13 1 9 9 39 77 12 1 6 6 4 97 11 1 4 4 47 4 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 36 values pushed */
47 47 32 31 15 14 0 0 47 52 47 52 51 50 40 38 31 46 32 46 23 21 14 30 15 30 0 13 0 13 34 18 34 14 8 25 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = abreve.ss01;
unicode = 259;
userData = {
KernOnName = abreve;
};
},
{
glyphname = acircumflex;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (99,-180);
ref = circumflexcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 13 values pushed */
5 1 1 0 42 41 20 19 4 5 6 2 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 0 9 2 2 1 4 0 1 103 0 6 6 4 97 7 1 4 4 49 77 11 1 5 5 3 97 12 8 10 3 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 44 values pushed */
0 0 9 2 2 1 4 0 1 103 0 7 7 41 77 0 6 6 4 97 0 4 4 49 77 12 1 8 8 39 77 11 1 5 5 3 97 10 1 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
40 40 25 24 8 7 0 0 40 45 40 45 44 43 33 31 24 39 25 39 16 14 7 23 8 23 0 6 0 6 17 17 13 8 24 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = acircumflex.ss01;
unicode = 226;
userData = {
KernOnName = acircumflex;
};
},
{
glyphname = agrave;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (90,-180);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 9 values pushed */
39 38 17 16 4 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 1 3 0 1 103 0 5 5 3 97 6 1 3 3 49 77 9 1 4 4 2 97 10 7 8 3 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 0 0 1 3 0 1 103 0 6 6 41 77 0 5 5 3 97 0 3 3 49 77 10 1 7 7 39 77 9 1 4 4 2 97 8 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 29 values pushed */
37 37 22 21 5 4 37 42 37 42 41 40 30 28 21 36 22 36 13 11 4 20 5 20 17 16 11 8 24 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = agrave.ss01;
unicode = 224;
userData = {
KernOnName = agrave;
};
},
{
glyphname = atilde;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (70,-180);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
73 72 34 3 13 12 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 65 values pushed */
0 1 4 0 0 1 114 0 7 6 11 6 7 11 128 0 11 0 12 13 11 12 103 0 4 4 38 77 2 1 0 0 3 98 14 5 2 3 3 48 77 0 6 6 8 97 0 8 8 49 77 0 13 13 9 97 16 10 15 3 9 9 39 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 63 values pushed */
0 1 4 0 0 1 114 0 7 6 11 6 7 11 128 14 5 2 3 2 1 0 8 3 0 105 0 11 0 12 13 11 12 103 0 4 4 38 77 0 6 6 8 97 0 8 8 49 77 0 13 13 9 97 16 10 15 3 9 9 39 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 67 values pushed */
0 1 4 0 0 1 114 0 7 6 11 6 7 11 128 14 5 2 3 2 1 0 8 3 0 105 0 11 0 12 13 11 12 103 0 4 4 38 77 0 6 6 8 97 0 8 8 49 77 15 1 9 9 39 77 0 13 13 10 97 16 1 10 10 47 10 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 68 values pushed */
0 1 4 0 4 1 0 128 0 7 6 11 6 7 11 128 14 5 2 3 2 1 0 8 3 0 105 0 11 0 12 13 11 12 103 0 4 4 38 77 0 6 6 8 97 0 8 8 49 77 15 1 9 9 39 77 0 13 13 10 97 16 1 10 10 47 10 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 1 4 2 4 1 2 128 0 7 6 11 6 7 11 128 0 3 0 2 0 3 2 103 14 1 5 0 0 8 5 0 105 0 11 0 12 13 11 12 103 0 4 4 38 77 0 6 6 8 97 0 8 8 49 77 15 1 9 9 39 77 0 13 13 10 97 16 1 10 10 47 10 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 38 values pushed */
53 52 33 33 0 0 69 67 63 61 60 58 52 75 53 75 33 51 33 51 47 45 42 41 39 37 0 32 0 32 40 34 18 39 34 17 8 27 
CALL[ ]	/* CallFunction */";
};
width = 655;
}
);
note = atilde;
unicode = 227;
userData = {
KernOnName = atilde;
};
},
{
glyphname = b;
kernLeft = KO_h;
kernRight = KO_b;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(539,-15,o),
(638,108,o),
(638,283,cs),
(638,498,o),
(500,585,o),
(379,585,cs),
(279,585,o),
(197,525,o),
(180,407,c),
(180,173,l),
(197,55,o),
(288,-15,o),
(388,-15,cs)
);
},
{
closed = 1;
nodes = (
(198,0,l),
(223,158,l),
(223,750,l),
(61,750,l),
(61,0,l)
);
},
{
closed = 1;
nodes = (
(270,127,o),
(223,190,o),
(223,290,cs),
(223,390,o),
(270,452,o),
(345,452,cs),
(424,452,o),
(473,390,o),
(473,290,cs),
(473,190,o),
(424,127,o),
(345,127,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
10 9 3 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 0 0 38 77 0 5 5 3 97 0 3 3 49 77 8 1 4 4 1 97 7 2 6 3 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 0 0 38 77 0 5 5 3 97 0 3 3 49 77 6 1 1 1 39 77 8 1 4 4 2 97 7 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
23 22 6 5 0 0 31 29 22 37 23 37 15 13 5 21 6 21 0 4 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = b;
unicode = 98;
userData = {
KernOnName = b;
};
},
{
glyphname = c;
kernLeft = KO_e;
kernRight = KO_c;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (311,0);
},
{
name = top;
pos = (311,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(473,-15,o),
(566,108,o),
(566,213,c),
(411,213,l),
(411,163,o),
(368,125,o),
(312,125,cs),
(241,125,o),
(197,186,o),
(197,284,cs),
(197,382,o),
(242,445,o),
(312,445,cs),
(367,445,o),
(403,407,o),
(403,353,c),
(558,353,l),
(558,496,o),
(461,585,o),
(314,585,cs),
(138,585,o),
(32,459,o),
(32,283,cs),
(32,109,o),
(141,-15,o),
(307,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 2 3 5 3 2 5 128 0 5 4 3 5 4 126 0 3 3 1 97 0 1 1 49 77 0 4 4 0 97 6 1 0 0 47 0 78 1 0 28 27 25 23 17 15 13 12 9 7 0 31 1 31 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = c;
unicode = 99;
userData = {
KernOnName = c;
};
},
{
glyphname = d;
kernLeft = KO_d;
kernRight = KO_d;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(402,-15,o),
(473,54,o),
(490,173,c),
(490,407,l),
(473,524,o),
(391,585,o),
(283,585,cs),
(136,585,o),
(32,462,o),
(32,288,cs),
(32,110,o),
(143,-15,o),
(301,-15,cs)
);
},
{
closed = 1;
nodes = (
(246,127,o),
(197,190,o),
(197,290,cs),
(197,390,o),
(246,452,o),
(325,452,cs),
(400,452,o),
(447,390,o),
(447,290,cs),
(447,190,o),
(400,127,o),
(325,127,cs)
);
},
{
closed = 1;
nodes = (
(609,0,l),
(609,750,l),
(447,750,l),
(447,158,l),
(472,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
34 13 12 3 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 4 4 38 77 0 3 3 1 97 0 1 1 49 77 7 1 2 2 0 97 8 5 6 3 0 0 47 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
0 4 4 38 77 0 3 3 1 97 0 1 1 49 77 8 1 5 5 39 77 7 1 2 2 0 97 6 1 0 0 47 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 27 values pushed */
33 33 18 17 1 0 33 37 33 37 36 35 26 24 17 32 18 32 9 7 0 16 1 16 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = d;
unicode = 100;
userData = {
KernOnName = d;
};
},
{
glyphname = dcroat;
kernLeft = KO_aacute;
kernRight = KO_dcroat;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(402,-15,o),
(473,54,o),
(490,173,c),
(490,407,l),
(473,524,o),
(391,585,o),
(283,585,cs),
(136,585,o),
(32,462,o),
(32,288,cs),
(32,110,o),
(143,-15,o),
(301,-15,cs)
);
},
{
closed = 1;
nodes = (
(246,127,o),
(197,190,o),
(197,290,cs),
(197,390,o),
(246,452,o),
(325,452,cs),
(400,452,o),
(447,390,o),
(447,290,cs),
(447,190,o),
(400,127,o),
(325,127,cs)
);
},
{
closed = 1;
nodes = (
(609,0,l),
(609,750,l),
(447,750,l),
(447,158,l),
(472,0,l)
);
},
{
closed = 1;
nodes = (
(658,619,l),
(658,699,l),
(326,699,l),
(326,619,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 17 16 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 0 8 1 1 3 0 1 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 10 1 4 4 2 97 11 7 9 3 2 2 47 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 43 values pushed */
0 0 8 1 1 3 0 1 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 11 1 7 7 39 77 10 1 4 4 2 97 9 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
37 37 22 21 5 4 0 0 37 41 37 41 40 39 30 28 21 36 22 36 13 11 4 20 5 20 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 671;
}
);
note = dcroat;
unicode = 273;
userData = {
KernOnName = dcroat;
};
},
{
glyphname = e;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (315,0);
},
{
name = ogonek;
pos = (483,30);
},
{
name = top;
pos = (315,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(457,-15,o),
(562,60,o),
(583,184,c),
(432,184,l),
(422,143,o),
(383,110,o),
(325,110,cs),
(242,110,o),
(193,177,o),
(193,285,cs),
(193,312,ls),
(193,402,o),
(241,461,o),
(316,461,cs),
(371,461,o),
(422,429,o),
(427,345,c),
(156,345,l),
(156,246,l),
(587,246,l),
(597,460,o),
(492,585,o),
(315,585,cs),
(143,585,o),
(32,468,o),
(32,285,cs),
(32,101,o),
(144,-15,o),
(318,-15,cs)
);
}
);
width = 615;
}
);
note = e;
unicode = 101;
userData = {
KernOnName = e;
};
},
{
glyphname = eacute;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (206,-180);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
0 8 4 7 4 8 7 128 9 1 1 0 0 3 1 0 103 0 5 0 4 8 5 4 103 0 6 6 3 97 0 3 3 49 77 0 7 7 2 97 10 1 2 2 47 2 78 5 4 0 0 35 34 32 30 23 21 19 18 17 16 13 11 4 37 5 37 0 3 0 3 17 11 8 23 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = eacute;
unicode = 233;
},
{
glyphname = ecircumflex;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (91,-180);
ref = circumflexcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
5 1 1 0 1 76 0 9 5 8 5 9 8 128 0 0 10 2 2 1 4 0 1 103 0 6 0 5 9 6 5 103 0 7 7 4 97 0 4 4 49 77 0 8 8 3 97 11 1 3 3 47 3 78 8 7 0 0 38 37 35 33 26 24 22 21 20 19 16 14 7 40 8 40 0 6 0 6 17 17 12 8 24 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = ecircumflex;
unicode = 234;
},
{
glyphname = egrave;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (82,-180);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 69 values pushed */
0 8 4 7 4 8 7 128 0 0 0 1 3 0 1 103 0 5 0 4 8 5 4 103 0 6 6 3 97 0 3 3 49 77 0 7 7 2 97 9 1 2 2 47 2 78 5 4 35 34 32 30 23 21 19 18 17 16 13 11 4 37 5 37 17 16 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 615;
}
);
note = egrave;
unicode = 232;
userData = {
KernOnName = egrave;
};
},
{
glyphname = f;
kernLeft = KO_f;
kernRight = KO_f;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(281,598,ls),
(281,624,o),
(297,640,o),
(323,640,cs),
(429,640,l),
(429,780,l),
(282,780,ls),
(187,780,o),
(127,716,o),
(127,615,cs),
(127,0,l)
);
},
{
closed = 1;
nodes = (
(405,440,l),
(405,570,l),
(33,570,l),
(33,440,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
0 0 0 1 3 0 1 103 5 1 4 4 3 95 0 3 3 41 77 0 2 2 39 2 78 12 12 12 15 12 15 18 19 33 34 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 436;
}
);
note = f;
unicode = 102;
userData = {
KernOnName = f;
};
},
{
glyphname = g;
kernLeft = KO_g;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
associatedMasterId = m002;
layerId = "883D16EA-75C1-4D49-84D7-8E0391BAB28C";
name = "18 Jun 24 at 16:02";
shapes = (
{
closed = 1;
nodes = (
(471,-195,o),
(582,-93,o),
(582,52,cs),
(582,570,l),
(439,570,l),
(421,422,l),
(421,52,ls),
(421,-23,o),
(373,-65,o),
(302,-65,cs),
(245,-65,o),
(196,-34,o),
(181,13,c),
(40,13,l),
(53,-111,o),
(171,-195,o),
(302,-195,cs)
);
},
{
closed = 1;
nodes = (
(402,47,o),
(447,143,o),
(464,239,c),
(464,455,l),
(432,531,o),
(368,585,o),
(278,585,cs),
(142,585,o),
(36,475,o),
(36,316,cs),
(36,151,o),
(138,47,o),
(268,47,cs)
);
},
{
closed = 1;
nodes = (
(237,174,o),
(201,227,o),
(201,307,cs),
(201,388,o),
(238,446,o),
(308,446,cs),
(378,446,o),
(421,386,o),
(421,307,cs),
(421,227,o),
(378,174,o),
(308,174,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
86 1 6 9 30 29 2 4 6 7 6 2 2 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 6 11 1 4 3 6 4 105 0 7 7 5 97 8 1 5 5 49 77 0 9 9 5 97 8 1 5 5 49 77 0 3 3 2 95 0 2 2 39 77 0 1 1 0 95 10 1 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 6 11 1 4 3 6 4 105 0 7 7 5 97 0 5 5 49 77 0 9 9 8 97 0 8 8 41 77 0 3 3 2 95 0 2 2 39 77 0 1 1 0 95 10 1 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
12 1 6 11 1 4 3 6 4 105 0 1 10 1 0 1 0 99 0 7 7 5 97 0 5 5 49 77 0 9 9 8 97 0 8 8 41 77 0 3 3 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 6 11 1 4 3 6 4 105 0 3 0 2 1 3 2 103 0 1 10 1 0 1 0 99 0 7 7 5 97 0 5 5 49 77 0 9 9 8 97 0 8 8 41 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
61 60 45 44 1 0 83 81 80 78 69 67 60 75 61 75 53 51 44 59 45 59 38 35 22 19 15 12 0 43 1 42 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 644;
},
{
anchors = (
{
name = bottom;
pos = (320,-180);
},
{
name = top;
pos = (320,570);
}
);
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(468,-195,o),
(579,-93,o),
(579,52,cs),
(579,570,l),
(436,570,l),
(418,422,l),
(418,52,ls),
(418,-23,o),
(370,-65,o),
(299,-65,cs),
(242,-65,o),
(208,-42,o),
(192,13,c),
(51,13,l),
(54,-111,o),
(168,-195,o),
(299,-195,cs)
);
},
{
closed = 1;
nodes = (
(399,47,o),
(444,143,o),
(461,239,c),
(461,455,l),
(429,531,o),
(365,585,o),
(275,585,cs),
(139,585,o),
(33,475,o),
(33,316,cs),
(33,151,o),
(135,47,o),
(265,47,cs)
);
},
{
closed = 1;
nodes = (
(234,174,o),
(198,227,o),
(198,307,cs),
(198,388,o),
(235,446,o),
(305,446,cs),
(375,446,o),
(418,386,o),
(418,307,cs),
(418,227,o),
(375,174,o),
(305,174,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
86 1 6 9 30 29 2 4 6 7 6 2 2 3 3 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
12 1 6 11 1 4 3 6 4 105 0 7 7 5 97 8 1 5 5 49 77 0 9 9 5 97 8 1 5 5 49 77 0 3 3 2 95 0 2 2 39 77 0 1 1 0 95 10 1 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
42 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 52 values pushed */
12 1 6 11 1 4 3 6 4 105 0 7 7 5 97 0 5 5 49 77 0 9 9 8 97 0 8 8 41 77 0 3 3 2 95 0 2 2 39 77 0 1 1 0 95 10 1 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 49 values pushed */
12 1 6 11 1 4 3 6 4 105 0 1 10 1 0 1 0 99 0 7 7 5 97 0 5 5 49 77 0 9 9 8 97 0 8 8 41 77 0 3 3 2 95 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 47 values pushed */
12 1 6 11 1 4 3 6 4 105 0 3 0 2 1 3 2 103 0 1 10 1 0 1 0 99 0 7 7 5 97 0 5 5 49 77 0 9 9 8 97 0 8 8 41 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
61 60 45 44 1 0 83 81 80 78 69 67 60 75 61 75 53 51 44 59 45 59 38 35 22 19 15 12 0 43 1 42 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 640;
}
);
note = g;
unicode = 103;
userData = {
KernOnName = g;
};
},
{
glyphname = h;
kernLeft = KO_h;
kernRight = KO_h;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(585,0,l),
(585,372,ls),
(585,498,o),
(504,585,o),
(376,585,cs),
(284,585,o),
(214,524,o),
(185,423,c),
(223,324,l),
(223,397,o),
(261,446,o),
(324,446,cs),
(385,446,o),
(423,404,o),
(423,339,cs),
(423,0,l)
);
},
{
closed = 1;
nodes = (
(223,0,l),
(223,750,l),
(61,750,l),
(61,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
8 7 2 2 0 1 76 5 1 4 4 38 77 0 0 0 1 97 0 1 1 49 77 3 1 2 2 39 2 78 18 18 18 21 18 21 18 20 38 34 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 643;
}
);
note = h;
unicode = 104;
userData = {
KernOnName = h;
};
},
{
glyphname = i;
kernLeft = KO_i;
kernRight = KO_i;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (138,0);
},
{
name = ogonek;
pos = (219,0);
}
);
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(219,0,l),
(219,570,l),
(57,570,l),
(57,0,l)
);
},
{
closed = 1;
nodes = (
(189,632,o),
(229,666,o),
(229,715,cs),
(229,763,o),
(189,797,o),
(138,797,cs),
(86,797,o),
(46,763,o),
(46,715,cs),
(46,666,o),
(86,632,o),
(138,632,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 0 0 1 97 0 1 1 48 77 5 1 3 3 41 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 4 1 0 3 1 0 105 5 1 3 3 41 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 276;
},
{
anchors = (
{
name = bottom;
pos = (158,0);
}
);
associatedMasterId = m002;
layerId = "B37234FC-92FD-4514-A482-AF4395D408E4";
name = "27 Jun 24 at 12:20";
shapes = (
{
closed = 1;
nodes = (
(239,0,l),
(239,570,l),
(77,570,l),
(77,0,l)
);
},
{
closed = 1;
nodes = (
(239,630,l),
(239,750,l),
(77,750,l),
(77,630,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 0 0 1 97 0 1 1 48 77 5 1 3 3 41 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 4 1 0 3 1 0 105 5 1 3 3 41 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 315;
}
);
note = i;
unicode = 105;
userData = {
KernOnName = i;
};
},
{
glyphname = iacute;
kernLeft = KO_iacute;
kernRight = KO_iacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (29,-180);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
4 1 1 0 0 3 1 0 103 5 1 3 3 41 77 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = iacute;
unicode = 237;
},
{
glyphname = igrave;
kernLeft = KO_igrave;
kernRight = KO_igrave;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (-95,-180);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 1 3 0 1 103 4 1 3 3 41 77 0 2 2 39 2 78 4 4 4 7 4 7 18 17 16 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = igrave;
unicode = 236;
},
{
glyphname = itilde;
kernLeft = KO_itilde;
kernRight = KO_igrave;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (-115,-180);
ref = tildecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 37 values pushed */
0 1 4 0 0 1 114 0 4 4 38 77 2 1 0 0 3 98 8 5 2 3 3 48 77 9 1 7 7 41 77 0 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
0 1 4 0 0 1 114 8 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 9 1 7 7 41 77 0 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 36 values pushed */
0 1 4 0 4 1 0 128 8 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 9 1 7 7 41 77 0 6 6 39 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 42 values pushed */
0 1 4 2 4 1 2 128 0 3 0 2 0 3 2 103 8 1 5 0 0 7 5 0 105 0 4 4 38 77 9 1 7 7 41 77 0 6 6 39 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 22 values pushed */
33 33 0 0 33 36 33 36 35 34 0 32 0 32 40 34 18 39 34 10 8 27 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = itilde;
unicode = 297;
userData = {
KernOnName = itilde;
};
},
{
glyphname = j;
kernLeft = KO_j;
kernRight = KO_i;
lastChange = "2025-03-16 14:26:48 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(91,-180,ls),
(231,-180,o),
(292,-124,o),
(292,0,cs),
(292,570,l),
(130,570,l),
(130,0,ls),
(130,-23,o),
(119,-40,o),
(91,-40,cs),
(46,-40,l),
(46,-180,l)
);
},
{
closed = 1;
nodes = (
(262,632,o),
(302,666,o),
(302,715,cs),
(302,763,o),
(262,797,o),
(211,797,cs),
(159,797,o),
(119,763,o),
(119,715,cs),
(119,666,o),
(159,632,o),
(211,632,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
5 1 0 0 1 97 0 1 1 48 77 0 4 4 41 77 0 3 3 2 98 6 1 2 2 43 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 1 5 1 0 4 1 0 105 0 4 4 41 77 0 3 3 2 98 6 1 2 2 43 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
13 12 1 0 20 19 16 14 12 23 13 23 7 5 0 11 1 11 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 349;
}
);
note = j;
unicode = 106;
},
{
glyphname = k;
kernLeft = KO_h;
kernRight = KO_k;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (303,0);
},
{
name = top;
pos = (303,950);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(586,570,l),
(389,570,l),
(142,259,l),
(142,41,l)
);
},
{
closed = 1;
nodes = (
(223,0,l),
(223,750,l),
(61,750,l),
(61,0,l)
);
},
{
closed = 1;
nodes = (
(599,0,l),
(393,380,l),
(292,248,l),
(415,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
6 5 1 0 4 1 0 1 76 5 1 3 3 38 77 0 0 0 41 77 2 4 2 1 1 39 1 78 8 8 4 4 8 11 8 11 10 9 4 7 4 7 18 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 605;
},
{
associatedMasterId = m002;
layerId = "6F0DA3AF-CBE1-4602-B426-CE2C5D0C388A";
name = "18 Jun 24 at 22:38";
shapes = (
{
closed = 1;
nodes = (
(627,570,l),
(405,570,l),
(143,317,l),
(143,131,l)
);
},
{
closed = 1;
nodes = (
(224,0,l),
(224,750,l),
(62,750,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(640,0,l),
(384,410,l),
(270,308,l),
(453,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
6 5 1 0 4 1 0 1 76 5 1 3 3 38 77 0 0 0 41 77 2 4 2 1 1 39 1 78 8 8 4 4 8 11 8 11 10 9 4 7 4 7 18 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 623;
}
);
note = k;
unicode = 107;
userData = {
KernOnName = k;
};
},
{
glyphname = l;
kernLeft = KO_l;
kernRight = KO_l;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (179,0);
},
{
name = center;
pos = (179,285);
},
{
name = top;
pos = (139,750);
},
{
name = topright;
pos = (223,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(296,0,l),
(296,140,l),
(265,140,ls),
(241,140,o),
(223,158,o),
(223,183,cs),
(223,750,l),
(61,750,l),
(61,155,ls),
(61,62,o),
(123,0,o),
(216,0,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 38 77 0 0 0 39 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 357;
}
);
note = l;
unicode = 108;
userData = {
KernOnName = l;
};
},
{
glyphname = m;
kernLeft = KO_n;
kernRight = KO_n;
lastChange = "2025-09-12 12:56:44 +0000";
layers = (
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(907,0,l),
(907,378,ls),
(907,442,o),
(856,539,o),
(765,591,o),
(707,591,qs),
(639,591,o),
(535,511,o),
(503,429,q),
(561,330,l),
(561,365,o),
(586,420,o),
(630,453,o),
(661,453,qs),
(702,453,o),
(753,395,o),
(753,345,qs),
(753,0,l)
);
},
{
closed = 1;
nodes = (
(561,0,l),
(561,378,ls),
(561,442,o),
(510,539,o),
(419,591,o),
(361,591,qs),
(295,591,o),
(199,505,o),
(178,429,q),
(215,330,l),
(215,365,o),
(240,420,o),
(284,453,o),
(315,453,qs),
(356,453,o),
(407,395,o),
(407,345,qs),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(215,419,l),
(197,579,l),
(61,579,l),
(61,0,l),
(215,0,l)
);
}
);
};
layerId = "9B7C54D5-3A40-41D0-B891-3C83FA7A459C";
name = "4 Jun 24 at 12:03";
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(215,346,ls),
(215,411,o),
(251,452,o),
(309,452,cs),
(312,452,ls),
(370,452,o),
(407,411,o),
(407,346,cs),
(407,0,l),
(561,0,l),
(561,346,ls),
(561,411,o),
(598,452,o),
(656,452,cs),
(659,452,ls),
(717,452,o),
(753,411,o),
(753,346,cs),
(753,0,l),
(907,0,l),
(907,356,ls),
(907,495,o),
(818,591,o),
(688,591,cs),
(659,591,ls),
(592,591,o),
(526,559,o),
(485,511,c),
(448,559,o),
(389,591,o),
(329,591,cs),
(290,591,ls),
(154,591,o),
(61,495,o),
(61,356,cs),
(61,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 962;
},
{
associatedMasterId = m002;
layerId = "2EA77502-529D-4EC5-BD07-462E2347049B";
name = "24 Jun 24 at 16:51";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,362,ls),
(224,412,o),
(262,444,o),
(322,444,cs),
(383,444,o),
(421,412,o),
(421,362,cs),
(421,0,l),
(583,0,l),
(583,362,ls),
(583,412,o),
(621,444,o),
(681,444,cs),
(741,444,o),
(779,412,o),
(779,362,cs),
(777,0,l),
(940,0,l),
(940,362,ls),
(940,503,o),
(849,590,o),
(704,590,cs),
(607,590,o),
(522,539,o),
(483,457,c),
(524,457,l),
(485,539,o),
(399,590,o),
(301,590,cs),
(154,590,o),
(62,503,o),
(62,362,cs),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 997;
},
{
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(217,0,l),
(217,340,ls),
(217,401,o),
(257,444,o),
(315,444,cs),
(373,444,o),
(414,401,o),
(414,340,cs),
(414,0,l),
(576,0,l),
(576,340,ls),
(576,401,o),
(616,444,o),
(674,444,cs),
(732,444,o),
(770,401,o),
(770,340,cs),
(770,0,l),
(933,0,l),
(933,340,ls),
(933,487,o),
(836,590,o),
(697,590,cs),
(600,590,o),
(515,539,o),
(476,457,c),
(517,457,l),
(478,539,o),
(392,590,o),
(294,590,cs),
(154,590,o),
(55,487,o),
(55,340,cs),
(55,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 988;
},
{
associatedMasterId = m002;
layerId = "D575319A-51BF-42D5-8CEC-08FCC396D1DB";
name = "24 Jun 24 at 17:09";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,342,ls),
(224,405,o),
(262,444,o),
(322,444,cs),
(383,444,o),
(421,405,o),
(421,342,cs),
(421,0,l),
(583,0,l),
(583,342,ls),
(583,405,o),
(621,444,o),
(681,444,cs),
(741,444,o),
(779,405,o),
(779,342,cs),
(777,0,l),
(940,0,l),
(940,342,ls),
(940,494,o),
(849,590,o),
(704,590,cs),
(607,590,o),
(522,539,o),
(483,457,c),
(524,457,l),
(485,539,o),
(399,590,o),
(301,590,cs),
(154,590,o),
(62,494,o),
(62,342,cs),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 997;
},
{
associatedMasterId = m002;
layerId = "8A94A6F8-5A16-405D-B3CE-0D365473E7B1";
name = "1 Jul 24 at 12:08";
shapes = (
{
closed = 1;
nodes = (
(281,0,l),
(281,340,ls),
(281,374,o),
(303,396,o),
(338,396,cs),
(373,396,o),
(395,374,o),
(395,340,cs),
(395,0,l),
(615,0,l),
(615,340,ls),
(615,374,o),
(637,396,o),
(672,396,cs),
(707,396,o),
(729,374,o),
(729,340,cs),
(729,0,l),
(948,0,l),
(948,346,ls),
(948,490,o),
(852,590,o),
(698,590,cs),
(579,590,o),
(492,517,o),
(456,387,c),
(557,387,l),
(521,517,o),
(433,590,o),
(312,590,cs),
(158,590,o),
(62,490,o),
(62,346,cs),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 997;
}
);
metricLeft = n;
metricRight = n;
note = m;
unicode = 109;
},
{
glyphname = n;
kernLeft = KO_n;
kernRight = KO_n;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
associatedMasterId = m002;
layerId = "2C267EE3-747A-4539-BF66-61AFBC9D72D3";
name = "17 Jun 24 at 16:57";
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(215,346,ls),
(215,411,o),
(254,452,o),
(317,452,cs),
(320,452,ls),
(383,452,o),
(423,411,o),
(423,346,cs),
(423,0,l),
(577,0,l),
(577,356,ls),
(577,495,o),
(483,591,o),
(347,591,cs),
(292,591,ls),
(155,591,o),
(61,495,o),
(61,356,cs),
(61,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 632;
},
{
associatedMasterId = m002;
layerId = "3BB989D4-C9B6-48C8-9C89-0636C3A6C6BE";
name = "24 Jun 24 at 16:05";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,431,l),
(206,570,l),
(62,570,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(578,0,l),
(578,372,ls),
(578,498,o),
(497,585,o),
(369,585,cs),
(277,585,o),
(207,524,o),
(178,423,c),
(216,324,l),
(216,397,o),
(254,446,o),
(317,446,cs),
(378,446,o),
(416,404,o),
(416,339,cs),
(416,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
associatedMasterId = m002;
layerId = "3014F6BC-6566-4D9C-AC91-E8A499A6554A";
name = "24 Jun 24 at 16:51";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,363,ls),
(224,413,o),
(261,445,o),
(320,445,cs),
(379,445,o),
(416,413,o),
(416,363,cs),
(416,0,l),
(578,0,l),
(578,365,ls),
(578,500,o),
(478,585,o),
(320,585,cs),
(162,585,o),
(62,500,o),
(62,365,cs),
(62,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(254,0,l),
(254,354,ls),
(254,389,o),
(290,428,o),
(320,428,qs),
(351,428,o),
(387,389,o),
(387,354,qs),
(387,0,l),
(552,0,l),
(552,358,ls),
(552,476,o),
(425,588,o),
(320,588,qs),
(216,588,o),
(89,476,o),
(89,358,qs),
(89,0,l)
);
}
);
};
layerId = "40177B54-C5E6-4F87-9E5F-C463DAA78B7F";
name = "24 Jun 24 at 17:49";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,343,ls),
(224,406,o),
(261,445,o),
(320,445,cs),
(379,445,o),
(416,406,o),
(416,343,cs),
(416,0,l),
(578,0,l),
(578,355,ls),
(578,509,o),
(485,585,o),
(320,585,cs),
(155,585,o),
(62,509,o),
(62,355,cs),
(62,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
anchors = (
{
name = bottom;
pos = (313,0);
},
{
name = top;
pos = (313,570);
}
);
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(217,0,l),
(217,333,ls),
(217,405,o),
(257,445,o),
(313,445,cs),
(370,445,o),
(409,405,o),
(409,333,cs),
(409,0,l),
(571,0,l),
(571,335,ls),
(571,489,o),
(471,585,o),
(313,585,cs),
(155,585,o),
(55,489,o),
(55,335,cs),
(55,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = n;
unicode = 110;
userData = {
KernOnName = n;
};
},
{
glyphname = o;
kernLeft = KO_o;
kernRight = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (324,0);
},
{
name = top;
pos = (324,570);
},
{
name = topright;
pos = (324,555);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(495,-15,o),
(616,108,o),
(616,283,cs),
(616,460,o),
(495,585,o),
(324,585,cs),
(153,585,o),
(32,460,o),
(32,283,cs),
(32,108,o),
(153,-15,o),
(324,-15,cs)
);
},
{
closed = 1;
nodes = (
(249,125,o),
(197,189,o),
(197,283,cs),
(197,379,o),
(249,445,o),
(324,445,cs),
(399,445,o),
(451,379,o),
(451,283,cs),
(451,189,o),
(399,125,o),
(324,125,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 49 77 5 1 2 2 0 97 4 1 0 0 47 0 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 648;
},
{
anchors = (
{
name = bottom;
pos = (311,0);
},
{
name = center;
pos = (311,283);
},
{
name = ogonek;
pos = (559,10);
},
{
name = top;
pos = (311,566);
},
{
name = topright;
pos = (310,591);
}
);
associatedMasterId = m002;
layerId = "DDC42867-6D79-4A93-B9FE-0EFA8048208A";
name = "4 Jun 24 at 12:31";
shapes = (
{
closed = 1;
nodes = (
(481,-12,o),
(590,105,o),
(590,290,cs),
(590,469,o),
(485,591,o),
(310,591,cs),
(141,591,o),
(31,474,o),
(31,290,cs),
(31,101,o),
(146,-12,o),
(310,-12,cs)
);
},
{
closed = 1;
nodes = (
(237,127,o),
(186,187,o),
(186,290,cs),
(186,392,o),
(237,452,o),
(310,452,cs),
(384,452,o),
(435,392,o),
(435,290,cs),
(435,187,o),
(385,127,o),
(310,127,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 3 1 97 0 1 1 49 77 5 1 2 2 0 97 4 1 0 0 47 0 78 17 16 1 0 25 23 16 31 17 31 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 621;
}
);
note = o;
unicode = 111;
userData = {
KernOnName = o;
};
},
{
glyphname = oacute;
kernLeft = KO_o;
kernRight = KO_oacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (215,-180);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 58 values pushed */
6 1 1 0 0 3 1 0 103 0 5 5 3 97 0 3 3 49 77 8 1 4 4 2 97 7 1 2 2 47 2 78 21 20 5 4 0 0 29 27 20 35 21 35 13 11 4 19 5 19 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = oacute;
unicode = 243;
},
{
glyphname = ocircumflex;
kernLeft = KO_o;
kernRight = KO_ocircumflex;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (100,-180);
ref = circumflexcomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
5 1 1 0 1 76 0 0 7 2 2 1 4 0 1 103 0 6 6 4 97 0 4 4 49 77 9 1 5 5 3 97 8 1 3 3 47 3 78 24 23 8 7 0 0 32 30 23 38 24 38 16 14 7 22 8 22 0 6 0 6 17 17 10 8 24 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = ocircumflex;
unicode = 244;
userData = {
KernOnName = ocircumflex;
};
},
{
glyphname = ograve;
kernLeft = KO_o;
kernRight = KO_oacute;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (91,-180);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 52 values pushed */
0 0 0 1 3 0 1 103 0 5 5 3 97 0 3 3 49 77 7 1 4 4 2 97 6 1 2 2 47 2 78 21 20 5 4 29 27 20 35 21 35 13 11 4 19 5 19 17 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = ograve;
unicode = 242;
userData = {
KernOnName = ograve;
};
},
{
glyphname = ohorn;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (324,0);
},
{
name = top;
pos = (324,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(495,-15,o),
(616,108,o),
(616,283,cs),
(616,460,o),
(495,585,o),
(324,585,cs),
(153,585,o),
(32,460,o),
(32,283,cs),
(32,108,o),
(153,-15,o),
(324,-15,cs)
);
},
{
closed = 1;
nodes = (
(249,125,o),
(197,189,o),
(197,283,cs),
(197,379,o),
(249,445,o),
(324,445,cs),
(399,445,o),
(451,379,o),
(451,283,cs),
(451,189,o),
(399,125,o),
(324,125,cs)
);
},
{
closed = 1;
nodes = (
(592,473,o),
(658,544,o),
(646,653,c),
(520,653,l),
(527,589,o),
(510,557,o),
(463,564,cs),
(412,571,o),
(394,585,o),
(324,585,c),
(484,478,l)
);
}
);
width = 651;
}
);
metricLeft = o;
unicode = 417;
userData = {
KernOnName = ohorn;
};
},
{
glyphname = otilde;
kernLeft = KO_o;
kernRight = KO_oacute;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (71,-180);
ref = tildecomb;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 48 values pushed */
0 1 4 0 0 1 114 0 4 4 38 77 2 1 0 0 3 98 10 5 2 3 3 48 77 0 9 9 7 97 0 7 7 49 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 1 4 0 0 1 114 10 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 0 9 9 7 97 0 7 7 49 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 4 0 4 1 0 128 10 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 0 9 9 7 97 0 7 7 49 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 2 4 1 2 128 0 3 0 2 0 3 2 103 10 1 5 0 0 7 5 0 105 0 4 4 38 77 0 9 9 7 97 0 7 7 49 77 12 1 8 8 6 97 11 1 6 6 47 6 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 30 values pushed */
50 49 34 33 0 0 58 56 49 64 50 64 42 40 33 48 34 48 0 32 0 32 40 34 18 39 34 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 648;
}
);
note = otilde;
unicode = 245;
userData = {
KernOnName = otilde;
};
},
{
glyphname = p;
kernLeft = KO_p;
kernRight = KO_b;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(500,-15,o),
(638,72,o),
(638,287,cs),
(638,462,o),
(539,585,o),
(388,585,cs),
(288,585,o),
(197,515,o),
(180,397,c),
(180,163,l),
(197,45,o),
(279,-15,o),
(379,-15,cs)
);
},
{
closed = 1;
nodes = (
(223,-180,l),
(223,412,l),
(198,570,l),
(61,570,l),
(61,-180,l)
);
},
{
closed = 1;
nodes = (
(270,118,o),
(223,180,o),
(223,280,cs),
(223,380,o),
(270,443,o),
(345,443,cs),
(424,443,o),
(473,380,o),
(473,280,cs),
(473,180,o),
(424,118,o),
(345,118,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
10 9 2 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
0 5 5 0 97 3 1 0 0 41 77 7 1 4 4 2 97 6 1 2 2 47 77 0 1 1 43 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
0 0 0 41 77 0 5 5 3 97 0 3 3 49 77 7 1 4 4 2 97 6 1 2 2 47 77 0 1 1 43 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 21 values pushed */
23 22 6 5 31 29 22 37 23 37 15 13 5 21 6 21 18 16 8 8 24 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = p;
unicode = 112;
},
{
glyphname = q;
kernLeft = KO_q;
kernRight = KO_a;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(391,-15,o),
(473,46,o),
(490,163,c),
(490,397,l),
(473,516,o),
(402,585,o),
(301,585,cs),
(143,585,o),
(32,460,o),
(32,282,cs),
(32,108,o),
(136,-15,o),
(283,-15,cs)
);
},
{
closed = 1;
nodes = (
(246,118,o),
(197,180,o),
(197,280,cs),
(197,380,o),
(246,443,o),
(325,443,cs),
(400,443,o),
(447,380,o),
(447,280,cs),
(447,180,o),
(400,118,o),
(325,118,cs)
);
},
{
closed = 1;
nodes = (
(609,-180,l),
(609,570,l),
(472,570,l),
(447,412,l),
(447,-180,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
10 9 3 3 5 4 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
8 1 4 4 1 97 7 2 6 3 1 1 41 77 0 5 5 3 97 0 3 3 47 77 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 34 values pushed */
6 1 1 1 41 77 8 1 4 4 2 97 7 1 2 2 49 77 0 5 5 3 97 0 3 3 47 77 0 0 0 43 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
23 22 6 5 0 0 31 29 22 37 23 37 15 13 5 21 6 21 0 4 0 4 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 670;
}
);
note = q;
unicode = 113;
},
{
glyphname = r;
kernLeft = KO_n;
kernRight = KO_r;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (217,0);
},
{
name = top;
pos = (237,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(223,0,l),
(223,329,ls),
(223,425,o),
(279,445,o),
(341,445,cs),
(369,445,o),
(390,441,o),
(415,437,c),
(415,576,l),
(377,584,o),
(335,585,o),
(318,585,cs),
(152,585,o),
(61,494,o),
(61,330,cs),
(61,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
14 3 2 1 3 1 76 0 3 3 0 95 2 1 0 0 41 77 4 1 1 1 39 1 78 0 0 12 10 9 7 0 4 0 4 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 434;
},
{
associatedMasterId = m002;
layerId = "3A1E7824-EEE0-4313-BC82-D9C23E424B81";
name = "27 Jun 24 at 12:25";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,334,ls),
(224,393,o),
(259,430,o),
(316,430,cs),
(440,430,l),
(440,570,l),
(291,570,ls),
(150,570,o),
(62,483,o),
(62,345,cs),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
14 3 2 1 3 1 76 0 3 3 0 95 2 1 0 0 41 77 4 1 1 1 39 1 78 0 0 12 10 9 7 0 4 0 4 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 486;
}
);
note = r;
unicode = 114;
userData = {
KernOnName = r;
};
},
{
glyphname = s;
kernLeft = KO_s;
kernRight = KO_s;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (263,0);
},
{
name = top;
pos = (253,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(409,-15,o),
(496,55,o),
(496,175,cs),
(496,254,o),
(458,305,o),
(372,331,cs),
(342,340,o),
(280,354,o),
(247,363,cs),
(186,380,o),
(169,395,o),
(169,419,cs),
(169,455,o),
(210,470,o),
(244,470,cs),
(292,470,o),
(333,440,o),
(333,400,c),
(485,400,l),
(485,509,o),
(388,585,o),
(254,585,cs),
(146,585,o),
(19,535,o),
(19,392,cs),
(19,296,o),
(77,262,o),
(145,239,cs),
(184,226,o),
(214,219,o),
(259,208,cs),
(323,192,o),
(342,183,o),
(342,156,cs),
(342,121,o),
(308,102,o),
(261,102,cs),
(207,102,o),
(170,127,o),
(159,185,c),
(16,185,l),
(16,61,o),
(110,-15,o),
(263,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 49 77 0 2 2 0 97 6 1 0 0 47 0 78 1 0 33 31 29 28 25 23 10 8 5 4 0 46 1 46 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 525;
},
{
associatedMasterId = m002;
layerId = "9F853B2E-DDCA-41E3-9EB4-ED6F877CEC6B";
name = "27 Jun 24 at 12:36";
shapes = (
{
closed = 1;
nodes = (
(403,-15,o),
(524,41,o),
(524,181,cs),
(524,257,o),
(490,317,o),
(400,333,cs),
(355,341,o),
(322,346,o),
(275,353,cs),
(255,356,o),
(192,366,o),
(192,415,cs),
(192,457,o),
(239,470,o),
(273,470,cs),
(325,470,o),
(366,440,o),
(366,400,c),
(513,400,l),
(513,509,o),
(416,585,o),
(279,585,cs),
(171,585,o),
(44,532,o),
(44,399,cs),
(44,311,o),
(100,252,o),
(171,241,cs),
(211,235,o),
(248,229,o),
(287,222,cs),
(327,215,o),
(373,214,o),
(373,163,cs),
(373,123,o),
(342,101,o),
(286,101,cs),
(223,101,o),
(184,131,o),
(177,185,c),
(29,185,l),
(29,70,o),
(143,-15,o),
(287,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 56 values pushed */
0 4 5 1 5 4 1 128 0 1 2 5 1 2 126 0 5 5 3 97 0 3 3 49 77 0 2 2 0 97 6 1 0 0 47 0 78 1 0 33 31 29 28 25 23 10 8 5 4 0 46 1 46 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 547;
}
);
note = s;
unicode = 115;
userData = {
KernOnName = s;
};
},
{
glyphname = t;
kernLeft = KO_t;
kernRight = KO_t;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (257,0);
},
{
name = center;
pos = (217,285);
},
{
name = top;
pos = (217,720);
},
{
name = topright;
pos = (414,950);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(422,0,l),
(422,140,l),
(331,140,ls),
(307,140,o),
(289,158,o),
(289,183,cs),
(289,720,l),
(127,720,l),
(127,155,ls),
(127,62,o),
(189,0,o),
(282,0,cs)
);
},
{
closed = 1;
nodes = (
(405,440,l),
(405,570,l),
(33,570,l),
(33,440,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
5 4 2 2 74 5 1 3 3 2 95 0 2 2 41 77 0 1 1 0 95 4 1 0 0 39 0 78 12 12 1 0 12 15 12 15 14 13 10 8 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 434;
}
);
note = t;
unicode = 116;
userData = {
KernOnName = t;
};
},
{
glyphname = u;
kernLeft = KO_u;
kernRight = KO_u;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = ogonek;
pos = (468,30);
},
{
name = top;
pos = (316,570);
},
{
name = topright;
pos = (409,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(464,-15,o),
(571,88,o),
(571,235,cs),
(571,570,l),
(409,570,l),
(409,229,ls),
(409,168,o),
(369,125,o),
(313,125,cs),
(257,125,o),
(217,168,o),
(217,229,cs),
(217,570,l),
(55,570,l),
(55,235,ls),
(55,88,o),
(162,-15,o),
(313,-15,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
4 5 2 1 1 41 77 0 2 2 0 98 3 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
4 5 2 1 1 41 77 0 0 0 39 77 0 2 2 3 98 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = u;
unicode = 117;
userData = {
KernOnName = u;
};
},
{
glyphname = uacute;
kernLeft = KO_u;
kernRight = KO_uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (207,-180);
ref = acutecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
17 16 7 3 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 28 values pushed */
7 1 1 0 0 3 1 0 103 6 8 2 3 3 41 77 0 4 4 2 98 5 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
7 1 1 0 0 3 1 0 103 6 8 2 3 3 41 77 0 2 2 39 77 0 4 4 5 98 0 5 5 47 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 24 values pushed */
4 4 0 0 26 25 21 19 13 11 4 8 4 8 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = uacute;
unicode = 250;
},
{
glyphname = ugrave;
kernLeft = KO_u;
kernRight = KO_uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (83,-180);
ref = gravecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
17 16 7 3 4 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 0 0 1 3 0 1 103 6 7 2 3 3 41 77 0 4 4 2 98 5 1 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 31 values pushed */
0 0 0 1 3 0 1 103 6 7 2 3 3 41 77 0 2 2 39 77 0 4 4 5 98 0 5 5 47 5 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 26 25 21 19 13 11 4 8 4 8 18 17 16 8 8 25 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = ugrave;
unicode = 249;
},
{
glyphname = uhorn;
kernLeft = KO_u;
kernRight = KO_uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (316,0);
},
{
name = top;
pos = (316,566);
}
);
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (362,-180);
ref = horncomb;
scale = (0.94,1);
}
);
width = 626;
}
);
unicode = 432;
},
{
glyphname = utilde;
kernLeft = KO_u;
kernRight = KO_uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (63,-180);
ref = tildecomb;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
46 45 36 3 8 7 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 44 values pushed */
0 1 4 0 0 1 114 0 4 4 38 77 2 1 0 0 3 98 11 5 2 3 3 48 77 10 12 2 7 7 41 77 0 8 8 6 98 9 1 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 42 values pushed */
0 1 4 0 0 1 114 11 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 10 12 2 7 7 41 77 0 8 8 6 98 9 1 6 6 39 6 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 46 values pushed */
0 1 4 0 0 1 114 11 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 10 12 2 7 7 41 77 0 6 6 39 77 0 8 8 9 98 0 9 9 47 9 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
45 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 47 values pushed */
0 1 4 0 4 1 0 128 11 5 2 3 2 1 0 7 3 0 105 0 4 4 38 77 10 12 2 7 7 41 77 0 6 6 39 77 0 8 8 9 98 0 9 9 47 9 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 53 values pushed */
0 1 4 2 4 1 2 128 0 3 0 2 0 3 2 103 11 1 5 0 0 7 5 0 105 0 4 4 38 77 10 12 2 7 7 41 77 0 6 6 39 77 0 8 8 9 98 0 9 9 47 9 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 28 values pushed */
33 33 0 0 55 54 50 48 42 40 33 37 33 37 35 34 0 32 0 32 40 34 18 39 34 13 8 27 
CALL[ ]	/* CallFunction */";
};
width = 626;
}
);
note = utilde;
unicode = 361;
},
{
glyphname = v;
kernLeft = KO_v;
kernRight = KO_v;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(352,-15,o),
(384,22,o),
(423,133,cs),
(576,570,l),
(413,570,l),
(275,135,l),
(312,135,l),
(170,570,l),
(3,570,l),
(161,131,ls),
(200,22,o),
(233,-15,o),
(293,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 30 values pushed */
3 1 2 0 1 76 1 1 0 0 41 77 3 1 2 2 39 2 78 0 0 0 6 0 6 18 17 4 8 24 
CALL[ ]	/* CallFunction */";
};
width = 579;
}
);
note = v;
unicode = 118;
userData = {
KernOnName = v;
};
},
{
glyphname = w;
kernLeft = KO_w;
kernRight = KO_w;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (432,0);
},
{
name = top;
pos = (432,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(315,-15,o),
(342,14,o),
(367,101,cs),
(446,378,l),
(418,378,l),
(497,101,ls),
(522,14,o),
(550,-15,o),
(611,-15,cs),
(670,-15,o),
(698,14,o),
(723,102,cs),
(860,570,l),
(700,570,l),
(592,144,l),
(619,144,l),
(530,483,ls),
(511,557,o),
(484,585,o),
(433,585,cs),
(381,585,o),
(354,557,o),
(335,483,cs),
(248,146,l),
(275,146,l),
(170,570,l),
(4,570,l),
(143,102,ls),
(169,14,o),
(198,-15,o),
(256,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 36 values pushed */
11 6 3 3 3 0 1 76 2 1 2 0 0 41 77 5 4 2 3 3 39 3 78 0 0 0 12 0 12 17 18 18 17 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 864;
}
);
note = w;
unicode = 119;
userData = {
KernOnName = w;
};
},
{
glyphname = x;
kernLeft = KO_x;
kernRight = KO_x;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(587,0,l),
(194,570,l),
(9,570,l),
(411,0,l)
);
},
{
closed = 1;
nodes = (
(199,0,l),
(337,220,l),
(234,314,l),
(28,0,l)
);
},
{
closed = 1;
nodes = (
(592,570,l),
(418,570,l),
(283,356,l),
(389,264,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
2 1 0 0 41 77 5 3 4 3 1 1 39 1 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 602;
}
);
note = x;
unicode = 120;
userData = {
KernOnName = x;
};
},
{
glyphname = y;
kernLeft = KO_y;
kernRight = KO_y;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (488,0);
},
{
name = top;
pos = (296,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(296,-180,l),
(593,570,l),
(424,570,l),
(127,-180,l)
);
},
{
closed = 1;
nodes = (
(350,125,l),
(173,570,l),
(3,570,l),
(233,-6,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 31 values pushed */
7 1 1 0 1 76 2 1 0 0 41 77 3 1 1 1 43 1 78 0 0 6 5 0 3 0 3 17 4 8 23 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = y;
unicode = 121;
userData = {
KernOnName = y;
};
},
{
glyphname = yacute;
kernLeft = KO_y;
kernRight = KO_y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (187,-180);
ref = acutecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
11 1 3 2 1 76 5 1 1 0 0 2 1 0 103 4 1 2 2 41 77 6 1 3 3 43 3 78 4 4 0 0 10 9 4 7 4 7 6 5 0 3 0 3 17 7 8 23 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = yacute;
unicode = 253;
},
{
glyphname = ygrave;
kernLeft = KO_y;
kernRight = KO_y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (63,-180);
ref = gravecomb;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
11 1 3 2 1 76 0 0 0 1 2 0 1 103 4 1 2 2 41 77 5 1 3 3 43 3 78 4 4 10 9 4 7 4 7 18 17 16 6 8 25 
CALL[ ]	/* CallFunction */";
};
width = 596;
}
);
note = ygrave;
unicode = 7923;
},
{
glyphname = z;
kernLeft = KO_z;
kernRight = KO_z;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (257,0);
},
{
name = center;
pos = (257,285);
},
{
name = top;
pos = (257,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(488,0,l),
(488,134,l),
(172,134,l),
(185,103,l),
(451,390,ls),
(478,420,o),
(494,456,o),
(494,489,cs),
(494,533,o),
(463,570,o),
(388,570,cs),
(13,570,l),
(13,436,l),
(339,436,l),
(326,467,l),
(73,203,ls),
(36,165,o),
(17,120,o),
(17,83,cs),
(17,36,o),
(48,0,o),
(116,0,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
1 1 2 6 1 0 2 75 0 2 2 3 95 4 1 3 3 41 77 0 0 0 1 95 0 1 1 39 1 78 0 0 0 9 0 9 18 17 18 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 513;
}
);
note = z;
unicode = 122;
userData = {
KernOnName = z;
};
},
{
glyphname = zero;
kernLeft = KO_zero;
kernRight = KO_zero;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(536,-12,o),
(655,136,o),
(655,372,cs),
(655,610,o),
(537,760,o),
(350,760,cs),
(161,760,o),
(43,612,o),
(43,375,cs),
(43,137,o),
(160,-12,o),
(346,-12,cs)
);
},
{
closed = 1;
nodes = (
(263,134,o),
(221,214,o),
(221,375,cs),
(221,535,o),
(263,614,o),
(349,614,cs),
(435,614,o),
(477,535,o),
(477,375,cs),
(477,214,o),
(435,134,o),
(349,134,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 0 97 4 1 0 0 46 77 0 3 3 1 97 0 1 1 47 1 78 17 16 1 0 24 22 16 30 17 30 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 698;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(537,-15,o),
(646,130,o),
(646,374,cs),
(646,618,o),
(537,765,o),
(357,765,cs),
(174,765,o),
(64,620,o),
(64,375,cs),
(64,129,o),
(174,-15,o),
(355,-15,cs)
);
},
{
closed = 1;
nodes = (
(232,71,o),
(165,180,o),
(165,375,cs),
(165,571,o),
(232,680,o),
(356,680,cs),
(478,680,o),
(546,572,o),
(546,375,cs),
(546,179,o),
(478,71,o),
(356,71,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 0 97 4 1 0 0 46 77 0 3 3 1 97 0 1 1 47 1 78 17 16 1 0 24 22 16 30 17 30 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 710;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(529,-12,o),
(631,129,o),
(631,374,cs),
(631,619,o),
(529,760,o),
(351,760,cs),
(172,760,o),
(69,619,o),
(69,374,cs),
(69,129,o),
(172,-12,o),
(351,-12,cs)
);
},
{
closed = 1;
nodes = (
(202,32,o),
(117,157,o),
(117,374,cs),
(117,592,o),
(202,717,o),
(351,717,cs),
(498,717,o),
(583,592,o),
(583,374,cs),
(583,157,o),
(498,32,o),
(351,32,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
5 1 2 2 0 97 4 1 0 0 46 77 0 3 3 1 97 0 1 1 47 1 78 17 16 1 0 24 22 16 30 17 30 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 700;
}
);
note = zero;
unicode = 48;
userData = {
KernOnName = zero;
};
},
{
glyphname = one;
kernLeft = KO_one;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(402,0,l),
(402,748,l),
(236,748,l),
(202,609,o),
(150,608,o),
(33,608,c),
(33,457,l),
(158,457,o),
(191,462,o),
(228,490,c),
(228,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 38 77 0 2 2 3 97 0 3 3 49 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 105 0 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
33 35 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 475;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(279,0,l),
(279,748,l),
(221,748,l),
(212,650,o),
(174,608,o),
(92,608,cs),
(28,608,l),
(28,568,l),
(92,568,ls),
(164,568,o),
(206,581,o),
(231,632,c),
(231,0,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(338,0,l),
(338,750,l),
(247,750,l),
(213,611,o),
(161,610,o),
(44,610,c),
(44,522,l),
(169,522,o),
(202,527,o),
(239,569,c),
(239,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 38 77 0 2 2 3 97 0 3 3 49 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 105 0 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
33 35 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 435;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(264,0,l),
(264,748,l),
(206,748,l),
(197,650,o),
(159,608,o),
(77,608,cs),
(13,608,l),
(13,568,l),
(77,568,ls),
(149,568,o),
(191,581,o),
(216,632,c),
(216,0,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(289,0,l),
(289,748,l),
(249,748,l),
(215,609,o),
(163,608,o),
(46,608,c),
(46,566,l),
(171,566,o),
(204,571,o),
(241,619,c),
(241,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
4 1 2 3 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
30 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 21 values pushed */
0 0 0 38 77 0 2 2 3 97 0 3 3 49 77 0 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 19 values pushed */
0 3 0 2 1 3 2 105 0 0 0 38 77 0 1 1 39 1 78 
EIF[ ]	/* EndIf */
PUSHB[ ]	/* 7 values pushed */
33 35 17 16 4 8 26 
CALL[ ]	/* CallFunction */";
};
width = 393;
}
);
note = one;
unicode = 49;
userData = {
KernOnSpecialSpacing = {
R = NoKerning;
};
};
},
{
glyphname = two;
kernLeft = KO_two;
kernRight = KO_two;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(567,0,l),
(567,148,l),
(183,148,l),
(232,125,l),
(213,173,o),
(282,217,o),
(354,256,cs),
(486,327,o),
(583,395,o),
(583,534,cs),
(583,676,o),
(479,765,o),
(313,765,cs),
(129,765,o),
(31,647,o),
(37,481,c),
(201,481,l),
(203,569,o),
(252,619,o),
(313,619,cs),
(370,619,o),
(410,583,o),
(410,534,cs),
(410,456,o),
(329,420,o),
(259,387,cs),
(94,309,o),
(35,222,o),
(35,86,cs),
(35,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 3 1 3 4 1 128 0 3 3 0 97 5 1 0 0 46 77 0 1 1 2 95 0 2 2 39 2 78 1 0 32 31 28 26 15 14 13 12 0 35 1 35 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 626;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(9,0,l),
(541,0,l),
(541,148,l),
(203,148,l),
(211,192,o),
(278,228,o),
(332,258,cs),
(448,322,o),
(557,388,o),
(557,533,cs),
(557,676,o),
(452,765,o),
(289,765,cs),
(102,765,o),
(5,647,o),
(11,481,c),
(175,481,l),
(177,569,o),
(225,619,o),
(289,619,cs),
(344,619,o),
(384,583,o),
(384,532,cs),
(384,491,o),
(357,459,o),
(326,437,cs),
(299,418,o),
(262,401,o),
(241,391,cs),
(95,320,o),
(9,248,o),
(9,86,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(547,0,l),
(547,84,l),
(120,84,l),
(161,50,l),
(141,185,o),
(245,243,o),
(337,292,cs),
(453,354,o),
(560,418,o),
(560,551,cs),
(560,679,o),
(462,765,o),
(318,765,cs),
(156,765,o),
(56,655,o),
(53,497,c),
(147,497,l),
(154,616,o),
(226,681,o),
(318,681,cs),
(402,681,o),
(462,628,o),
(462,553,cs),
(462,457,o),
(376,412,o),
(289,367,cs),
(154,299,o),
(51,220,o),
(51,48,cs),
(51,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 3 1 3 4 1 128 0 3 3 0 97 5 1 0 0 46 77 0 1 1 2 95 0 2 2 39 2 78 1 0 32 31 28 26 15 14 13 12 0 35 1 35 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 614;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(0,0,l),
(532,0,l),
(532,148,l),
(194,148,l),
(202,192,o),
(269,228,o),
(323,258,cs),
(439,322,o),
(548,388,o),
(548,533,cs),
(548,676,o),
(443,765,o),
(280,765,cs),
(93,765,o),
(-4,647,o),
(2,481,c),
(166,481,l),
(168,569,o),
(216,619,o),
(280,619,cs),
(335,619,o),
(375,583,o),
(375,532,cs),
(375,491,o),
(348,459,o),
(317,437,cs),
(290,418,o),
(253,401,o),
(232,391,cs),
(86,320,o),
(0,248,o),
(0,86,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(527,0,l),
(527,42,l),
(69,42,l),
(106,-1,l),
(85,191,o),
(212,258,o),
(319,315,cs),
(426,372,o),
(538,432,o),
(538,560,cs),
(538,677,o),
(445,760,o),
(315,760,cs),
(170,760,o),
(67,659,o),
(57,506,c),
(103,506,l),
(112,638,o),
(196,718,o),
(315,718,cs),
(419,718,o),
(490,655,o),
(490,562,cs),
(490,452,o),
(392,399,o),
(300,350,cs),
(193,293,o),
(55,221,o),
(55,22,cs),
(55,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 47 values pushed */
0 4 3 1 3 4 1 128 0 3 3 0 97 5 1 0 0 46 77 0 1 1 2 95 0 2 2 39 2 78 1 0 32 31 28 26 15 14 13 12 0 35 1 35 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = two;
unicode = 50;
userData = {
KernOnName = two;
};
},
{
glyphname = three;
kernLeft = KO_three;
kernRight = KO_three;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(474,-15,o),
(582,79,o),
(582,222,cs),
(582,334,o),
(515,388,o),
(391,403,c),
(407,377,l),
(503,396,o),
(566,466,o),
(566,558,cs),
(566,679,o),
(458,764,o),
(302,764,cs),
(127,764,o),
(35,657,o),
(37,512,c),
(192,512,l),
(189,566,o),
(225,620,o),
(297,620,cs),
(355,620,o),
(394,585,o),
(394,535,cs),
(394,486,o),
(356,454,o),
(303,454,cs),
(244,454,l),
(244,319,l),
(303,319,ls),
(372,319,o),
(413,284,o),
(413,228,cs),
(413,173,o),
(374,129,o),
(306,129,cs),
(237,129,o),
(192,173,o),
(186,248,c),
(31,248,l),
(35,95,o),
(123,-15,o),
(305,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
43 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 46 77 0 2 2 0 97 8 1 0 0 47 0 78 1 0 36 34 31 30 28 26 20 18 17 15 9 7 5 4 0 50 1 50 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 627;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 0;
nodes = (
(279,-12,ls),
(143,-12,o),
(37,93,o),
(28,248,c),
(76,248,l),
(83,119,o),
(167,30,o),
(279,30,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(450,-15,o),
(551,77,o),
(551,214,cs),
(551,325,o),
(483,386,o),
(382,396,c),
(389,379,l),
(480,392,o),
(541,460,o),
(541,557,cs),
(541,679,o),
(441,765,o),
(300,765,cs),
(148,765,o),
(51,668,o),
(46,513,c),
(137,513,l),
(140,611,o),
(200,680,o),
(298,680,cs),
(384,680,o),
(443,625,o),
(443,545,cs),
(443,470,o),
(391,423,o),
(314,423,cs),
(236,423,l),
(236,344,l),
(314,344,ls),
(400,344,o),
(455,295,o),
(455,216,cs),
(455,130,o),
(394,68,o),
(301,68,cs),
(203,68,o),
(138,135,o),
(131,247,c),
(40,247,l),
(47,93,o),
(137,-15,o),
(301,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
43 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 46 77 0 2 2 0 97 8 1 0 0 47 0 78 1 0 36 34 31 30 28 26 20 18 17 15 9 7 5 4 0 50 1 50 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 615;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 0;
nodes = (
(268,-12,ls),
(132,-12,o),
(26,93,o),
(17,248,c),
(65,248,l),
(72,119,o),
(156,30,o),
(268,30,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(431,-12,o),
(526,78,o),
(526,208,cs),
(526,310,o),
(467,383,o),
(372,391,c),
(371,380,l),
(464,389,o),
(521,459,o),
(521,554,cs),
(521,675,o),
(428,760,o),
(294,760,cs),
(152,760,o),
(57,664,o),
(48,512,c),
(94,512,l),
(101,639,o),
(178,718,o),
(293,718,cs),
(400,718,o),
(473,650,o),
(473,551,cs),
(473,460,o),
(413,403,o),
(318,403,cs),
(227,403,l),
(227,362,l),
(317,362,ls),
(417,362,o),
(478,304,o),
(478,209,cs),
(478,103,o),
(403,30,o),
(292,30,cs),
(174,30,o),
(95,114,o),
(88,248,c),
(42,248,l),
(51,88,o),
(148,-12,o),
(293,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 75 values pushed */
43 1 3 4 1 76 0 6 5 4 5 6 4 128 0 1 3 2 3 1 2 128 0 4 0 3 1 4 3 105 0 5 5 7 97 0 7 7 46 77 0 2 2 0 97 8 1 0 0 47 0 78 1 0 36 34 31 30 28 26 20 18 17 15 9 7 5 4 0 50 1 50 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 595;
}
);
note = three;
unicode = 51;
},
{
glyphname = four;
kernLeft = KO_four;
kernRight = KO_four;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(605,142,l),
(605,284,l),
(212,284,ls),
(208,284,o),
(207,286,o),
(209,290,cs),
(439,748,l),
(257,748,l),
(78,397,ls),
(47,336,o),
(18,292,o),
(18,246,cs),
(18,183,o),
(60,142,o),
(128,142,cs)
);
},
{
closed = 1;
nodes = (
(515,0,l),
(515,465,l),
(355,465,l),
(355,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 8 1 3 1 0 1 76 0 1 4 1 2 3 1 2 104 0 0 0 38 77 5 1 3 3 39 3 78 7 7 0 0 7 10 7 10 0 6 0 6 17 18 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(479,0,l),
(479,164,l),
(570,164,l),
(570,248,l),
(479,248,l),
(479,466,l),
(389,466,l),
(389,248,l),
(129,248,l),
(363,750,l),
(259,750,l),
(25,249,l),
(25,164,l),
(389,164,l),
(389,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 8 1 3 1 0 1 76 0 1 4 1 2 3 1 2 104 0 0 0 38 77 5 1 3 3 39 3 78 7 7 0 0 7 10 7 10 0 6 0 6 17 18 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 612;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(456,0,l),
(456,180,l),
(548,180,l),
(548,222,l),
(456,222,l),
(456,465,l),
(411,465,l),
(411,222,l),
(76,222,l),
(312,748,l),
(261,748,l),
(26,219,l),
(26,180,l),
(411,180,l),
(411,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 46 values pushed */
9 8 1 3 1 0 1 76 0 1 4 1 2 3 1 2 104 0 0 0 38 77 5 1 3 3 39 3 78 7 7 0 0 7 10 7 10 0 6 0 6 17 18 6 8 24 
CALL[ ]	/* CallFunction */";
};
width = 594;
}
);
note = four;
unicode = 52;
},
{
glyphname = five;
kernRight = KO_five;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(489,-15,o),
(588,95,o),
(588,251,cs),
(588,413,o),
(498,509,o),
(346,509,cs),
(279,509,o),
(239,481,o),
(224,466,c),
(241,601,l),
(563,601,l),
(563,748,l),
(93,748,l),
(42,309,l),
(207,309,l),
(223,345,o),
(256,367,o),
(305,367,cs),
(376,367,o),
(415,325,o),
(415,251,cs),
(415,177,o),
(376,135,o),
(307,135,cs),
(248,135,o),
(210,169,o),
(203,229,c),
(39,229,l),
(41,87,o),
(146,-15,o),
(307,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
1 1 4 0 1 76 0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 0 0 4 5 0 4 105 8 1 7 7 6 95 0 6 6 38 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 35 0 35 17 18 38 34 19 38 35 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 628;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 0;
nodes = (
(267,30,ls),
(154,30,o),
(79,107,o),
(72,230,c),
(26,230,l),
(35,81,o),
(128,-12,o),
(267,-12,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(453,-15,o),
(552,92,o),
(552,250,cs),
(552,406,o),
(460,509,o),
(322,509,cs),
(250,509,o),
(189,475,o),
(157,429,c),
(185,665,l),
(527,665,l),
(527,750,l),
(99,750,l),
(48,308,l),
(144,308,l),
(170,377,o),
(226,427,o),
(303,427,cs),
(393,427,o),
(454,358,o),
(454,250,cs),
(454,139,o),
(389,69,o),
(292,69,cs),
(200,69,o),
(150,130,o),
(143,198,c),
(49,198,l),
(56,83,o),
(141,-15,o),
(293,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
1 1 4 0 1 76 0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 0 0 4 5 0 4 105 8 1 7 7 6 95 0 6 6 38 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 35 0 35 17 18 38 34 19 38 35 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 604;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 0;
nodes = (
(257,30,ls),
(144,30,o),
(69,107,o),
(62,230,c),
(16,230,l),
(25,81,o),
(118,-12,o),
(257,-12,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(428,-12,o),
(526,95,o),
(526,252,cs),
(526,405,o),
(432,509,o),
(304,509,cs),
(224,509,o),
(152,469,o),
(109,406,c),
(145,706,l),
(501,706,l),
(501,748,l),
(101,748,l),
(50,309,l),
(99,309,l),
(134,407,o),
(209,469,o),
(298,469,cs),
(404,469,o),
(478,382,o),
(478,253,cs),
(478,118,o),
(398,30,o),
(280,30,cs),
(170,30,o),
(104,106,o),
(97,199,c),
(51,199,l),
(60,80,o),
(143,-12,o),
(282,-12,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 67 values pushed */
1 1 4 0 1 76 0 5 4 2 4 5 2 128 0 2 3 4 2 3 126 0 0 0 4 5 0 4 105 8 1 7 7 6 95 0 6 6 38 77 0 3 3 1 97 0 1 1 47 1 78 0 0 0 35 0 35 17 18 38 34 19 38 35 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 582;
}
);
note = five;
unicode = 53;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
};
};
},
{
glyphname = six;
kernLeft = KO_six;
kernRight = KO_six;
lastChange = "2025-03-02 12:27:23 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(515,-15,o),
(611,102,o),
(611,242,cs),
(611,385,o),
(511,479,o),
(385,479,cs),
(310,479,o),
(215,446,o),
(199,374,c),
(213,355,l),
(209,379,o),
(208,402,o),
(208,424,cs),
(208,537,o),
(259,614,o),
(349,614,cs),
(403,614,o),
(435,582,o),
(445,542,c),
(605,542,l),
(597,677,o),
(487,765,o),
(342,765,cs),
(136,765,o),
(32,610,o),
(39,354,cs),
(45,120,o),
(144,-15,o),
(336,-15,cs)
);
},
{
closed = 1;
nodes = (
(273,132,o),
(227,177,o),
(227,241,cs),
(227,304,o),
(273,348,o),
(339,348,cs),
(403,348,o),
(448,304,o),
(448,241,cs),
(448,177,o),
(403,132,o),
(339,132,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 6 0 1 76 0 3 4 0 4 3 0 128 0 0 0 6 5 0 6 105 0 4 4 2 97 0 2 2 46 77 7 1 5 5 1 97 0 1 1 47 1 78 34 33 42 40 33 48 34 48 34 19 38 38 35 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 651;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 0;
nodes = (
(317,718,ls),
(422,718,o),
(493,651,o),
(499,542,c),
(545,542,l),
(537,676,o),
(448,760,o),
(316,760,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(498,-15,o),
(600,94,o),
(600,237,cs),
(600,383,o),
(495,480,o),
(361,480,cs),
(260,480,o),
(165,423,o),
(140,325,c),
(150,318,l),
(150,329,o),
(149,341,o),
(149,392,cs),
(149,571,o),
(221,678,o),
(343,678,cs),
(429,678,o),
(485,623,o),
(492,544,c),
(584,544,l),
(576,680,o),
(474,765,o),
(341,765,cs),
(124,765,o),
(49,566,o),
(52,360,cs),
(55,153,o),
(137,-15,o),
(338,-15,cs)
);
},
{
closed = 1;
nodes = (
(240,70,o),
(171,141,o),
(171,239,cs),
(171,336,o),
(240,404,o),
(339,404,cs),
(436,404,o),
(505,338,o),
(505,238,cs),
(505,139,o),
(436,70,o),
(339,70,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 6 0 1 76 0 3 4 0 4 3 0 128 0 0 0 6 5 0 6 105 0 4 4 2 97 0 2 2 46 77 7 1 5 5 1 97 0 1 1 47 1 78 34 33 42 40 33 48 34 48 34 19 38 38 35 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 652;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 0;
nodes = (
(312,718,ls),
(417,718,o),
(488,651,o),
(494,542,c),
(540,542,l),
(532,676,o),
(443,760,o),
(311,760,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(480,-15,o),
(586,88,o),
(586,235,cs),
(586,381,o),
(480,479,o),
(341,479,cs),
(224,479,o),
(126,409,o),
(94,292,c),
(103,292,l),
(103,318,o),
(104,344,o),
(104,370,cs),
(104,592,o),
(190,718,o),
(334,718,cs),
(440,718,o),
(513,650,o),
(519,542,c),
(565,542,l),
(557,676,o),
(464,760,o),
(335,760,cs),
(162,760,o),
(56,607,o),
(56,368,cs),
(56,128,o),
(162,-15,o),
(334,-15,cs)
);
},
{
closed = 1;
nodes = (
(212,28,o),
(127,114,o),
(127,237,cs),
(127,357,o),
(211,440,o),
(333,440,cs),
(454,440,o),
(538,359,o),
(538,236,cs),
(538,113,o),
(454,28,o),
(333,28,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 6 0 1 76 0 3 4 0 4 3 0 128 0 0 0 6 5 0 6 105 0 4 4 2 97 0 2 2 46 77 7 1 5 5 1 97 0 1 1 47 1 78 34 33 42 40 33 48 34 48 34 19 38 38 35 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 641;
}
);
note = six;
unicode = 54;
},
{
glyphname = seven;
kernLeft = KO_seven;
kernRight = KO_seven;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(305,0,l),
(508,535,ls),
(520,567,o),
(529,595,o),
(529,633,cs),
(529,707,o),
(485,750,o),
(386,750,cs),
(23,750,l),
(23,599,l),
(355,599,ls),
(358,599,o),
(360,596,o),
(359,593,cs),
(122,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 1 1 76 0 1 1 2 95 0 2 2 38 77 0 0 0 39 0 78 17 19 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 561;
},
{
associatedMasterId = m002;
background = {
guides = (
{
angle = 68.8087;
pos = (507,708);
}
);
shapes = (
{
closed = 1;
nodes = (
(278,0,l),
(250,265,o),
(324,499,o),
(492,684,c),
(492,748,l),
(-3,748,l),
(-3,708,l),
(476,708,l),
(476,721,l),
(294,538,o),
(205,275,o),
(231,0,c)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(261,0,l),
(519,668,l),
(519,750,l),
(22,750,l),
(22,666,l),
(463,666,l),
(432,692,l),
(158,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 1 1 76 0 1 1 2 95 0 2 2 38 77 0 0 0 39 0 78 17 19 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 554;
},
{
associatedMasterId = m002;
background = {
guides = (
{
angle = 68.8087;
pos = (507,708);
}
);
shapes = (
{
closed = 1;
nodes = (
(278,0,l),
(250,265,o),
(324,499,o),
(492,684,c),
(492,748,l),
(-3,748,l),
(-3,708,l),
(476,708,l),
(476,721,l),
(294,538,o),
(205,275,o),
(231,0,c)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(233,0,l),
(507,708,l),
(507,748,l),
(22,748,l),
(22,706,l),
(505,706,l),
(469,733,l),
(184,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 1 1 76 0 1 1 2 95 0 2 2 38 77 0 0 0 39 0 78 17 19 20 3 8 25 
CALL[ ]	/* CallFunction */";
};
width = 546;
}
);
note = seven;
unicode = 55;
},
{
glyphname = eight;
kernLeft = KO_eight;
kernRight = KO_eight;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(509,-16,o),
(619,69,o),
(619,204,cs),
(619,290,o),
(558,372,o),
(462,387,c),
(464,370,l),
(549,388,o),
(609,461,o),
(609,549,cs),
(609,682,o),
(503,765,o),
(333,765,cs),
(163,765,o),
(57,681,o),
(57,548,cs),
(57,464,o),
(111,390,o),
(203,369,c),
(203,388,l),
(107,369,o),
(46,293,o),
(46,205,cs),
(46,69,o),
(157,-16,o),
(334,-16,cs)
);
},
{
closed = 1;
nodes = (
(262,128,o),
(217,165,o),
(217,224,cs),
(217,280,o),
(265,318,o),
(333,318,cs),
(401,318,o),
(450,280,o),
(450,224,cs),
(450,165,o),
(404,128,o),
(333,128,cs)
);
},
{
closed = 1;
nodes = (
(267,447,o),
(222,483,o),
(222,533,cs),
(222,586,o),
(264,619,o),
(333,619,cs),
(402,619,o),
(444,586,o),
(444,533,cs),
(444,483,o),
(399,447,o),
(333,447,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 7 2 3 4 1 76 8 1 4 0 3 2 4 3 105 0 5 5 1 97 0 1 1 46 77 7 1 2 2 0 97 6 1 0 0 47 0 78 45 44 29 28 1 0 53 51 44 59 45 59 37 35 28 43 29 43 15 13 0 27 1 27 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(465,-16,o),
(575,71,o),
(575,199,cs),
(575,279,o),
(532,350,o),
(450,379,c),
(522,408,o),
(565,472,o),
(565,553,cs),
(565,682,o),
(457,765,o),
(290,765,cs),
(119,765,o),
(13,679,o),
(13,551,cs),
(13,474,o),
(52,410,o),
(127,379,c),
(47,349,o),
(2,283,o),
(2,201,cs),
(2,70,o),
(115,-16,o),
(289,-16,cs)
);
},
{
closed = 1;
nodes = (
(219,128,o),
(173,165,o),
(173,222,cs),
(173,281,o),
(221,318,o),
(289,318,cs),
(357,318,o),
(406,281,o),
(406,223,cs),
(406,166,o),
(360,128,o),
(289,128,cs)
);
},
{
closed = 1;
nodes = (
(223,447,o),
(178,482,o),
(178,534,cs),
(178,585,o),
(220,619,o),
(289,619,cs),
(358,619,o),
(400,585,o),
(400,534,cs),
(400,482,o),
(355,447,o),
(289,447,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(475,-15,o),
(583,70,o),
(583,199,cs),
(583,289,o),
(522,371,o),
(418,386,c),
(419,370,l),
(515,389,o),
(573,466,o),
(573,555,cs),
(573,681,o),
(469,765,o),
(326,765,cs),
(181,765,o),
(77,680,o),
(77,555,cs),
(77,469,o),
(130,391,o),
(231,370,c),
(232,387,l),
(128,369,o),
(67,290,o),
(67,199,cs),
(67,70,o),
(175,-15,o),
(326,-15,cs)
);
},
{
closed = 1;
nodes = (
(235,69,o),
(166,124,o),
(166,210,cs),
(166,288,o),
(228,343,o),
(326,343,cs),
(421,343,o),
(485,289,o),
(485,210,cs),
(485,124,o),
(416,69,o),
(326,69,cs)
);
},
{
closed = 1;
nodes = (
(234,417,o),
(172,469,o),
(172,545,cs),
(172,627,o),
(239,679,o),
(326,679,cs),
(412,679,o),
(479,627,o),
(479,545,cs),
(479,469,o),
(417,417,o),
(326,417,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 7 2 3 4 1 76 8 1 4 0 3 2 4 3 105 0 5 5 1 97 0 1 1 46 77 7 1 2 2 0 97 6 1 0 0 47 0 78 45 44 29 28 1 0 53 51 44 59 45 59 37 35 28 43 29 43 15 13 0 27 1 27 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 649;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(462,-16,o),
(572,71,o),
(572,199,cs),
(572,279,o),
(529,350,o),
(447,379,c),
(519,408,o),
(562,472,o),
(562,553,cs),
(562,682,o),
(454,765,o),
(287,765,cs),
(116,765,o),
(10,679,o),
(10,551,cs),
(10,474,o),
(49,410,o),
(124,379,c),
(44,349,o),
(-1,283,o),
(-1,201,cs),
(-1,70,o),
(112,-16,o),
(286,-16,cs)
);
},
{
closed = 1;
nodes = (
(216,128,o),
(170,165,o),
(170,222,cs),
(170,281,o),
(218,318,o),
(286,318,cs),
(354,318,o),
(403,281,o),
(403,223,cs),
(403,166,o),
(357,128,o),
(286,128,cs)
);
},
{
closed = 1;
nodes = (
(220,447,o),
(175,482,o),
(175,534,cs),
(175,585,o),
(217,619,o),
(286,619,cs),
(355,619,o),
(397,585,o),
(397,534,cs),
(397,482,o),
(352,447,o),
(286,447,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(443,-11,o),
(549,74,o),
(549,198,cs),
(549,291,o),
(488,371,o),
(377,386,c),
(378,370,l),
(484,390,o),
(540,468,o),
(540,557,cs),
(540,677,o),
(438,760,o),
(311,760,cs),
(184,760,o),
(82,677,o),
(82,557,cs),
(82,468,o),
(138,390,o),
(243,370,c),
(244,387,l),
(132,369,o),
(72,289,o),
(72,197,cs),
(72,74,o),
(178,-11,o),
(311,-11,cs)
);
},
{
closed = 1;
nodes = (
(206,32,o),
(121,99,o),
(121,202,cs),
(121,298,o),
(194,362,o),
(311,362,cs),
(428,362,o),
(501,298,o),
(501,202,cs),
(501,99,o),
(416,32,o),
(311,32,cs)
);
},
{
closed = 1;
nodes = (
(201,397,o),
(128,458,o),
(128,552,cs),
(128,652,o),
(211,717,o),
(311,717,cs),
(411,717,o),
(494,652,o),
(494,552,cs),
(494,458,o),
(421,397,o),
(311,397,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
21 7 2 3 4 1 76 8 1 4 0 3 2 4 3 105 0 5 5 1 97 0 1 1 46 77 7 1 2 2 0 97 6 1 0 0 47 0 78 45 44 29 28 1 0 53 51 44 59 45 59 37 35 28 43 29 43 15 13 0 27 1 27 9 8 22 
CALL[ ]	/* CallFunction */";
};
width = 620;
}
);
note = eight;
unicode = 56;
userData = {
KernOnName = eight;
};
},
{
glyphname = nine;
kernLeft = KO_nine;
kernRight = KO_nine;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
angle = 180;
pos = (651,750);
ref = six;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 0 6 1 76 0 3 0 4 0 3 4 128 0 6 0 0 3 6 0 105 7 1 5 5 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 34 33 42 40 33 48 34 48 34 19 38 38 35 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 651;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(371,-12,o),
(462,59,o),
(510,185,cs),
(534,248,o),
(546,322,o),
(545,407,cs),
(541,627,o),
(430,760,o),
(251,760,cs),
(103,760,o),
(3,659,o),
(3,510,cs),
(3,370,o),
(104,273,o),
(231,273,cs),
(291,273,o),
(354,307,o),
(372,332,cs),
(386,352,l),
(386,331,o),
(383,301,o),
(379,275,cs),
(364,190,o),
(320,134,o),
(245,134,cs),
(192,134,o),
(160,166,o),
(148,206,c),
(-13,206,l),
(7,74,o),
(109,-12,o),
(248,-12,cs)
);
},
{
closed = 1;
nodes = (
(206,402,o),
(166,445,o),
(166,510,cs),
(166,570,o),
(206,614,o),
(263,614,cs),
(324,614,o),
(365,571,o),
(365,505,cs),
(365,444,o),
(323,402,o),
(266,402,cs)
);
}
);
};
layerId = m003;
shapes = (
{
angle = 180;
pos = (651,750);
ref = six;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 0 6 1 76 0 3 0 4 0 3 4 128 0 6 0 0 3 6 0 105 7 1 5 5 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 34 33 42 40 33 48 34 48 34 19 38 38 35 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 651;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(366,-12,o),
(457,59,o),
(505,185,cs),
(529,248,o),
(541,322,o),
(540,407,cs),
(536,627,o),
(425,760,o),
(246,760,cs),
(98,760,o),
(-2,659,o),
(-2,510,cs),
(-2,370,o),
(99,273,o),
(226,273,cs),
(286,273,o),
(349,307,o),
(367,332,cs),
(381,352,l),
(381,331,o),
(378,301,o),
(374,275,cs),
(359,190,o),
(315,134,o),
(240,134,cs),
(187,134,o),
(155,166,o),
(143,206,c),
(-18,206,l),
(2,74,o),
(104,-12,o),
(243,-12,cs)
);
},
{
closed = 1;
nodes = (
(201,402,o),
(161,445,o),
(161,510,cs),
(161,570,o),
(201,614,o),
(258,614,cs),
(319,614,o),
(360,571,o),
(360,505,cs),
(360,444,o),
(318,402,o),
(261,402,cs)
);
}
);
};
layerId = m004;
shapes = (
{
angle = 180;
pos = (651,750);
ref = six;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
0 1 0 6 1 76 0 3 0 4 0 3 4 128 0 6 0 0 3 6 0 105 7 1 5 5 1 97 0 1 1 46 77 0 4 4 2 97 0 2 2 47 2 78 34 33 42 40 33 48 34 48 34 19 38 38 35 8 8 27 
CALL[ ]	/* CallFunction */";
};
width = 651;
}
);
note = nine;
unicode = 57;
},
{
glyphname = period;
kernLeft = KO_period;
kernRight = KO_period;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
anchors = (
{
name = "#entry";
},
{
name = "#exit";
pos = (252,0);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(196,-15,o),
(238,25,o),
(238,83,cs),
(238,139,o),
(196,180,o),
(137,180,cs),
(78,180,o),
(35,139,o),
(35,83,cs),
(35,25,o),
(78,-15,o),
(137,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 39 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(141,-12,o),
(181,27,o),
(181,82,cs),
(181,137,o),
(140,176,o),
(84,176,cs),
(29,176,o),
(-12,137,o),
(-12,82,cs),
(-12,27,o),
(28,-12,o),
(84,-12,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(160,-15,o),
(186,10,o),
(186,46,cs),
(186,82,o),
(160,108,o),
(122,108,cs),
(85,108,o),
(58,83,o),
(58,46,cs),
(58,10,o),
(85,-15,o),
(122,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 39 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 244;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(141,-12,o),
(181,27,o),
(181,82,cs),
(181,137,o),
(140,176,o),
(84,176,cs),
(29,176,o),
(-12,137,o),
(-12,82,cs),
(-12,27,o),
(28,-12,o),
(84,-12,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(134,-15,o),
(150,1,o),
(150,24,cs),
(150,47,o),
(134,63,o),
(110,63,cs),
(86,63,o),
(69,48,o),
(69,24,cs),
(69,1,o),
(85,-15,o),
(110,-15,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 39 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 219;
}
);
note = period;
unicode = 46;
userData = {
KernOnName = period;
KernOnSpecialSpacing = {
L = period;
R = period;
};
};
},
{
glyphname = comma;
kernLeft = KO_comma;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(144,-144,l),
(200,-63,o),
(235,19,o),
(235,68,cs),
(235,137,o),
(195,180,o),
(132,180,cs),
(72,180,o),
(31,140,o),
(31,82,cs),
(31,20,o),
(75,-15,o),
(153,-15,c),
(132,28,l),
(113,-27,o),
(83,-85,o),
(40,-144,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 1 0 0 1 0 99 5 1 3 3 2 95 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 276;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(104,-144,l),
(166,-54,o),
(195,14,o),
(195,69,cs),
(195,134,o),
(154,176,o),
(97,176,cs),
(43,176,o),
(2,137,o),
(2,82,cs),
(2,18,o),
(55,-23,o),
(126,-10,c),
(112,28,l),
(20,-144,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(115,-126,l),
(170,-51,o),
(194,3,o),
(194,37,cs),
(194,80,o),
(168,108,o),
(129,108,cs),
(92,108,o),
(65,83,o),
(65,46,cs),
(65,7,o),
(94,-15,o),
(142,-15,c),
(129,25,l),
(114,-29,o),
(91,-69,o),
(54,-126,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 1 0 0 1 0 99 5 1 3 3 2 95 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 252;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(104,-144,l),
(166,-54,o),
(195,14,o),
(195,69,cs),
(195,134,o),
(154,176,o),
(97,176,cs),
(43,176,o),
(2,137,o),
(2,82,cs),
(2,18,o),
(55,-23,o),
(126,-10,c),
(112,28,l),
(20,-144,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(89,-115,l),
(139,-49,o),
(160,-10,o),
(160,19,cs),
(160,46,o),
(143,63,o),
(119,63,cs),
(94,63,o),
(77,48,o),
(77,24,cs),
(77,-1,o),
(95,-15,o),
(127,-15,c),
(118,23,l),
(105,-30,o),
(88,-59,o),
(54,-115,c)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
4 1 1 0 0 1 0 99 5 1 3 3 2 95 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 227;
}
);
note = comma;
unicode = 44;
userData = {
KernOnName = comma;
KernOnSpecialSpacing = {
L = period;
R = period;
};
};
},
{
glyphname = colon;
kernLeft = KO_colon;
kernRight = KO_colon;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(212,390,o),
(254,430,o),
(254,488,cs),
(254,544,o),
(212,585,o),
(153,585,cs),
(94,585,o),
(51,544,o),
(51,488,cs),
(51,430,o),
(94,390,o),
(153,390,cs)
);
},
{
closed = 1;
nodes = (
(212,-15,o),
(254,25,o),
(254,83,cs),
(254,139,o),
(212,180,o),
(153,180,cs),
(94,180,o),
(51,139,o),
(51,83,cs),
(51,25,o),
(94,-15,o),
(153,-15,cs)
);
}
);
width = 305;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(196,390,o),
(238,430,o),
(238,488,cs),
(238,544,o),
(196,585,o),
(137,585,cs),
(78,585,o),
(35,544,o),
(35,488,cs),
(35,430,o),
(78,390,o),
(137,390,cs)
);
},
{
closed = 1;
nodes = (
(196,-15,o),
(238,25,o),
(238,83,cs),
(238,139,o),
(196,180,o),
(137,180,cs),
(78,180,o),
(35,139,o),
(35,83,cs),
(35,25,o),
(78,-15,o),
(137,-15,cs)
);
}
);
width = 284;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(196,390,o),
(238,430,o),
(238,488,cs),
(238,544,o),
(196,585,o),
(137,585,cs),
(78,585,o),
(35,544,o),
(35,488,cs),
(35,430,o),
(78,390,o),
(137,390,cs)
);
},
{
closed = 1;
nodes = (
(196,-15,o),
(238,25,o),
(238,83,cs),
(238,139,o),
(196,180,o),
(137,180,cs),
(78,180,o),
(35,139,o),
(35,83,cs),
(35,25,o),
(78,-15,o),
(137,-15,cs)
);
}
);
width = 283;
}
);
note = colon;
unicode = 58;
userData = {
KernOnName = colon;
KernOnSpecialSpacing = {
L = "spaced-off";
R = "spaced-off";
};
};
},
{
glyphname = semicolon;
kernLeft = KO_semicolon;
lastChange = "2025-03-02 12:28:09 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (8,0);
ref = comma;
},
{
closed = 1;
nodes = (
(207,390,o),
(249,430,o),
(249,488,cs),
(249,544,o),
(207,585,o),
(148,585,cs),
(89,585,o),
(46,544,o),
(46,488,cs),
(46,430,o),
(89,390,o),
(148,390,cs)
);
}
);
width = 294;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
pos = (8,0);
ref = comma;
},
{
closed = 1;
nodes = (
(207,390,o),
(249,430,o),
(249,488,cs),
(249,544,o),
(207,585,o),
(148,585,cs),
(89,585,o),
(46,544,o),
(46,488,cs),
(46,430,o),
(89,390,o),
(148,390,cs)
);
}
);
width = 304;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
pos = (8,0);
ref = comma;
},
{
closed = 1;
nodes = (
(207,390,o),
(249,430,o),
(249,488,cs),
(249,544,o),
(207,585,o),
(148,585,cs),
(89,585,o),
(46,544,o),
(46,488,cs),
(46,430,o),
(89,390,o),
(148,390,cs)
);
}
);
width = 304;
}
);
note = semicolon;
unicode = 59;
userData = {
KernOnSpecialSpacing = {
L = "spaced-off";
R = "spaced-off";
};
};
},
{
glyphname = ellipsis;
kernLeft = KO_ellipsis;
kernRight = KO_ellipsis;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
background = {
anchors = (
{
name = "#entry";
},
{
name = "#exit";
pos = (722,0);
}
);
shapes = (
{
closed = 1;
nodes = (
(196,-15,o),
(238,25,o),
(238,83,cs),
(238,139,o),
(196,180,o),
(137,180,cs),
(78,180,o),
(35,139,o),
(35,83,cs),
(35,25,o),
(78,-15,o),
(137,-15,cs)
);
},
{
closed = 1;
nodes = (
(429,-15,o),
(471,25,o),
(471,83,cs),
(471,139,o),
(429,180,o),
(370,180,cs),
(311,180,o),
(268,139,o),
(268,83,cs),
(268,25,o),
(311,-15,o),
(370,-15,cs)
);
},
{
closed = 1;
nodes = (
(666,-15,o),
(708,25,o),
(708,83,cs),
(708,139,o),
(666,180,o),
(607,180,cs),
(548,180,o),
(505,139,o),
(505,83,cs),
(505,25,o),
(548,-15,o),
(607,-15,cs)
);
}
);
};
layerId = m002;
shapes = (
{
alignment = 1;
pos = (20,0);
ref = period;
},
{
alignment = 1;
pos = (272,0);
ref = period;
},
{
alignment = 1;
pos = (524,0);
ref = period;
}
);
width = 817;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
pos = (-30,0);
ref = period;
},
{
pos = (222,0);
ref = period;
},
{
pos = (474,0);
ref = period;
}
);
width = 701;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
ref = period;
},
{
pos = (252,0);
ref = period;
},
{
pos = (504,0);
ref = period;
}
);
width = 750;
}
);
metricLeft = "=+20";
metricRight = "=+20";
note = ellipsis;
unicode = 8230;
userData = {
KernOnName = ellipsis;
};
},
{
glyphname = exclam;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(221,-7,o),
(259,30,o),
(259,82,cs),
(259,132,o),
(221,170,o),
(168,170,cs),
(115,170,o),
(76,132,o),
(76,82,cs),
(76,30,o),
(115,-7,o),
(168,-7,cs)
);
},
{
closed = 1;
nodes = (
(228,250,l),
(248,750,l),
(86,750,l),
(106,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(199,251,l),
(249,749,l),
(48,749,l),
(98,251,l)
);
},
{
closed = 1;
nodes = (
(202,-8,o),
(240,30,o),
(240,82,cs),
(240,134,o),
(201,172,o),
(148,172,cs),
(96,172,o),
(57,134,o),
(57,82,cs),
(57,30,o),
(95,-8,o),
(148,-8,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(207,-7,o),
(230,18,o),
(230,49,cs),
(230,80,o),
(207,105,o),
(173,105,cs),
(140,105,o),
(115,81,o),
(115,49,cs),
(115,17,o),
(140,-7,o),
(173,-7,cs)
);
},
{
closed = 1;
nodes = (
(206,250,l),
(220,750,l),
(124,750,l),
(138,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 346;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(199,251,l),
(249,749,l),
(48,749,l),
(98,251,l)
);
},
{
closed = 1;
nodes = (
(202,-8,o),
(240,30,o),
(240,82,cs),
(240,134,o),
(201,172,o),
(148,172,cs),
(96,172,o),
(57,134,o),
(57,82,cs),
(57,30,o),
(95,-8,o),
(148,-8,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(195,-7,o),
(209,9,o),
(209,29,cs),
(209,49,o),
(195,65,o),
(173,65,cs),
(152,65,o),
(136,50,o),
(136,29,cs),
(136,8,o),
(152,-7,o),
(173,-7,cs)
);
},
{
closed = 1;
nodes = (
(189,250,l),
(199,750,l),
(145,750,l),
(155,250,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 39 2 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 346;
}
);
note = exclam;
unicode = 33;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = exclamdown;
kernRight = KO_exclamdown;
lastChange = "2025-03-02 12:28:20 +0000";
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(115,585,o),
(76,548,o),
(76,496,cs),
(76,446,o),
(115,408,o),
(168,408,cs),
(221,408,o),
(259,446,o),
(259,496,cs),
(259,548,o),
(221,585,o),
(168,585,cs)
);
},
{
closed = 1;
nodes = (
(86,-172,l),
(248,-172,l),
(228,328,l),
(106,328,l)
);
}
);
};
layerId = m002;
shapes = (
{
alignment = 1;
angle = 180;
pos = (336,570);
ref = exclam;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
5 1 3 3 2 95 0 2 2 41 77 0 0 0 1 95 4 1 1 1 43 1 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(249,-170,l),
(199,328,l),
(98,328,l),
(48,-170,l)
);
},
{
closed = 1;
nodes = (
(233,415,l),
(233,579,l),
(63,579,l),
(63,415,l)
);
}
);
};
layerId = m003;
shapes = (
{
pos = (0,585);
ref = exclam;
scale = (1,-1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
5 1 3 3 2 95 0 2 2 41 77 0 0 0 1 95 4 1 1 1 43 1 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 346;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(249,-170,l),
(199,328,l),
(98,328,l),
(48,-170,l)
);
},
{
closed = 1;
nodes = (
(233,415,l),
(233,579,l),
(63,579,l),
(63,415,l)
);
}
);
};
layerId = m004;
shapes = (
{
pos = (0,585);
ref = exclam;
scale = (1,-1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
5 1 3 3 2 95 0 2 2 41 77 0 0 0 1 95 4 1 1 1 43 1 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 346;
}
);
note = exclamdown;
unicode = 161;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = "spaced-off";
};
};
},
{
glyphname = question;
kernLeft = KO_question;
kernRight = KO_question;
lastChange = "2025-03-02 12:41:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(321,250,l),
(321,330,o),
(362,372,o),
(406,411,cs),
(456,455,o),
(510,495,o),
(510,582,cs),
(510,694,o),
(419,765,o),
(283,765,cs),
(136,765,o),
(44,682,o),
(44,550,c),
(186,550,l),
(186,614,o),
(221,650,o),
(284,650,cs),
(336,650,o),
(370,626,o),
(370,582,cs),
(370,530,o),
(322,498,o),
(276,453,cs),
(230,409,o),
(186,351,o),
(186,250,c)
);
},
{
closed = 1;
nodes = (
(307,-7,o),
(345,30,o),
(345,82,cs),
(345,132,o),
(307,170,o),
(254,170,cs),
(201,170,o),
(162,132,o),
(162,82,cs),
(162,30,o),
(201,-7,o),
(254,-7,cs)
);
}
);
width = 547;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(343,223,o),
(440,288,o),
(454,380,c),
(315,399,l),
(302,358,o),
(268,331,o),
(225,331,cs),
(188,331,o),
(163,347,o),
(163,372,cs),
(163,406,o),
(199,414,o),
(261,426,cs),
(342,439,o),
(390,452,o),
(430,497,cs),
(449,520,o),
(459,551,o),
(459,592,cs),
(459,688,o),
(374,760,o),
(246,760,cs),
(122,760,o),
(25,692,o),
(11,591,c),
(147,576,l),
(159,623,o),
(201,651,o),
(252,651,cs),
(292,651,o),
(318,634,o),
(318,607,cs),
(318,579,o),
(297,564,o),
(269,556,cs),
(254,552,o),
(235,548,o),
(210,543,cs),
(133,530,o),
(87,520,o),
(51,477,cs),
(32,455,o),
(23,425,o),
(23,386,cs),
(23,292,o),
(106,223,o),
(231,223,cs)
);
},
{
closed = 1;
nodes = (
(294,-8,o),
(332,30,o),
(332,82,cs),
(332,134,o),
(293,172,o),
(240,172,cs),
(188,172,o),
(149,134,o),
(149,82,cs),
(149,30,o),
(187,-8,o),
(240,-8,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(299,250,l),
(299,314,o),
(331,361,o),
(393,410,cs),
(460,463,o),
(505,510,o),
(505,585,cs),
(505,692,o),
(417,765,o),
(290,765,cs),
(154,765,o),
(62,679,o),
(62,550,c),
(145,550,l),
(145,638,o),
(203,696,o),
(290,696,cs),
(368,696,o),
(423,651,o),
(423,585,cs),
(423,536,o),
(393,500,o),
(328,447,cs),
(263,394,o),
(219,338,o),
(219,250,c)
);
},
{
closed = 1;
nodes = (
(295,-7,o),
(319,18,o),
(319,50,cs),
(319,83,o),
(294,107,o),
(260,107,cs),
(226,107,o),
(201,82,o),
(201,50,cs),
(201,17,o),
(227,-7,o),
(260,-7,cs)
);
}
);
width = 559;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(333,223,o),
(430,288,o),
(444,380,c),
(305,399,l),
(292,358,o),
(258,331,o),
(215,331,cs),
(178,331,o),
(153,347,o),
(153,372,cs),
(153,406,o),
(189,414,o),
(251,426,cs),
(332,439,o),
(380,452,o),
(420,497,cs),
(439,520,o),
(449,551,o),
(449,592,cs),
(449,688,o),
(364,760,o),
(236,760,cs),
(112,760,o),
(15,692,o),
(1,591,c),
(137,576,l),
(149,623,o),
(191,651,o),
(242,651,cs),
(282,651,o),
(308,634,o),
(308,607,cs),
(308,579,o),
(287,564,o),
(259,556,cs),
(244,552,o),
(225,548,o),
(200,543,cs),
(123,530,o),
(77,520,o),
(41,477,cs),
(22,455,o),
(13,425,o),
(13,386,cs),
(13,292,o),
(96,223,o),
(221,223,cs)
);
},
{
closed = 1;
nodes = (
(284,-8,o),
(322,30,o),
(322,82,cs),
(322,134,o),
(283,172,o),
(230,172,cs),
(178,172,o),
(139,134,o),
(139,82,cs),
(139,30,o),
(177,-8,o),
(230,-8,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(277,250,l),
(277,310,o),
(309,359,o),
(382,414,cs),
(459,472,o),
(493,522,o),
(493,587,cs),
(493,691,o),
(407,765,o),
(286,765,cs),
(156,765,o),
(66,677,o),
(66,550,c),
(108,550,l),
(108,655,o),
(180,727,o),
(286,727,cs),
(382,727,o),
(451,668,o),
(451,587,cs),
(451,534,o),
(422,493,o),
(346,435,cs),
(270,377,o),
(234,322,o),
(234,250,c)
);
},
{
closed = 1;
nodes = (
(278,-7,o),
(293,8,o),
(293,29,cs),
(293,50,o),
(278,65,o),
(256,65,cs),
(235,65,o),
(219,50,o),
(219,29,cs),
(219,8,o),
(235,-7,o),
(256,-7,cs)
);
}
);
width = 552;
}
);
metricLeft = "=|S";
metricRight = "=|S";
note = question;
unicode = 63;
userData = {
KernOnSpecialSpacing = {
L = "spaced-off";
};
};
},
{
glyphname = questiondown;
kernRight = KO_questiondown;
lastChange = "2025-03-02 12:28:20 +0000";
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(226,328,l),
(226,248,o),
(185,206,o),
(141,167,cs),
(91,123,o),
(37,83,o),
(37,-4,cs),
(37,-116,o),
(128,-187,o),
(264,-187,cs),
(411,-187,o),
(503,-104,o),
(503,28,c),
(361,28,l),
(361,-36,o),
(326,-72,o),
(263,-72,cs),
(211,-72,o),
(177,-48,o),
(177,-4,cs),
(177,48,o),
(225,80,o),
(271,125,cs),
(317,169,o),
(361,227,o),
(361,328,c)
);
},
{
closed = 1;
nodes = (
(240,585,o),
(202,548,o),
(202,496,cs),
(202,446,o),
(240,408,o),
(293,408,cs),
(346,408,o),
(385,446,o),
(385,496,cs),
(385,548,o),
(346,585,o),
(293,585,cs)
);
}
);
};
layerId = m002;
shapes = (
{
alignment = 1;
angle = 180;
pos = (547,570);
ref = question;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
42 41 19 18 4 1 3 1 76 6 1 0 0 3 1 0 3 105 7 1 5 5 4 95 0 4 4 41 77 0 1 1 2 97 0 2 2 43 2 78 46 46 1 0 46 49 46 49 48 47 39 37 24 22 16 14 0 45 1 45 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 547;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(391,-181,o),
(488,-113,o),
(502,-12,c),
(366,3,l),
(354,-44,o),
(312,-72,o),
(261,-72,cs),
(221,-72,o),
(195,-55,o),
(195,-28,cs),
(195,0,o),
(216,15,o),
(245,23,cs),
(259,27,o),
(278,31,o),
(303,36,cs),
(380,49,o),
(426,59,o),
(463,103,cs),
(481,124,o),
(490,154,o),
(490,193,cs),
(490,287,o),
(407,356,o),
(282,356,cs),
(170,356,o),
(73,291,o),
(59,199,c),
(198,180,l),
(211,221,o),
(245,248,o),
(288,248,cs),
(325,248,o),
(350,232,o),
(350,207,cs),
(350,173,o),
(314,165,o),
(252,153,cs),
(171,140,o),
(123,127,o),
(84,82,cs),
(64,59,o),
(54,28,o),
(54,-13,cs),
(54,-109,o),
(139,-181,o),
(267,-181,cs)
);
},
{
closed = 1;
nodes = (
(357,415,l),
(357,579,l),
(187,579,l),
(187,415,l)
);
}
);
};
layerId = m003;
shapes = (
{
angle = 180;
pos = (559,583);
ref = question;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
42 41 19 18 4 1 3 1 76 6 1 0 0 3 1 0 3 105 7 1 5 5 4 95 0 4 4 41 77 0 1 1 2 97 0 2 2 43 2 78 46 46 1 0 46 49 46 49 48 47 39 37 24 22 16 14 0 45 1 45 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 559;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(384,-181,o),
(481,-113,o),
(495,-12,c),
(359,3,l),
(347,-44,o),
(305,-72,o),
(254,-72,cs),
(214,-72,o),
(188,-55,o),
(188,-28,cs),
(188,0,o),
(209,15,o),
(238,23,cs),
(252,27,o),
(271,31,o),
(296,36,cs),
(373,49,o),
(419,59,o),
(456,103,cs),
(474,124,o),
(483,154,o),
(483,193,cs),
(483,287,o),
(400,356,o),
(275,356,cs),
(163,356,o),
(66,291,o),
(52,199,c),
(191,180,l),
(204,221,o),
(238,248,o),
(281,248,cs),
(318,248,o),
(343,232,o),
(343,207,cs),
(343,173,o),
(307,165,o),
(245,153,cs),
(164,140,o),
(116,127,o),
(77,82,cs),
(57,59,o),
(47,28,o),
(47,-13,cs),
(47,-109,o),
(132,-181,o),
(260,-181,cs)
);
},
{
closed = 1;
nodes = (
(350,415,l),
(350,579,l),
(180,579,l),
(180,415,l)
);
}
);
};
layerId = m004;
shapes = (
{
angle = 180;
pos = (552,583);
ref = question;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
42 41 19 18 4 1 3 1 76 6 1 0 0 3 1 0 3 105 7 1 5 5 4 95 0 4 4 41 77 0 1 1 2 97 0 2 2 43 2 78 46 46 1 0 46 49 46 49 48 47 39 37 24 22 16 14 0 45 1 45 8 8 22 
CALL[ ]	/* CallFunction */";
};
width = 552;
}
);
metricLeft = S;
metricRight = S;
note = questiondown;
unicode = 191;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = "spaced-off";
};
};
},
{
glyphname = periodcentered;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(186,224,o),
(222,259,o),
(222,306,cs),
(222,353,o),
(186,388,o),
(137,388,cs),
(88,388,o),
(51,353,o),
(51,306,cs),
(51,259,o),
(88,224,o),
(137,224,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 273;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(181,240,o),
(210,269,o),
(210,306,cs),
(210,343,o),
(181,372,o),
(142,372,cs),
(102,372,o),
(73,342,o),
(73,306,cs),
(73,270,o),
(102,240,o),
(142,240,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 283;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(175,251,o),
(199,275,o),
(199,306,cs),
(199,337,o),
(175,362,o),
(142,362,cs),
(108,362,o),
(84,337,o),
(84,306,cs),
(84,275,o),
(109,251,o),
(142,251,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 283;
}
);
note = periodcentered;
unicode = 183;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = bullet;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(413,124,o),
(500,212,o),
(500,329,cs),
(500,445,o),
(413,532,o),
(296,532,cs),
(179,532,o),
(91,445,o),
(91,329,cs),
(91,212,o),
(179,124,o),
(296,124,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 9 7 0 15 1 15 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 590;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(378,193,o),
(436,251,o),
(436,328,cs),
(436,406,o),
(378,463,o),
(300,463,cs),
(224,463,o),
(165,405,o),
(165,328,cs),
(165,251,o),
(224,193,o),
(300,193,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 9 7 0 15 1 15 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 600;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(354,235,o),
(393,275,o),
(393,328,cs),
(393,381,o),
(354,421,o),
(301,421,cs),
(248,421,o),
(208,381,o),
(208,328,cs),
(208,275,o),
(248,235,o),
(301,235,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
0 1 0 0 1 89 0 1 1 0 97 2 1 0 1 0 81 1 0 9 7 0 15 1 15 3 8 22 
CALL[ ]	/* CallFunction */";
};
width = 600;
}
);
note = bullet;
unicode = 8226;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = asterisk;
kernLeft = KO_asterisk;
kernRight = KO_asterisk;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(307,424,l),
(384,295,l),
(490,375,l),
(399,490,l),
(538,528,l),
(497,655,l),
(363,600,l),
(373,750,l),
(240,750,l),
(251,601,l),
(115,655,l),
(74,527,l),
(216,490,l),
(122,373,l),
(228,294,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
14 13 12 11 10 9 8 5 4 3 2 1 12 0 73 0 0 0 38 0 78 22 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 612;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(259,467,l),
(332,370,l),
(418,433,l),
(320,564,l),
(305,513,l),
(459,567,l),
(425,667,l),
(272,613,l),
(279,583,l),
(279,748,l),
(240,748,l),
(240,583,l),
(247,613,l),
(94,667,l),
(59,567,l),
(215,513,l),
(199,564,l),
(101,433,l),
(186,369,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(294,494,l),
(381,366,l),
(442,411,l),
(351,533,l),
(490,575,l),
(468,648,l),
(328,599,l),
(332,749,l),
(256,749,l),
(260,599,l),
(121,648,l),
(97,574,l),
(238,533,l),
(146,411,l),
(207,365,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
14 13 12 11 10 9 8 5 4 3 2 1 12 0 73 0 0 0 38 0 78 22 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 587;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(250,467,l),
(323,370,l),
(409,433,l),
(311,564,l),
(296,513,l),
(450,567,l),
(416,667,l),
(263,613,l),
(270,583,l),
(270,748,l),
(231,748,l),
(231,583,l),
(238,613,l),
(85,667,l),
(50,567,l),
(206,513,l),
(190,564,l),
(92,433,l),
(177,369,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(278,537,l),
(371,409,l),
(404,433,l),
(313,559,l),
(453,605,l),
(441,644,l),
(299,598,l),
(299,748,l),
(258,748,l),
(258,598,l),
(116,644,l),
(103,605,l),
(243,559,l),
(152,433,l),
(185,409,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 25 values pushed */
14 13 12 11 10 9 8 5 4 3 2 1 12 0 73 0 0 0 38 0 78 22 1 8 23 
CALL[ ]	/* CallFunction */";
};
width = 557;
}
);
metricLeft = H;
metricRight = H;
note = asterisk;
unicode = 42;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = numbersign;
kernRight = KO_numbersign;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(476,0,l),
(719,748,l),
(578,748,l),
(336,0,l)
);
},
{
closed = 1;
nodes = (
(698,177,l),
(698,302,l),
(44,302,l),
(44,177,l)
);
},
{
closed = 1;
nodes = (
(216,0,l),
(459,748,l),
(318,748,l),
(76,0,l)
);
},
{
closed = 1;
nodes = (
(764,445,l),
(764,570,l),
(110,570,l),
(110,445,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
11 1 7 0 6 0 7 6 103 9 3 8 3 1 1 38 77 0 4 4 5 95 10 1 5 5 41 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
10 1 5 0 4 7 5 4 104 11 1 7 0 6 0 7 6 103 9 3 8 3 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 808;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(467,0,l),
(693,748,l),
(612,748,l),
(386,0,l)
);
},
{
closed = 1;
nodes = (
(696,183,l),
(696,254,l),
(55,254,l),
(55,183,l)
);
},
{
closed = 1;
nodes = (
(204,0,l),
(431,748,l),
(349,748,l),
(123,0,l)
);
},
{
closed = 1;
nodes = (
(762,496,l),
(762,566,l),
(121,566,l),
(121,496,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
11 1 7 0 6 0 7 6 103 9 3 8 3 1 1 38 77 0 4 4 5 95 10 1 5 5 41 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
10 1 5 0 4 7 5 4 104 11 1 7 0 6 0 7 6 103 9 3 8 3 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 817;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(179,0,l),
(397,748,l),
(352,748,l),
(135,0,l)
);
},
{
closed = 1;
nodes = (
(693,187,l),
(693,224,l),
(59,224,l),
(59,187,l)
);
},
{
closed = 1;
nodes = (
(472,0,l),
(688,748,l),
(644,748,l),
(429,0,l)
);
},
{
closed = 1;
nodes = (
(759,527,l),
(759,564,l),
(125,564,l),
(125,527,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
33 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 35 values pushed */
11 1 7 0 6 0 7 6 103 9 3 8 3 1 1 38 77 0 4 4 5 95 10 1 5 5 41 77 2 1 0 0 39 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 33 values pushed */
10 1 5 0 4 7 5 4 104 11 1 7 0 6 0 7 6 103 9 3 8 3 1 1 38 77 2 1 0 0 39 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 818;
}
);
note = numbersign;
unicode = 35;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
};
};
},
{
glyphname = slash;
kernLeft = KO_slash;
kernRight = KO_slash;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(156,0,l),
(399,748,l),
(248,748,l),
(6,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 404;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(138,0,l),
(350,748,l),
(265,748,l),
(55,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 413;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(126,0,l),
(318,748,l),
(275,748,l),
(84,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 16 values pushed */
0 1 1 38 77 0 0 0 39 0 78 17 16 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 414;
}
);
note = slash;
unicode = 47;
userData = {
KernOnName = slash;
KernOnSpecialSpacing = {
L = slash;
R = slash;
};
};
},
{
glyphname = backslash;
kernLeft = KO_backslash;
kernRight = KO_backslash;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (404,0);
ref = slash;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 404;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(353,0,l),
(162,748,l),
(12,748,l),
(202,0,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (404,0);
ref = slash;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 404;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(353,0,l),
(162,748,l),
(12,748,l),
(202,0,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (404,0);
ref = slash;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 38 77 2 1 1 1 39 1 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 404;
}
);
note = backslash;
unicode = 92;
userData = {
KernOnSpecialSpacing = {
L = "spaced-off";
R = "spaced-off";
};
};
},
{
glyphname = hyphen;
kernLeft = KO_hyphen;
kernRight = KO_hyphen;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(382,219,l),
(382,367,l),
(74,367,l),
(74,219,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 456;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(402,253,l),
(402,333,l),
(97,333,l),
(97,253,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 499;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(406,275,l),
(406,312,l),
(103,312,l),
(103,275,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 510;
}
);
metricLeft = H;
metricRight = H;
note = hyphen;
unicode = 45;
userData = {
KernOnName = hyphen;
KernOnSpecialSpacing = {
L = hyphen;
R = hyphen;
};
};
},
{
glyphname = endash;
kernLeft = KO_endash;
kernRight = KO_endash;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(700,224,l),
(700,372,l),
(74,372,l),
(74,224,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(660,258,l),
(660,338,l),
(97,338,l),
(97,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 757;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(627,279,l),
(627,316,l),
(103,316,l),
(103,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 731;
}
);
metricLeft = H;
metricRight = H;
note = endash;
unicode = 8211;
userData = {
KernOnName = endash;
KernOnSpecialSpacing = {
L = dashes;
R = dashes;
};
};
},
{
glyphname = emdash;
kernLeft = KO_endash;
kernRight = KO_endash;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(898,224,l),
(898,372,l),
(74,372,l),
(74,224,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 972;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(942,258,l),
(942,338,l),
(97,338,l),
(97,258,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1039;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(961,279,l),
(961,316,l),
(103,316,l),
(103,279,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 1065;
}
);
metricLeft = H;
metricRight = H;
note = emdash;
unicode = 8212;
userData = {
KernOnName = emdash;
KernOnSpecialSpacing = {
L = dashes;
R = dashes;
};
};
},
{
glyphname = underscore;
kernLeft = KO_underscore;
kernRight = KO_underscore;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(700,-158,l),
(700,-30,l),
(74,-30,l),
(74,-158,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 774;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(660,-93,l),
(660,-22,l),
(97,-22,l),
(97,-93,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 757;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(627,-53,l),
(627,-16,l),
(103,-16,l),
(103,-53,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 731;
}
);
metricLeft = H;
metricRight = H;
note = underscore;
unicode = 95;
userData = {
KernOnSpecialSpacing = {
L = underscore;
R = underscore;
};
};
},
{
glyphname = parenleft;
kernRight = KO_parenleft;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(405,-176,l),
(259,-19,o),
(196,130,o),
(196,317,cs),
(196,505,o),
(259,653,o),
(405,810,c),
(239,810,l),
(116,680,o),
(46,501,o),
(46,317,cs),
(46,133,o),
(116,-46,o),
(239,-176,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 375;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(342,-157,l),
(208,-11,o),
(149,154,o),
(149,322,cs),
(149,494,o),
(209,658,o),
(342,802,c),
(261,814,l),
(133,678,o),
(64,498,o),
(64,322,cs),
(64,143,o),
(135,-36,o),
(261,-170,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 405;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(298,-146,l),
(182,-18,o),
(115,153,o),
(115,325,cs),
(115,499,o),
(182,670,o),
(299,796,c),
(268,816,l),
(141,681,o),
(69,502,o),
(69,325,cs),
(69,148,o),
(141,-31,o),
(268,-166,c)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
6 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 429;
}
);
metricLeft = O;
note = parenleft;
unicode = 40;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = parenthesis;
};
};
},
{
glyphname = parenright;
kernLeft = KO_parenright;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (375,0);
ref = parenleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 7 1 50 
CALL[ ]	/* CallFunction */";
};
width = 375;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(243,-29,o),
(312,144,o),
(312,325,cs),
(312,505,o),
(243,679,o),
(114,816,c),
(10,748,l),
(117,631,o),
(174,480,o),
(174,325,cs),
(174,168,o),
(117,21,o),
(10,-98,c),
(114,-166,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (375,0);
ref = parenleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 7 1 50 
CALL[ ]	/* CallFunction */";
};
width = 375;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(243,-29,o),
(312,144,o),
(312,325,cs),
(312,505,o),
(243,679,o),
(114,816,c),
(10,748,l),
(117,631,o),
(174,480,o),
(174,325,cs),
(174,168,o),
(117,21,o),
(10,-98,c),
(114,-166,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (375,0);
ref = parenleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
13 7 1 50 
CALL[ ]	/* CallFunction */";
};
width = 375;
}
);
note = parenright;
unicode = 41;
userData = {
KernOnName = parenright;
KernOnSpecialSpacing = {
L = parenthesis;
R = NoKerning;
};
};
},
{
glyphname = braceleft;
kernRight = KO_braceleft;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
guides = (
{
pos = (97,-176);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(440,-176,l),
(440,-48,l),
(398,-48,ls),
(355,-48,o),
(333,-23,o),
(333,25,cs),
(333,163,ls),
(333,234,o),
(297,288,o),
(234,311,c),
(297,336,o),
(333,390,o),
(333,460,cs),
(333,598,ls),
(333,645,o),
(355,670,o),
(398,670,cs),
(440,670,l),
(440,799,l),
(360,799,ls),
(254,799,o),
(187,731,o),
(187,622,cs),
(187,475,ls),
(187,421,o),
(146,386,o),
(74,379,c),
(74,244,l),
(146,238,o),
(187,203,o),
(187,147,cs),
(187,1,ls),
(187,-108,o),
(254,-176,o),
(360,-176,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 5 2 1 105 0 4 4 3 97 0 3 3 48 77 0 5 5 0 97 6 1 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 3 0 4 2 3 4 105 0 2 0 1 5 2 1 105 0 5 5 0 97 6 1 0 0 43 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 33 31 19 17 16 14 9 8 7 6 0 34 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 514;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(438,-172,l),
(438,-100,l),
(398,-100,ls),
(316,-100,o),
(269,-54,o),
(269,27,cs),
(269,169,ls),
(269,230,o),
(247,286,o),
(188,315,c),
(238,341,o),
(269,390,o),
(269,461,cs),
(269,603,ls),
(269,684,o),
(316,729,o),
(398,729,cs),
(438,729,l),
(438,802,l),
(384,802,ls),
(262,802,o),
(185,730,o),
(185,614,cs),
(185,472,ls),
(185,403,o),
(153,362,o),
(97,357,c),
(97,274,l),
(156,269,o),
(185,224,o),
(185,159,cs),
(185,16,ls),
(185,-100,o),
(262,-172,o),
(384,-172,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 5 2 1 105 0 4 4 3 97 0 3 3 48 77 0 5 5 0 97 6 1 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 3 0 4 2 3 4 105 0 2 0 1 5 2 1 105 0 5 5 0 97 6 1 0 0 43 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 33 31 19 17 16 14 9 8 7 6 0 34 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 535;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(429,-170,l),
(429,-130,l),
(390,-130,ls),
(284,-130,o),
(223,-72,o),
(223,29,cs),
(223,173,ls),
(223,240,o),
(200,289,o),
(153,317,c),
(198,345,o),
(223,394,o),
(223,461,cs),
(223,605,ls),
(223,706,o),
(284,764,o),
(390,764,cs),
(429,764,l),
(429,804,l),
(390,804,ls),
(259,804,o),
(177,729,o),
(177,609,cs),
(177,470,ls),
(177,393,o),
(151,347,o),
(103,343,c),
(103,292,l),
(151,288,o),
(177,241,o),
(177,165,cs),
(177,26,ls),
(177,-94,o),
(259,-170,o),
(390,-170,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 2 0 1 5 2 1 105 0 4 4 3 97 0 3 3 48 77 0 5 5 0 97 6 1 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
0 3 0 4 2 3 4 105 0 2 0 1 5 2 1 105 0 5 5 0 97 6 1 0 0 43 0 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 33 31 19 17 16 14 9 8 7 6 0 34 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 533;
}
);
metricLeft = H;
metricRight = H;
note = braceleft;
unicode = 123;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = parenthesis;
};
};
},
{
glyphname = braceright;
kernLeft = KO_braceright;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (514,0);
ref = braceleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 2 4 1 2 105 0 5 5 0 97 6 1 0 0 48 77 0 4 4 3 97 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 0 5 1 0 5 105 0 1 0 2 4 1 2 105 0 4 4 3 97 0 3 3 43 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 33 31 19 17 16 14 9 8 7 6 0 34 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 514;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(49,-170,ls),
(185,-170,o),
(262,-100,o),
(262,25,cs),
(262,164,ls),
(262,217,o),
(288,248,o),
(336,251,c),
(336,382,l),
(288,385,o),
(262,417,o),
(262,469,cs),
(262,608,ls),
(262,733,o),
(185,804,o),
(49,804,cs),
(10,804,l),
(10,683,l),
(45,683,ls),
(96,683,o),
(124,654,o),
(124,605,cs),
(124,461,ls),
(124,394,o),
(150,345,o),
(201,317,c),
(150,289,o),
(124,240,o),
(124,173,cs),
(124,29,ls),
(124,-20,o),
(96,-49,o),
(45,-49,cs),
(10,-49,l),
(10,-170,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (514,0);
ref = braceleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 2 4 1 2 105 0 5 5 0 97 6 1 0 0 48 77 0 4 4 3 97 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 0 5 1 0 5 105 0 1 0 2 4 1 2 105 0 4 4 3 97 0 3 3 43 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 33 31 19 17 16 14 9 8 7 6 0 34 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 514;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(49,-170,ls),
(185,-170,o),
(262,-100,o),
(262,25,cs),
(262,164,ls),
(262,217,o),
(288,248,o),
(336,251,c),
(336,382,l),
(288,385,o),
(262,417,o),
(262,469,cs),
(262,608,ls),
(262,733,o),
(185,804,o),
(49,804,cs),
(10,804,l),
(10,683,l),
(45,683,ls),
(96,683,o),
(124,654,o),
(124,605,cs),
(124,461,ls),
(124,394,o),
(150,345,o),
(201,317,c),
(150,289,o),
(124,240,o),
(124,173,cs),
(124,29,ls),
(124,-20,o),
(96,-49,o),
(45,-49,cs),
(10,-49,l),
(10,-170,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (514,0);
ref = braceleft;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
25 1 2 1 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 30 values pushed */
0 1 0 2 4 1 2 105 0 5 5 0 97 6 1 0 0 48 77 0 4 4 3 97 0 3 3 43 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 28 values pushed */
6 1 0 0 5 1 0 5 105 0 1 0 2 4 1 2 105 0 4 4 3 97 0 3 3 43 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 33 31 19 17 16 14 9 8 7 6 0 34 1 34 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 514;
}
);
note = braceright;
unicode = 125;
userData = {
KernOnSpecialSpacing = {
L = parenthesis;
R = NoKerning;
};
};
},
{
glyphname = bracketleft;
kernRight = KO_bracketleft;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
guides = (
{
pos = (54,-176);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(338,-176,l),
(338,-48,l),
(219,-48,l),
(219,676,l),
(338,676,l),
(338,804,l),
(74,804,l),
(74,-176,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 0 8 1 5 2 0 5 103 0 2 2 1 95 7 3 6 3 1 1 43 1 78 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 412;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(377,-173,l),
(377,-98,l),
(182,-98,l),
(182,729,l),
(377,729,l),
(377,804,l),
(97,804,l),
(97,-173,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 0 8 1 5 2 0 5 103 0 2 2 1 95 7 3 6 3 1 1 43 1 78 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 474;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(393,-170,l),
(393,-130,l),
(148,-130,l),
(148,764,l),
(393,764,l),
(393,804,l),
(103,804,l),
(103,-170,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 50 values pushed */
4 1 0 8 1 5 2 0 5 103 0 2 2 1 95 7 3 6 3 1 1 43 1 78 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 497;
}
);
metricLeft = H;
metricRight = H;
note = bracketleft;
unicode = 91;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = parenthesis;
};
};
},
{
glyphname = bracketright;
kernLeft = KO_bracketright;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (412,0);
ref = bracketleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 0 95 0 0 0 43 0 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 412;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(300,-170,l),
(300,804,l),
(10,804,l),
(10,683,l),
(154,683,l),
(154,-49,l),
(10,-49,l),
(10,-170,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (412,0);
ref = bracketleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 0 95 0 0 0 43 0 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 412;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(300,-170,l),
(300,804,l),
(10,804,l),
(10,683,l),
(154,683,l),
(154,-49,l),
(10,-49,l),
(10,-170,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (412,0);
ref = bracketleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
4 1 3 0 2 1 3 2 103 0 1 1 0 95 0 0 0 43 0 78 0 0 0 7 0 7 17 17 17 5 8 25 
CALL[ ]	/* CallFunction */";
};
width = 412;
}
);
note = bracketright;
unicode = 93;
userData = {
KernOnSpecialSpacing = {
L = parenthesis;
R = NoKerning;
};
};
},
{
glyphname = quotesinglbase;
kernRight = KO_quotesinglbase;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = comma;
}
);
width = 286;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
ref = comma;
}
);
width = 296;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
ref = comma;
}
);
width = 296;
}
);
note = quotesinglbase;
unicode = 8218;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = quotedblbase;
kernRight = KO_quotedblbase;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (43,0);
ref = comma;
},
{
pos = (258,0);
ref = comma;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
10 5 8 3 1 4 1 0 1 0 99 11 7 9 3 3 3 2 95 6 1 2 2 39 2 78 12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 567;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
pos = (43,0);
ref = comma;
},
{
pos = (258,0);
ref = comma;
},
{
closed = 1;
nodes = (
(186,-114,l),
(235,-49,o),
(256,-11,o),
(256,18,cs),
(256,44,o),
(240,61,o),
(216,61,cs),
(192,61,o),
(176,46,o),
(176,23,cs),
(176,5,o),
(186,-8,o),
(205,-13,c),
(193,-46,o),
(178,-72,o),
(152,-114,c)
);
},
{
closed = 1;
nodes = (
(301,-114,l),
(350,-49,o),
(371,-11,o),
(371,18,cs),
(371,44,o),
(355,61,o),
(331,61,cs),
(307,61,o),
(291,46,o),
(291,23,cs),
(291,5,o),
(301,-8,o),
(320,-13,c),
(308,-46,o),
(293,-72,o),
(267,-114,c)
);
}
);
};
layerId = m003;
shapes = (
{
pos = (43,0);
ref = comma;
},
{
pos = (216,0);
ref = comma;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
10 5 8 3 1 4 1 0 1 0 99 11 7 9 3 3 3 2 95 6 1 2 2 39 2 78 12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 507;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
pos = (49,0);
ref = comma;
},
{
pos = (264,0);
ref = comma;
},
{
closed = 1;
nodes = (
(192,-114,l),
(241,-49,o),
(262,-11,o),
(262,18,cs),
(262,44,o),
(246,61,o),
(222,61,cs),
(198,61,o),
(182,46,o),
(182,23,cs),
(182,5,o),
(192,-8,o),
(211,-13,c),
(199,-46,o),
(184,-72,o),
(158,-114,c)
);
},
{
closed = 1;
nodes = (
(307,-114,l),
(356,-49,o),
(377,-11,o),
(377,18,cs),
(377,44,o),
(361,61,o),
(337,61,cs),
(313,61,o),
(297,46,o),
(297,23,cs),
(297,5,o),
(307,-8,o),
(326,-13,c),
(314,-46,o),
(299,-72,o),
(273,-114,c)
);
}
);
};
layerId = m004;
shapes = (
{
pos = (49,0);
ref = comma;
},
{
pos = (164,0);
ref = comma;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 60 values pushed */
10 5 8 3 1 4 1 0 1 0 99 11 7 9 3 3 3 2 95 6 1 2 2 39 2 78 12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 428;
}
);
metricLeft = H;
metricRight = H;
note = quotedblbase;
unicode = 8222;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = quotedblleft;
kernLeft = KO_quotedblleft;
kernRight = KO_quotedblleft;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
angle = 180;
pos = (549,1211);
ref = quotedblright;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
10 5 8 3 1 1 0 95 4 1 0 0 38 77 11 7 9 3 3 3 2 95 6 1 2 2 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
6 1 2 11 7 9 3 3 2 3 99 10 5 8 3 1 1 0 95 4 1 0 0 38 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
10 5 8 3 1 1 0 95 4 1 0 0 38 77 11 7 9 3 3 3 2 95 6 1 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
6 1 2 11 7 9 3 3 2 3 99 10 5 8 3 1 1 0 95 4 1 0 0 38 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 549;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(470,439,l),
(470,603,l),
(299,603,l),
(299,439,l)
);
},
{
closed = 1;
nodes = (
(259,439,l),
(259,603,l),
(88,603,l),
(88,439,l)
);
},
{
closed = 1;
nodes = (
(196,603,l),
(225,748,l),
(151,748,l),
(88,603,l)
);
},
{
closed = 1;
nodes = (
(407,603,l),
(436,748,l),
(362,748,l),
(299,603,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = -1;
angle = 180;
pos = (486,1270);
ref = quotedblright;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
10 5 8 3 1 1 0 95 4 1 0 0 38 77 11 7 9 3 3 3 2 95 6 1 2 2 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
6 1 2 11 7 9 3 3 2 3 99 10 5 8 3 1 1 0 95 4 1 0 0 38 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
10 5 8 3 1 1 0 95 4 1 0 0 38 77 11 7 9 3 3 3 2 95 6 1 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
6 1 2 11 7 9 3 3 2 3 99 10 5 8 3 1 1 0 95 4 1 0 0 38 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 486;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(400,439,l),
(400,603,l),
(229,603,l),
(229,439,l)
);
},
{
closed = 1;
nodes = (
(189,439,l),
(189,603,l),
(18,603,l),
(18,439,l)
);
},
{
closed = 1;
nodes = (
(126,603,l),
(155,748,l),
(81,748,l),
(18,603,l)
);
},
{
closed = 1;
nodes = (
(337,603,l),
(366,748,l),
(292,748,l),
(229,603,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = -1;
angle = 180;
pos = (416,1337);
ref = quotedblright;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
10 5 8 3 1 1 0 95 4 1 0 0 38 77 11 7 9 3 3 3 2 95 6 1 2 2 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 26 values pushed */
6 1 2 11 7 9 3 3 2 3 99 10 5 8 3 1 1 0 95 4 1 0 0 38 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 29 values pushed */
10 5 8 3 1 1 0 95 4 1 0 0 38 77 11 7 9 3 3 3 2 95 6 1 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
6 1 2 11 7 9 3 3 2 3 99 10 5 8 3 1 1 0 95 4 1 0 0 38 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 34 values pushed */
12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
metricLeft = H;
metricRight = H;
note = quotedblleft;
unicode = 8220;
userData = {
KernOnName = quotedblleft;
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = quotedblright;
kernLeft = KO_quotedblright;
kernRight = KO_quotedblright;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = -1;
pos = (213,0);
ref = quoteright;
},
{
alignment = -1;
ref = quoteright;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
6 1 2 2 3 95 11 7 9 3 3 3 38 77 4 1 0 0 1 95 10 5 8 3 1 1 41 0 78 12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 549;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(428,584,l),
(428,748,l),
(257,748,l),
(257,584,l)
);
},
{
closed = 1;
nodes = (
(154,439,l),
(217,584,l),
(109,584,l),
(80,439,l)
);
},
{
closed = 1;
nodes = (
(217,584,l),
(217,748,l),
(46,748,l),
(46,584,l)
);
},
{
closed = 1;
nodes = (
(365,439,l),
(428,584,l),
(320,584,l),
(291,439,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = -1;
pos = (163,0);
ref = quoteright;
},
{
alignment = -1;
ref = quoteright;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
6 1 2 2 3 95 11 7 9 3 3 3 38 77 4 1 0 0 1 95 10 5 8 3 1 1 41 0 78 12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 486;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(428,584,l),
(428,748,l),
(257,748,l),
(257,584,l)
);
},
{
closed = 1;
nodes = (
(154,439,l),
(217,584,l),
(109,584,l),
(80,439,l)
);
},
{
closed = 1;
nodes = (
(217,584,l),
(217,748,l),
(46,748,l),
(46,584,l)
);
},
{
closed = 1;
nodes = (
(365,439,l),
(428,584,l),
(320,584,l),
(291,439,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = -1;
pos = (113,0);
ref = quoteright;
},
{
alignment = -1;
ref = quoteright;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 63 values pushed */
6 1 2 2 3 95 11 7 9 3 3 3 38 77 4 1 0 0 1 95 10 5 8 3 1 1 41 0 78 12 12 8 8 4 4 0 0 12 15 12 15 14 13 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 12 8 23 
CALL[ ]	/* CallFunction */";
};
width = 417;
}
);
metricLeft = H;
metricRight = H;
note = quotedblright;
unicode = 8221;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = quoteleft;
kernLeft = KO_quoteleft;
kernRight = KO_quoteleft;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = -1;
angle = 180;
pos = (336,1192);
ref = quoteright;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 38 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 38 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(286,439,l),
(286,603,l),
(115,603,l),
(115,439,l)
);
},
{
closed = 1;
nodes = (
(223,603,l),
(252,748,l),
(178,748,l),
(115,603,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = -1;
angle = 180;
pos = (323,1271);
ref = quoteright;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 38 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 38 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 323;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(266,439,l),
(266,603,l),
(95,603,l),
(95,439,l)
);
},
{
closed = 1;
nodes = (
(203,603,l),
(232,748,l),
(158,748,l),
(95,603,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = -1;
angle = 180;
pos = (303,1337);
ref = quoteright;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
11 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 38 1 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
21 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 1 1 0 95 0 0 0 38 77 5 1 3 3 2 95 0 2 2 41 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 20 values pushed */
0 2 5 1 3 2 3 99 4 1 1 1 0 95 0 0 0 38 1 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 18 values pushed */
4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
metricLeft = H;
metricRight = H;
note = quoteleft;
unicode = 8216;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = quoteright;
kernLeft = KO_quoteright;
kernRight = KO_quoteright;
lastChange = "2025-03-16 14:26:48 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (45,594);
ref = comma;
scale = (0.9216,0.9216);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 3 95 5 1 3 3 38 77 0 0 0 1 95 4 1 1 1 41 0 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 336;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(148,444,l),
(207,529,o),
(234,594,o),
(234,646,cs),
(234,708,o),
(195,748,o),
(141,748,cs),
(90,748,o),
(51,711,o),
(51,659,cs),
(51,608,o),
(85,573,o),
(135,569,c),
(68,444,l)
);
}
);
};
layerId = m003;
shapes = (
{
pos = (47,641);
ref = comma;
scale = (0.9216,0.9216);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 3 95 5 1 3 3 38 77 0 0 0 1 95 4 1 1 1 41 0 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 323;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(142,444,l),
(201,529,o),
(228,594,o),
(228,646,cs),
(228,708,o),
(189,748,o),
(135,748,cs),
(84,748,o),
(45,711,o),
(45,659,cs),
(45,608,o),
(79,573,o),
(129,569,c),
(62,444,l)
);
}
);
};
layerId = m004;
shapes = (
{
pos = (53,693);
ref = comma;
scale = (0.9216,0.9216);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 41 values pushed */
0 2 2 3 95 5 1 3 3 38 77 0 0 0 1 95 4 1 1 1 41 0 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 304;
}
);
metricLeft = H;
metricRight = H;
note = quoteright;
unicode = 8217;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = guilsinglleft;
kernRight = KO_guillemotleft;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (456,0);
ref = guilsinglright;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 456;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
alignment = 1;
pos = (456,0);
ref = guilsinglright;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 456;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
alignment = 1;
pos = (456,0);
ref = guilsinglright;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 27 values pushed */
3 1 0 1 1 76 0 1 0 0 1 87 0 1 1 0 95 0 0 1 0 79 18 17 2 8 24 
CALL[ ]	/* CallFunction */";
};
width = 456;
}
);
note = guilsinglleft;
unicode = 8249;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = quotes;
};
};
},
{
glyphname = guilsinglright;
kernLeft = KO_guillemotright;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(220,46,l),
(382,298,l),
(220,553,l),
(74,553,l),
(225,299,l),
(74,46,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 456;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(172,46,l),
(334,298,l),
(172,553,l),
(97,553,l),
(248,299,l),
(97,46,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 431;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(134,46,l),
(296,298,l),
(134,553,l),
(103,553,l),
(254,299,l),
(103,46,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 34 values pushed */
4 1 2 1 0 1 76 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 0 0 0 5 0 5 18 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 400;
}
);
metricLeft = H;
metricRight = H;
note = guilsinglright;
unicode = 8250;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = NoKerning;
};
};
},
{
glyphname = quotedbl;
kernLeft = KO_quotedbl;
kernRight = KO_quotedbl;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (198,0);
ref = quotesingle;
},
{
ref = quotesingle;
}
);
width = 462;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
pos = (248,0);
ref = quotesingle;
},
{
pos = (50,0);
ref = quotesingle;
}
);
width = 532;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
pos = (248,0);
ref = quotesingle;
},
{
pos = (50,0);
ref = quotesingle;
}
);
width = 570;
}
);
note = quotedbl;
unicode = 34;
userData = {
KernOnName = quotedbl;
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = quotesingle;
kernLeft = KO_quotesingle;
kernRight = KO_quotesingle;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(193,459,l),
(208,750,l),
(56,750,l),
(70,459,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 2 1 1 1 38 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 264;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(169,457,l),
(184,748,l),
(92,748,l),
(106,457,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 2 1 1 1 38 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 276;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(149,456,l),
(164,747,l),
(110,747,l),
(124,456,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
0 0 0 1 95 2 1 1 1 38 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 274;
}
);
note = quotesingle;
unicode = 39;
userData = {
KernOnName = quotesingle;
KernOnSpecialSpacing = {
L = quotes;
R = quotes;
};
};
},
{
glyphname = at;
lastChange = "2025-09-12 12:56:19 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(725,-140,l),
(725,-33,l),
(502,-33,ls),
(286,-33,o),
(168,91,o),
(168,292,cs),
(168,482,o),
(300,613,o),
(491,613,cs),
(682,613,o),
(814,495,o),
(814,322,cs),
(814,231,o),
(784,178,o),
(739,178,cs),
(705,178,o),
(688,210,o),
(688,261,cs),
(688,501,l),
(574,501,l),
(559,396,l),
(559,212,l),
(580,171,l),
(598,113,o),
(658,76,o),
(727,76,cs),
(839,76,o),
(923,176,o),
(923,321,cs),
(923,547,o),
(736,720,o),
(492,720,cs),
(247,720,o),
(60,535,o),
(60,293,cs),
(60,35,o),
(231,-140,o),
(502,-140,cs)
);
},
{
closed = 1;
nodes = (
(526,62,o),
(582,118,o),
(593,195,c),
(593,392,l),
(582,462,o),
(526,512,o),
(444,512,cs),
(335,512,o),
(258,419,o),
(258,291,cs),
(258,156,o),
(339,62,o),
(452,62,cs)
);
},
{
closed = 1;
nodes = (
(428,182,o),
(399,225,o),
(399,291,cs),
(399,358,o),
(428,399,o),
(478,399,cs),
(528,399,o),
(559,359,o),
(559,291,cs),
(559,224,o),
(528,182,o),
(478,182,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
33 1 10 4 19 1 2 6 58 1 8 2 59 1 0 8 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
33 1 10 5 19 1 2 6 58 1 8 2 59 1 0 8 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 0 7 4 1 7 105 5 1 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 105 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 10 4 5 10 128 0 1 0 7 4 1 7 105 0 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 105 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
63 62 1 0 71 69 62 77 63 77 56 54 48 46 40 38 35 34 31 29 23 21 17 15 9 7 0 61 1 61 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 984;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(541,-140,o),
(627,-113,o),
(688,-70,c),
(644,11,l),
(599,-22,o),
(528,-45,o),
(473,-45,cs),
(349,-45,o),
(241,18,o),
(182,121,cs),
(152,172,o),
(137,229,o),
(137,291,cs),
(137,414,o),
(200,521,o),
(303,581,cs),
(354,610,o),
(411,625,o),
(473,625,cs),
(665,625,o),
(807,496,o),
(807,322,cs),
(807,230,o),
(772,176,o),
(725,176,cs),
(684,176,o),
(664,206,o),
(664,259,cs),
(664,499,l),
(558,499,l),
(558,435,l),
(538,482,o),
(489,509,o),
(441,509,cs),
(340,509,o),
(261,424,o),
(261,293,cs),
(261,159,o),
(341,76,o),
(443,76,cs),
(507,76,o),
(563,110,o),
(576,162,c),
(589,111,o),
(645,76,o),
(713,76,cs),
(819,76,o),
(904,175,o),
(904,322,cs),
(904,470,o),
(825,598,o),
(693,668,cs),
(627,703,o),
(554,720,o),
(473,720,cs),
(313,720,o),
(175,638,o),
(99,507,cs),
(60,442,o),
(41,370,o),
(41,291,cs),
(41,131,o),
(123,-7,o),
(255,-83,cs),
(320,-121,o),
(393,-140,o),
(473,-140,cs)
);
},
{
closed = 1;
nodes = (
(413,177,o),
(377,222,o),
(377,293,cs),
(377,364,o),
(414,407,o),
(464,407,cs),
(514,407,o),
(549,362,o),
(549,293,cs),
(549,221,o),
(514,177,o),
(464,177,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(553,62,o),
(617,127,o),
(628,223,c),
(628,371,l),
(617,455,o),
(552,512,o),
(464,512,cs),
(353,512,o),
(276,420,o),
(276,290,cs),
(276,156,o),
(355,62,o),
(469,62,cs)
);
},
{
closed = 1;
nodes = (
(407,134,o),
(358,197,o),
(358,290,cs),
(358,383,o),
(407,445,o),
(481,445,cs),
(553,445,o),
(601,383,o),
(601,290,cs),
(601,198,o),
(553,134,o),
(481,134,cs)
);
},
{
closed = 1;
nodes = (
(506,-75,l),
(276,-75,o),
(130,70,o),
(130,288,cs),
(130,505,o),
(279,655,o),
(497,655,cs),
(712,655,o),
(860,519,o),
(860,321,cs),
(860,207,o),
(812,136,o),
(759,136,cs),
(703,136,o),
(678,176,o),
(678,254,cs),
(678,501,l),
(609,501,l),
(601,396,l),
(601,226,l),
(615,185,l),
(634,113,o),
(681,76,o),
(749,76,cs),
(839,76,o),
(927,172,o),
(927,323,cs),
(927,553,o),
(747,720,o),
(497,720,cs),
(245,720,o),
(64,539,o),
(64,287,cs),
(64,34,o),
(240,-140,o),
(506,-140,c)
);
},
{
closed = 1;
nodes = (
(506,-140,l),
(729,-140,l),
(729,-75,l),
(506,-75,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
33 1 10 4 19 1 2 6 58 1 8 2 59 1 0 8 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
33 1 10 5 19 1 2 6 58 1 8 2 59 1 0 8 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 0 7 4 1 7 105 5 1 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 105 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 10 4 5 10 128 0 1 0 7 4 1 7 105 0 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 105 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
63 62 1 0 71 69 62 77 63 77 56 54 48 46 40 38 35 34 31 29 23 21 17 15 9 7 0 61 1 61 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 992;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(541,-140,o),
(627,-113,o),
(688,-70,c),
(644,11,l),
(599,-22,o),
(528,-45,o),
(473,-45,cs),
(349,-45,o),
(241,18,o),
(182,121,cs),
(152,172,o),
(137,229,o),
(137,291,cs),
(137,414,o),
(200,521,o),
(303,581,cs),
(354,610,o),
(411,625,o),
(473,625,cs),
(665,625,o),
(807,496,o),
(807,322,cs),
(807,230,o),
(772,176,o),
(725,176,cs),
(684,176,o),
(664,206,o),
(664,259,cs),
(664,499,l),
(558,499,l),
(558,435,l),
(538,482,o),
(489,509,o),
(441,509,cs),
(340,509,o),
(261,424,o),
(261,293,cs),
(261,159,o),
(341,76,o),
(443,76,cs),
(507,76,o),
(563,110,o),
(576,162,c),
(589,111,o),
(645,76,o),
(713,76,cs),
(819,76,o),
(904,175,o),
(904,322,cs),
(904,470,o),
(825,598,o),
(693,668,cs),
(627,703,o),
(554,720,o),
(473,720,cs),
(313,720,o),
(175,638,o),
(99,507,cs),
(60,442,o),
(41,370,o),
(41,291,cs),
(41,131,o),
(123,-7,o),
(255,-83,cs),
(320,-121,o),
(393,-140,o),
(473,-140,cs)
);
},
{
closed = 1;
nodes = (
(413,177,o),
(377,222,o),
(377,293,cs),
(377,364,o),
(414,407,o),
(464,407,cs),
(514,407,o),
(549,362,o),
(549,293,cs),
(549,221,o),
(514,177,o),
(464,177,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(573,62,o),
(640,135,o),
(651,242,c),
(651,357,l),
(641,448,o),
(570,512,o),
(477,512,cs),
(364,512,o),
(287,421,o),
(287,290,cs),
(287,156,o),
(365,62,o),
(478,62,cs)
);
},
{
closed = 1;
nodes = (
(392,101,o),
(330,179,o),
(330,290,cs),
(330,399,o),
(392,475,o),
(482,475,cs),
(569,475,o),
(629,400,o),
(629,290,cs),
(629,178,o),
(569,101,o),
(482,101,cs)
);
},
{
closed = 1;
nodes = (
(508,-102,l),
(269,-102,o),
(105,56,o),
(105,286,cs),
(105,520,o),
(266,682,o),
(501,682,cs),
(732,682,o),
(889,534,o),
(889,321,cs),
(889,188,o),
(828,109,o),
(772,109,cs),
(702,109,o),
(671,151,o),
(671,249,cs),
(671,501,l),
(632,501,l),
(629,396,l),
(629,235,l),
(638,194,l),
(658,113,o),
(696,76,o),
(763,76,cs),
(839,76,o),
(929,170,o),
(929,325,cs),
(929,557,o),
(754,720,o),
(499,720,cs),
(242,720,o),
(66,541,o),
(66,285,cs),
(66,34,o),
(246,-140,o),
(508,-140,c)
);
},
{
closed = 1;
nodes = (
(508,-140,l),
(731,-140,l),
(731,-102,l),
(508,-102,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 18 values pushed */
33 1 10 4 19 1 2 6 58 1 8 2 59 1 0 8 4 76 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 18 values pushed */
33 1 10 5 19 1 2 6 58 1 8 2 59 1 0 8 4 76 
EIF[ ]	/* EndIf */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
25 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 45 values pushed */
0 1 0 7 4 1 7 105 5 1 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 105 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 52 values pushed */
0 5 4 10 4 5 10 128 0 1 0 7 4 1 7 105 0 4 0 10 6 4 10 105 12 9 2 6 3 1 2 8 6 2 105 0 8 0 0 8 89 0 8 8 0 97 11 1 0 8 0 81 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 33 values pushed */
63 62 1 0 71 69 62 77 63 77 56 54 48 46 40 38 35 34 31 29 23 21 17 15 9 7 0 61 1 61 13 8 22 
CALL[ ]	/* CallFunction */";
};
width = 996;
}
);
note = at;
unicode = 64;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = ampersand;
kernLeft = KO_ampersand;
kernRight = KO_ampersand;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(368,-15,o),
(446,12,o),
(513,66,c),
(574,0,l),
(769,0,l),
(611,167,l),
(660,240,o),
(688,327,o),
(688,426,c),
(558,426,l),
(554,347,o),
(544,301,o),
(523,260,c),
(335,458,ls),
(298,497,o),
(283,529,o),
(283,567,cs),
(283,611,o),
(311,649,o),
(358,649,cs),
(392,649,o),
(416,631,o),
(430,591,c),
(571,591,l),
(563,686,o),
(485,765,o),
(358,765,cs),
(227,765,o),
(137,681,o),
(137,566,cs),
(137,521,o),
(151,472,o),
(185,420,c),
(96,378,o),
(39,299,o),
(39,213,cs),
(39,71,o),
(159,-15,o),
(279,-15,cs)
);
},
{
closed = 1;
nodes = (
(243,106,o),
(198,152,o),
(198,225,cs),
(198,269,o),
(214,306,o),
(255,338,c),
(432,151,l),
(396,120,o),
(356,106,o),
(307,106,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 4 0 97 6 1 0 0 46 77 0 2 2 3 97 5 1 3 3 47 77 0 1 1 3 97 5 1 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 0 97 6 1 0 0 46 77 0 2 2 5 95 0 5 5 39 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 50 49 40 38 25 23 20 19 16 14 0 58 1 58 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 806;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(383,-15,o),
(472,25,o),
(541,103,c),
(644,0,l),
(748,0,l),
(590,160,l),
(636,228,o),
(660,306,o),
(661,382,c),
(592,382,l),
(587,312,o),
(571,257,o),
(542,210,c),
(320,433,ls),
(269,484,o),
(240,532,o),
(240,583,cs),
(240,651,o),
(291,699,o),
(361,699,cs),
(425,699,o),
(467,652,o),
(473,606,c),
(550,606,l),
(545,696,o),
(460,765,o),
(361,765,cs),
(243,765,o),
(162,688,o),
(162,582,cs),
(162,524,o),
(185,474,o),
(228,421,c),
(127,379,o),
(59,296,o),
(59,200,cs),
(59,65,o),
(170,-15,o),
(283,-15,cs)
);
},
{
closed = 1;
nodes = (
(216,53,o),
(143,110,o),
(143,206,cs),
(143,276,o),
(185,340,o),
(267,378,c),
(496,149,l),
(445,86,o),
(378,53,o),
(297,53,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 4 0 97 6 1 0 0 46 77 0 2 2 3 97 5 1 3 3 47 77 0 1 1 3 97 5 1 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 0 97 6 1 0 0 46 77 0 2 2 5 95 0 5 5 39 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 50 49 40 38 25 23 20 19 16 14 0 58 1 58 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 763;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(398,-15,o),
(487,38,o),
(554,124,c),
(678,0,l),
(738,0,l),
(579,156,l),
(626,222,o),
(648,294,o),
(649,359,c),
(609,359,l),
(603,294,o),
(584,236,o),
(552,185,c),
(312,419,ls),
(245,484,o),
(219,539,o),
(219,591,cs),
(219,672,o),
(280,727,o),
(363,727,cs),
(441,727,o),
(493,665,o),
(495,614,c),
(539,614,l),
(537,698,o),
(452,765,o),
(363,765,cs),
(253,765,o),
(175,691,o),
(175,590,cs),
(175,527,o),
(204,475,o),
(252,421,c),
(146,381,o),
(69,296,o),
(69,194,cs),
(69,65,o),
(172,-15,o),
(286,-15,cs)
);
},
{
closed = 1;
nodes = (
(198,25,o),
(116,91,o),
(116,196,cs),
(116,283,o),
(178,359,o),
(274,395,c),
(526,150,l),
(469,71,o),
(391,25,o),
(293,25,cs)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 34 values pushed */
0 4 4 0 97 6 1 0 0 46 77 0 2 2 3 97 5 1 3 3 47 77 0 1 1 3 97 5 1 3 3 47 3 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 32 values pushed */
0 4 4 0 97 6 1 0 0 46 77 0 2 2 5 95 0 5 5 39 77 0 1 1 3 97 0 3 3 47 3 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 50 49 40 38 25 23 20 19 16 14 0 58 1 58 7 8 22 
CALL[ ]	/* CallFunction */";
};
width = 798;
}
);
note = ampersand;
unicode = 38;
userData = {
KernOnSpecialSpacing = {
L = symbols;
R = symbols;
};
};
},
{
glyphname = paragraph;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(448,-180,l),
(448,750,l),
(280,750,ls),
(132,750,o),
(30,651,o),
(30,506,cs),
(30,361,o),
(132,262,o),
(280,262,cs),
(314,262,l),
(314,-180,l)
);
},
{
closed = 1;
nodes = (
(600,-180,l),
(600,750,l),
(518,750,l),
(518,-180,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 1 95 3 1 1 1 38 77 5 4 2 2 2 43 2 78 12 12 12 15 12 15 18 17 38 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 733;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(426,-179,l),
(426,749,l),
(335,749,ls),
(195,749,o),
(104,665,o),
(104,538,cs),
(104,411,o),
(195,325,o),
(332,325,cs),
(351,325,l),
(351,-179,l)
);
},
{
closed = 1;
nodes = (
(593,-179,l),
(593,749,l),
(538,749,l),
(538,-179,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 1 95 3 1 1 1 38 77 5 4 2 2 2 43 2 78 12 12 12 15 12 15 18 17 38 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 743;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(411,-178,l),
(411,748,l),
(366,748,ls),
(231,748,o),
(146,674,o),
(146,557,cs),
(146,441,o),
(229,363,o),
(361,363,cs),
(371,363,l),
(371,-178,l)
);
},
{
closed = 1;
nodes = (
(587,-178,l),
(587,748,l),
(547,748,l),
(547,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 32 values pushed */
0 0 0 1 95 3 1 1 1 38 77 5 4 2 2 2 43 2 78 12 12 12 15 12 15 18 17 38 16 6 8 26 
CALL[ ]	/* CallFunction */";
};
width = 743;
}
);
note = paragraph;
unicode = 182;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = copyright;
kernRight = KO_copyright;
lastChange = "2025-09-12 12:54:43 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(614,8,o),
(759,157,o),
(759,374,cs),
(759,591,o),
(614,740,o),
(404,740,cs),
(192,740,o),
(46,591,o),
(46,374,cs),
(46,157,o),
(192,8,o),
(404,8,cs)
);
},
{
closed = 1;
nodes = (
(227,68,o),
(106,193,o),
(106,374,cs),
(106,555,o),
(227,680,o),
(404,680,cs),
(579,680,o),
(699,555,o),
(699,374,cs),
(699,193,o),
(579,68,o),
(404,68,cs)
);
},
{
pos = (160,143);
ref = c;
scale = (0.8106,0.8106);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 84 values pushed */
52 51 37 36 4 6 5 1 76 0 1 0 3 4 1 3 105 10 1 4 0 5 6 4 5 105 0 6 0 7 2 6 7 105 9 1 2 0 0 2 89 9 1 2 2 0 97 8 1 0 2 0 81 33 32 17 16 1 0 57 55 49 47 41 39 32 63 33 63 25 23 16 31 17 31 9 7 0 15 1 15 11 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 805;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(632,8,o),
(777,157,o),
(777,374,cs),
(777,591,o),
(632,740,o),
(422,740,cs),
(210,740,o),
(64,591,o),
(64,374,cs),
(64,157,o),
(210,8,o),
(422,8,cs)
);
},
{
closed = 1;
nodes = (
(234,50,o),
(106,182,o),
(106,374,cs),
(106,566,o),
(234,698,o),
(422,698,cs),
(608,698,o),
(735,566,o),
(735,374,cs),
(735,182,o),
(608,50,o),
(422,50,cs)
);
},
{
pos = (190,159);
ref = c;
scale = (0.8106,0.8106);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 84 values pushed */
52 51 37 36 4 6 5 1 76 0 1 0 3 4 1 3 105 10 1 4 0 5 6 4 5 105 0 6 0 7 2 6 7 105 9 1 2 0 0 2 89 9 1 2 2 0 97 8 1 0 2 0 81 33 32 17 16 1 0 57 55 49 47 41 39 32 63 33 63 25 23 16 31 17 31 9 7 0 15 1 15 11 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 841;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(637,8,o),
(782,157,o),
(782,374,cs),
(782,591,o),
(637,740,o),
(427,740,cs),
(215,740,o),
(69,591,o),
(69,374,cs),
(69,157,o),
(215,8,o),
(427,8,cs)
);
},
{
closed = 1;
nodes = (
(233,39,o),
(100,176,o),
(100,374,cs),
(100,572,o),
(233,709,o),
(427,709,cs),
(619,709,o),
(751,572,o),
(751,374,cs),
(751,176,o),
(619,39,o),
(427,39,cs)
);
},
{
pos = (195,159);
ref = c;
scale = (0.8106,0.8106);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 84 values pushed */
52 51 37 36 4 6 5 1 76 0 1 0 3 4 1 3 105 10 1 4 0 5 6 4 5 105 0 6 0 7 2 6 7 105 9 1 2 0 0 2 89 9 1 2 2 0 97 8 1 0 2 0 81 33 32 17 16 1 0 57 55 49 47 41 39 32 63 33 63 25 23 16 31 17 31 9 7 0 15 1 15 11 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 851;
}
);
metricLeft = O;
metricRight = O;
note = copyright;
unicode = 169;
userData = {
KernOnSpecialSpacing = {
R = symbols;
};
};
},
{
glyphname = registered;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(409,297,o),
(495,391,o),
(495,528,cs),
(495,666,o),
(409,760,o),
(284,760,cs),
(158,760,o),
(71,666,o),
(71,528,cs),
(71,391,o),
(158,297,o),
(284,297,cs)
);
},
{
closed = 1;
nodes = (
(180,334,o),
(108,413,o),
(108,528,cs),
(108,644,o),
(180,723,o),
(284,723,cs),
(387,723,o),
(458,644,o),
(458,528,cs),
(458,413,o),
(387,334,o),
(284,334,cs)
);
},
{
pos = (164,400);
ref = R;
scale = (0.35,0.35);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 94 values pushed */
32 1 5 8 1 76 6 1 4 5 2 5 4 2 128 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 8 0 5 4 8 5 105 11 1 2 0 0 2 89 11 1 2 2 0 97 10 1 0 2 0 81 54 53 17 16 1 0 60 58 53 61 54 61 47 45 44 43 42 40 37 36 25 23 16 31 17 31 9 7 0 15 1 15 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 527;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(384,297,o),
(495,394,o),
(495,528,cs),
(495,663,o),
(384,760,o),
(264,760,cs),
(135,760,o),
(31,656,o),
(31,528,cs),
(31,401,o),
(135,297,o),
(264,297,cs)
);
},
{
closed = 1;
nodes = (
(156,334,o),
(68,421,o),
(68,528,cs),
(68,635,o),
(156,723,o),
(264,723,cs),
(372,723,o),
(458,635,o),
(458,528,cs),
(458,421,o),
(372,334,o),
(264,334,cs)
);
},
{
closed = 1;
nodes = (
(228,395,l),
(228,493,l),
(272,493,ls),
(292,493,o),
(306,476,o),
(306,456,cs),
(306,395,l),
(373,395,l),
(373,473,ls),
(373,497,o),
(359,512,o),
(350,520,c),
(358,530,o),
(354,523,o),
(363,537,cs),
(370,549,o),
(374,563,o),
(374,579,cs),
(374,632,o),
(334,665,o),
(270,665,cs),
(161,665,l),
(161,395,l)
);
},
{
closed = 1;
nodes = (
(228,605,l),
(268,605,ls),
(292,605,o),
(305,596,o),
(305,579,cs),
(305,562,o),
(292,552,o),
(268,552,cs),
(228,552,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(414,297,o),
(500,391,o),
(500,528,cs),
(500,666,o),
(414,760,o),
(289,760,cs),
(163,760,o),
(76,666,o),
(76,528,cs),
(76,391,o),
(163,297,o),
(289,297,cs)
);
},
{
closed = 1;
nodes = (
(182,331,o),
(109,411,o),
(109,528,cs),
(109,646,o),
(182,726,o),
(289,726,cs),
(395,726,o),
(467,646,o),
(467,528,cs),
(467,411,o),
(395,331,o),
(289,331,cs)
);
},
{
pos = (169,400);
ref = R;
scale = (0.35,0.35);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 94 values pushed */
32 1 5 8 1 76 6 1 4 5 2 5 4 2 128 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 8 0 5 4 8 5 105 11 1 2 0 0 2 89 11 1 2 2 0 97 10 1 0 2 0 81 54 53 17 16 1 0 60 58 53 61 54 61 47 45 44 43 42 40 37 36 25 23 16 31 17 31 9 7 0 15 1 15 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 527;
},
{
annotations = (
{
pos = (1205.209,-5.561);
type = Text;
}
);
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(384,297,o),
(495,394,o),
(495,528,cs),
(495,663,o),
(384,760,o),
(264,760,cs),
(135,760,o),
(31,656,o),
(31,528,cs),
(31,401,o),
(135,297,o),
(264,297,cs)
);
},
{
closed = 1;
nodes = (
(156,334,o),
(68,421,o),
(68,528,cs),
(68,635,o),
(156,723,o),
(264,723,cs),
(372,723,o),
(458,635,o),
(458,528,cs),
(458,421,o),
(372,334,o),
(264,334,cs)
);
},
{
closed = 1;
nodes = (
(228,395,l),
(228,493,l),
(272,493,ls),
(292,493,o),
(306,476,o),
(306,456,cs),
(306,395,l),
(373,395,l),
(373,473,ls),
(373,497,o),
(359,512,o),
(350,520,c),
(358,530,o),
(354,523,o),
(363,537,cs),
(370,549,o),
(374,563,o),
(374,579,cs),
(374,632,o),
(334,665,o),
(270,665,cs),
(161,665,l),
(161,395,l)
);
},
{
closed = 1;
nodes = (
(228,605,l),
(268,605,ls),
(292,605,o),
(305,596,o),
(305,579,cs),
(305,562,o),
(292,552,o),
(268,552,cs),
(228,552,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(414,297,o),
(500,391,o),
(500,528,cs),
(500,666,o),
(414,760,o),
(289,760,cs),
(163,760,o),
(76,666,o),
(76,528,cs),
(76,391,o),
(163,297,o),
(289,297,cs)
);
},
{
closed = 1;
nodes = (
(174,315,o),
(94,402,o),
(94,528,cs),
(94,655,o),
(174,742,o),
(289,742,cs),
(403,742,o),
(482,655,o),
(482,528,cs),
(482,402,o),
(403,315,o),
(289,315,cs)
);
},
{
pos = (172,400);
ref = R;
scale = (0.35,0.35);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 94 values pushed */
32 1 5 8 1 76 6 1 4 5 2 5 4 2 128 0 1 0 3 7 1 3 105 0 7 0 9 8 7 9 105 12 1 8 0 5 4 8 5 105 11 1 2 0 0 2 89 11 1 2 2 0 97 10 1 0 2 0 81 54 53 17 16 1 0 60 58 53 61 54 61 47 45 44 43 42 40 37 36 25 23 16 31 17 31 9 7 0 15 1 15 13 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 527;
}
);
note = registered;
unicode = 174;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = degree;
kernRight = KO_degree;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(365,355,o),
(451,441,o),
(451,556,cs),
(451,671,o),
(365,758,o),
(251,758,cs),
(137,758,o),
(51,671,o),
(51,556,cs),
(51,441,o),
(137,355,o),
(251,355,cs)
);
},
{
closed = 1;
nodes = (
(206,464,o),
(175,501,o),
(175,556,cs),
(175,611,o),
(206,648,o),
(251,648,cs),
(296,648,o),
(327,611,o),
(327,556,cs),
(327,501,o),
(296,464,o),
(251,464,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 502;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(355,355,o),
(431,439,o),
(431,556,cs),
(431,677,o),
(352,758,o),
(231,758,cs),
(115,758,o),
(31,680,o),
(31,556,cs),
(31,435,o),
(111,355,o),
(231,355,cs)
);
},
{
closed = 1;
nodes = (
(186,464,o),
(155,500,o),
(155,556,cs),
(155,611,o),
(186,648,o),
(231,648,cs),
(278,648,o),
(307,611,o),
(307,556,cs),
(307,500,o),
(278,464,o),
(231,464,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(373,355,o),
(456,439,o),
(456,556,cs),
(456,674,o),
(373,758,o),
(256,758,cs),
(139,758,o),
(56,674,o),
(56,556,cs),
(56,439,o),
(139,355,o),
(256,355,cs)
);
},
{
closed = 1;
nodes = (
(173,411,o),
(117,470,o),
(117,556,cs),
(117,643,o),
(173,702,o),
(256,702,cs),
(339,702,o),
(395,643,o),
(395,556,cs),
(395,470,o),
(339,411,o),
(256,411,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 512;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(355,355,o),
(431,439,o),
(431,556,cs),
(431,677,o),
(352,758,o),
(231,758,cs),
(115,758,o),
(31,680,o),
(31,556,cs),
(31,435,o),
(111,355,o),
(231,355,cs)
);
},
{
closed = 1;
nodes = (
(186,464,o),
(155,500,o),
(155,556,cs),
(155,611,o),
(186,648,o),
(231,648,cs),
(278,648,o),
(307,611,o),
(307,556,cs),
(307,500,o),
(278,464,o),
(231,464,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(375,355,o),
(456,437,o),
(456,556,cs),
(456,676,o),
(375,758,o),
(256,758,cs),
(137,758,o),
(56,676,o),
(56,556,cs),
(56,437,o),
(137,355,o),
(256,355,cs)
);
},
{
closed = 1;
nodes = (
(150,377,o),
(78,450,o),
(78,556,cs),
(78,663,o),
(150,736,o),
(256,736,cs),
(362,736,o),
(434,663,o),
(434,556,cs),
(434,450,o),
(362,377,o),
(256,377,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 46 values pushed */
0 1 0 3 2 1 3 105 5 1 2 0 0 2 89 5 1 2 2 0 97 4 1 0 2 0 81 17 16 1 0 23 21 16 27 17 27 9 7 0 15 1 15 6 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 512;
}
);
note = degree;
unicode = 176;
userData = {
KernOnName = degree;
KernOnSpecialSpacing = {
L = NoKerning;
R = superiors;
};
};
},
{
glyphname = bar;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(192,-178,l),
(192,810,l),
(74,810,l),
(74,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 43 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 266;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(163,-178,l),
(163,810,l),
(97,810,l),
(97,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 43 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 260;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(136,-178,l),
(136,810,l),
(103,810,l),
(103,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 22 values pushed */
2 1 1 1 0 95 0 0 0 43 0 78 0 0 0 3 0 3 17 3 8 23 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
metricLeft = H;
metricRight = H;
note = bar;
unicode = 124;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = brokenbar;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(192,408,l),
(192,810,l),
(74,810,l),
(74,408,l)
);
},
{
closed = 1;
nodes = (
(192,-178,l),
(192,216,l),
(74,216,l),
(74,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 3 95 5 1 3 3 43 3 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 266;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(163,408,l),
(163,810,l),
(97,810,l),
(97,408,l)
);
},
{
closed = 1;
nodes = (
(163,-178,l),
(163,216,l),
(97,216,l),
(97,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 3 95 5 1 3 3 43 3 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 260;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(136,408,l),
(136,810,l),
(103,810,l),
(103,408,l)
);
},
{
closed = 1;
nodes = (
(136,-178,l),
(136,216,l),
(103,216,l),
(103,-178,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 39 values pushed */
0 0 4 1 1 2 0 1 103 0 2 2 3 95 5 1 3 3 43 3 78 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 240;
}
);
metricLeft = H;
metricRight = H;
note = brokenbar;
unicode = 166;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = cent;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = c;
},
{
closed = 1;
nodes = (
(365,-131,l),
(365,10,l),
(235,10,l),
(235,-131,l)
);
},
{
closed = 1;
nodes = (
(365,519,l),
(365,683,l),
(235,683,l),
(235,519,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 7 1 6 1 7 6 128 0 6 9 1 6 9 126 0 9 8 1 9 8 126 0 8 2 1 8 2 126 0 0 10 1 1 7 0 1 103 0 2 11 1 3 2 3 99 0 5 5 49 77 12 1 4 4 47 4 78 9 8 4 4 0 0 36 35 33 31 25 23 21 20 17 15 8 39 9 39 4 7 4 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 582;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(472,-12,o),
(576,80,o),
(590,220,c),
(434,220,l),
(426,167,o),
(380,127,o),
(319,127,cs),
(242,127,o),
(186,190,o),
(186,290,cs),
(186,392,o),
(242,452,o),
(319,452,cs),
(376,452,o),
(419,410,o),
(427,354,c),
(580,354,l),
(572,501,o),
(465,591,o),
(319,591,cs),
(144,591,o),
(31,474,o),
(31,290,cs),
(31,101,o),
(149,-12,o),
(319,-12,cs)
);
},
{
closed = 1;
nodes = (
(377,-141,l),
(377,0,l),
(247,0,l),
(247,-141,l)
);
},
{
closed = 1;
nodes = (
(377,579,l),
(377,713,l),
(247,713,l),
(247,579,l)
);
}
);
};
layerId = m003;
shapes = (
{
ref = c;
},
{
closed = 1;
nodes = (
(332,-143,l),
(332,-2,l),
(266,-2,l),
(266,-143,l)
);
},
{
closed = 1;
nodes = (
(335,529,l),
(335,693,l),
(265,693,l),
(265,529,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 7 1 6 1 7 6 128 0 6 9 1 6 9 126 0 9 8 1 9 8 126 0 8 2 1 8 2 126 0 0 10 1 1 7 0 1 103 0 2 11 1 3 2 3 99 0 5 5 49 77 12 1 4 4 47 4 78 9 8 4 4 0 0 36 35 33 31 25 23 21 20 17 15 8 39 9 39 4 7 4 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 546;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(472,-12,o),
(576,80,o),
(590,220,c),
(434,220,l),
(426,167,o),
(380,127,o),
(319,127,cs),
(242,127,o),
(186,190,o),
(186,290,cs),
(186,392,o),
(242,452,o),
(319,452,cs),
(376,452,o),
(419,410,o),
(427,354,c),
(580,354,l),
(572,501,o),
(465,591,o),
(319,591,cs),
(144,591,o),
(31,474,o),
(31,290,cs),
(31,101,o),
(149,-12,o),
(319,-12,cs)
);
},
{
closed = 1;
nodes = (
(377,-141,l),
(377,0,l),
(247,0,l),
(247,-141,l)
);
},
{
closed = 1;
nodes = (
(377,579,l),
(377,713,l),
(247,713,l),
(247,579,l)
);
}
);
};
layerId = m004;
shapes = (
{
ref = c;
},
{
closed = 1;
nodes = (
(316,-151,l),
(316,-10,l),
(275,-10,l),
(275,-151,l)
);
},
{
closed = 1;
nodes = (
(315,539,l),
(315,703,l),
(275,703,l),
(275,539,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 92 values pushed */
0 7 1 6 1 7 6 128 0 6 9 1 6 9 126 0 9 8 1 9 8 126 0 8 2 1 8 2 126 0 0 10 1 1 7 0 1 103 0 2 11 1 3 2 3 99 0 5 5 49 77 12 1 4 4 47 4 78 9 8 4 4 0 0 36 35 33 31 25 23 21 20 17 15 8 39 9 39 4 7 4 7 6 5 0 3 0 3 17 13 8 23 
CALL[ ]	/* CallFunction */";
};
width = 545;
}
);
metricLeft = c;
metricRight = c;
note = cent;
unicode = 162;
userData = {
KernOnSpecialSpacing = {
L = symbols;
R = symbols;
};
};
},
{
glyphname = dollar;
kernLeft = KO_dollar;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = S;
},
{
closed = 1;
nodes = (
(414,-141,l),
(414,0,l),
(284,0,l),
(284,-141,l)
);
},
{
closed = 1;
nodes = (
(414,719,l),
(414,883,l),
(284,883,l),
(284,719,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
0 12 13 9 13 12 9 128 0 9 10 13 9 10 126 4 1 0 5 1 1 13 0 1 103 6 1 2 7 1 3 2 3 99 0 13 13 11 97 0 11 11 46 77 0 10 10 8 97 14 1 8 8 47 8 78 17 16 51 49 46 45 42 40 26 24 21 20 16 64 17 64 17 17 17 17 17 17 17 16 15 8 30 
CALL[ ]	/* CallFunction */";
};
width = 691;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(517,-12,o),
(629,89,o),
(629,228,cs),
(629,348,o),
(566,410,o),
(494,435,cs),
(458,448,o),
(412,459,o),
(356,468,cs),
(289,480,o),
(254,488,o),
(230,509,cs),
(217,520,o),
(211,534,o),
(211,551,cs),
(211,592,o),
(253,620,o),
(317,620,cs),
(401,620,o),
(460,572,o),
(468,514,c),
(638,514,l),
(626,654,o),
(496,760,o),
(333,760,cs),
(160,760,o),
(48,665,o),
(48,542,cs),
(48,431,o),
(104,374,o),
(172,350,cs),
(206,338,o),
(250,327,o),
(305,318,cs),
(380,303,o),
(417,296,o),
(445,270,cs),
(459,257,o),
(466,239,o),
(466,216,cs),
(466,172,o),
(416,133,o),
(351,133,cs),
(263,133,o),
(195,191,o),
(187,274,c),
(23,274,l),
(27,111,o),
(162,-12,o),
(340,-12,cs)
);
},
{
closed = 1;
nodes = (
(299,-141,l),
(299,27,l),
(205,27,l),
(205,-141,l)
);
},
{
closed = 1;
nodes = (
(467,-141,l),
(467,26,l),
(374,26,l),
(374,-141,l)
);
},
{
closed = 1;
nodes = (
(299,722,l),
(299,882,l),
(205,882,l),
(205,722,l)
);
},
{
closed = 1;
nodes = (
(467,721,l),
(467,882,l),
(374,882,l),
(374,721,l)
);
}
);
};
layerId = m003;
shapes = (
{
ref = S;
},
{
closed = 1;
nodes = (
(370,-139,l),
(370,2,l),
(304,2,l),
(304,-139,l)
);
},
{
closed = 1;
nodes = (
(375,739,l),
(375,903,l),
(305,903,l),
(305,739,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
0 12 13 9 13 12 9 128 0 9 10 13 9 10 126 4 1 0 5 1 1 13 0 1 103 6 1 2 7 1 3 2 3 99 0 13 13 11 97 0 11 11 46 77 0 10 10 8 97 14 1 8 8 47 8 78 17 16 51 49 46 45 42 40 26 24 21 20 16 64 17 64 17 17 17 17 17 17 17 16 15 8 30 
CALL[ ]	/* CallFunction */";
};
width = 671;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(517,-12,o),
(629,89,o),
(629,228,cs),
(629,348,o),
(566,410,o),
(494,435,cs),
(458,448,o),
(412,459,o),
(356,468,cs),
(289,480,o),
(254,488,o),
(230,509,cs),
(217,520,o),
(211,534,o),
(211,551,cs),
(211,592,o),
(253,620,o),
(317,620,cs),
(401,620,o),
(460,572,o),
(468,514,c),
(638,514,l),
(626,654,o),
(496,760,o),
(333,760,cs),
(160,760,o),
(48,665,o),
(48,542,cs),
(48,431,o),
(104,374,o),
(172,350,cs),
(206,338,o),
(250,327,o),
(305,318,cs),
(380,303,o),
(417,296,o),
(445,270,cs),
(459,257,o),
(466,239,o),
(466,216,cs),
(466,172,o),
(416,133,o),
(351,133,cs),
(263,133,o),
(195,191,o),
(187,274,c),
(23,274,l),
(27,111,o),
(162,-12,o),
(340,-12,cs)
);
},
{
closed = 1;
nodes = (
(299,-141,l),
(299,27,l),
(205,27,l),
(205,-141,l)
);
},
{
closed = 1;
nodes = (
(467,-141,l),
(467,26,l),
(374,26,l),
(374,-141,l)
);
},
{
closed = 1;
nodes = (
(299,722,l),
(299,882,l),
(205,882,l),
(205,722,l)
);
},
{
closed = 1;
nodes = (
(467,721,l),
(467,882,l),
(374,882,l),
(374,721,l)
);
}
);
};
layerId = m004;
shapes = (
{
ref = S;
},
{
closed = 1;
nodes = (
(346,-131,l),
(346,10,l),
(305,10,l),
(305,-131,l)
);
},
{
closed = 1;
nodes = (
(345,729,l),
(345,893,l),
(305,893,l),
(305,729,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 83 values pushed */
0 12 13 9 13 12 9 128 0 9 10 13 9 10 126 4 1 0 5 1 1 13 0 1 103 6 1 2 7 1 3 2 3 99 0 13 13 11 97 0 11 11 46 77 0 10 10 8 97 14 1 8 8 47 8 78 17 16 51 49 46 45 42 40 26 24 21 20 16 64 17 64 17 17 17 17 17 17 17 16 15 8 30 
CALL[ ]	/* CallFunction */";
};
width = 656;
}
);
metricLeft = S;
metricRight = S;
note = dollar;
unicode = 36;
userData = {
KernOnName = dollar;
KernOnSpecialSpacing = {
L = symbols;
R = symbols;
};
};
},
{
glyphname = dong;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(626,-168,l),
(626,-56,l),
(103,-56,l),
(103,-168,l)
);
},
{
ref = dcroat;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 17 16 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 14 1 9 3 8 9 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 12 1 4 4 2 97 13 7 11 3 2 2 47 77 10 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 8 14 1 9 3 8 9 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 13 1 7 7 39 77 12 1 4 4 2 97 11 1 2 2 47 77 10 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 8 14 1 9 3 8 9 104 10 1 1 0 0 1 0 99 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 13 1 7 7 39 77 12 1 4 4 2 97 11 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
42 42 37 37 22 21 5 4 0 0 42 45 42 45 44 43 37 41 37 41 40 39 30 28 21 36 22 36 13 11 4 20 5 20 0 3 0 3 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 671;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(384,-12,o),
(463,62,o),
(477,173,c),
(477,407,l),
(463,517,o),
(383,591,o),
(283,591,cs),
(140,591,o),
(31,476,o),
(31,290,cs),
(31,110,o),
(135,-12,o),
(283,-12,cs)
);
},
{
closed = 1;
nodes = (
(237,127,o),
(186,188,o),
(186,290,cs),
(186,392,o),
(237,452,o),
(312,452,cs),
(385,452,o),
(434,391,o),
(434,290,cs),
(434,189,o),
(385,127,o),
(312,127,cs)
);
},
{
closed = 1;
nodes = (
(588,0,l),
(588,748,l),
(434,748,l),
(434,148,l),
(452,0,l)
);
},
{
closed = 1;
nodes = (
(658,617,l),
(658,699,l),
(326,699,l),
(326,617,l)
);
},
{
closed = 1;
nodes = (
(606,-123,l),
(606,-101,l),
(83,-101,l),
(83,-123,l)
);
}
);
};
hints = (
{
horizontal = 1;
place = (569,-20);
target = down;
type = TopGhost;
},
{
horizontal = 1;
place = (540,41);
type = Stem;
},
{
horizontal = 1;
place = (-12,41);
type = Stem;
},
{
horizontal = 1;
place = (0,21);
target = up;
type = BottomGhost;
},
{
place = (493,45);
type = Stem;
},
{
place = (54,46);
type = Stem;
}
);
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(631,-141,l),
(631,-83,l),
(108,-83,l),
(108,-141,l)
);
},
{
ref = dcroat;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 17 16 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 14 1 9 3 8 9 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 12 1 4 4 2 97 13 7 11 3 2 2 47 77 10 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 8 14 1 9 3 8 9 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 13 1 7 7 39 77 12 1 4 4 2 97 11 1 2 2 47 77 10 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 8 14 1 9 3 8 9 104 10 1 1 0 0 1 0 99 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 13 1 7 7 39 77 12 1 4 4 2 97 11 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
42 42 37 37 22 21 5 4 0 0 42 45 42 45 44 43 37 41 37 41 40 39 30 28 21 36 22 36 13 11 4 20 5 20 0 3 0 3 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 670;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(384,-12,o),
(463,62,o),
(477,173,c),
(477,407,l),
(463,517,o),
(383,591,o),
(283,591,cs),
(140,591,o),
(31,476,o),
(31,290,cs),
(31,110,o),
(135,-12,o),
(283,-12,cs)
);
},
{
closed = 1;
nodes = (
(237,127,o),
(186,188,o),
(186,290,cs),
(186,392,o),
(237,452,o),
(312,452,cs),
(385,452,o),
(434,391,o),
(434,290,cs),
(434,189,o),
(385,127,o),
(312,127,cs)
);
},
{
closed = 1;
nodes = (
(588,0,l),
(588,748,l),
(434,748,l),
(434,148,l),
(452,0,l)
);
},
{
closed = 1;
nodes = (
(658,617,l),
(658,699,l),
(326,699,l),
(326,617,l)
);
},
{
closed = 1;
nodes = (
(606,-123,l),
(606,-101,l),
(83,-101,l),
(83,-123,l)
);
}
);
};
hints = (
{
horizontal = 1;
place = (569,-20);
target = down;
type = TopGhost;
},
{
horizontal = 1;
place = (540,41);
type = Stem;
},
{
horizontal = 1;
place = (-12,41);
type = Stem;
},
{
horizontal = 1;
place = (0,21);
target = up;
type = BottomGhost;
},
{
place = (493,45);
type = Stem;
},
{
place = (54,46);
type = Stem;
}
);
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(631,-124,l),
(631,-100,l),
(108,-100,l),
(108,-124,l)
);
},
{
ref = dcroat;
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
38 17 16 3 4 5 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 50 values pushed */
0 8 14 1 9 3 8 9 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 12 1 4 4 2 97 13 7 11 3 2 2 47 77 10 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
50 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 54 values pushed */
0 8 14 1 9 3 8 9 104 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 13 1 7 7 39 77 12 1 4 4 2 97 11 1 2 2 47 77 10 1 1 1 0 95 0 0 0 43 0 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 51 values pushed */
0 8 14 1 9 3 8 9 104 10 1 1 0 0 1 0 99 0 6 6 38 77 0 5 5 3 97 0 3 3 49 77 13 1 7 7 39 77 12 1 4 4 2 97 11 1 2 2 47 2 78 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 42 values pushed */
42 42 37 37 22 21 5 4 0 0 42 45 42 45 44 43 37 41 37 41 40 39 30 28 21 36 22 36 13 11 4 20 5 20 0 3 0 3 17 15 8 23 
CALL[ ]	/* CallFunction */";
};
width = 653;
}
);
note = dong;
unicode = 8363;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = sterling;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(280,168,o),
(310,250,o),
(310,312,cs),
(310,395,o),
(255,441,o),
(255,521,cs),
(255,586,o),
(292,625,o),
(349,625,cs),
(408,625,o),
(436,582,o),
(441,492,c),
(607,492,l),
(607,654,o),
(500,765,o),
(344,765,cs),
(196,765,o),
(94,666,o),
(94,531,cs),
(94,420,o),
(163,384,o),
(163,293,cs),
(163,222,o),
(120,169,o),
(63,141,c),
(133,101,l)
);
},
{
closed = 1;
nodes = (
(596,0,l),
(596,141,l),
(63,141,l),
(63,0,l)
);
},
{
closed = 1;
nodes = (
(471,291,l),
(471,420,l),
(48,420,l),
(48,291,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
36 1 4 3 1 76 0 1 2 5 2 1 5 128 0 5 8 1 6 3 5 6 103 0 2 2 0 97 0 0 0 46 77 0 3 3 4 95 7 1 4 4 39 4 78 41 41 37 37 41 44 41 44 43 42 37 40 37 40 30 35 19 45 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 664;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(233,114,o),
(275,207,o),
(275,288,cs),
(275,397,o),
(199,439,o),
(199,540,cs),
(199,630,o),
(260,689,o),
(351,689,cs),
(450,689,o),
(509,618,o),
(512,492,c),
(600,492,l),
(600,658,o),
(500,765,o),
(347,765,cs),
(206,765,o),
(111,675,o),
(111,546,cs),
(111,427,o),
(193,390,o),
(193,279,cs),
(193,196,o),
(146,114,o),
(80,76,c),
(126,49,l)
);
},
{
closed = 1;
nodes = (
(589,0,l),
(589,76,l),
(80,76,l),
(80,0,l)
);
},
{
closed = 1;
nodes = (
(475,318,l),
(475,393,l),
(65,393,l),
(65,318,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
36 1 4 3 1 76 0 1 2 5 2 1 5 128 0 5 8 1 6 3 5 6 103 0 2 2 0 97 0 0 0 46 77 0 3 3 4 95 7 1 4 4 39 4 78 41 41 37 37 41 44 41 44 43 42 37 40 37 40 30 35 19 45 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 674;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(198,78,o),
(250,178,o),
(250,274,cs),
(250,398,o),
(161,438,o),
(161,552,cs),
(161,658,o),
(236,728,o),
(349,728,cs),
(476,728,o),
(553,637,o),
(554,492,c),
(593,492,l),
(593,661,o),
(498,765,o),
(345,765,cs),
(209,765,o),
(119,681,o),
(119,556,cs),
(119,431,o),
(208,393,o),
(208,270,cs),
(208,178,o),
(157,80,o),
(88,37,c),
(119,17,l)
);
},
{
closed = 1;
nodes = (
(582,0,l),
(582,37,l),
(88,37,l),
(88,0,l)
);
},
{
closed = 1;
nodes = (
(476,335,l),
(476,376,l),
(73,376,l),
(73,335,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 66 values pushed */
36 1 4 3 1 76 0 1 2 5 2 1 5 128 0 5 8 1 6 3 5 6 103 0 2 2 0 97 0 0 0 46 77 0 3 3 4 95 7 1 4 4 39 4 78 41 41 37 37 41 44 41 44 43 42 37 40 37 40 30 35 19 45 9 8 26 
CALL[ ]	/* CallFunction */";
};
width = 675;
}
);
note = sterling;
unicode = 163;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = symbols;
};
};
},
{
glyphname = yen;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(593,121,l),
(593,214,l),
(95,214,l),
(95,121,l)
);
},
{
closed = 1;
nodes = (
(593,286,l),
(593,379,l),
(95,379,l),
(95,286,l)
);
},
{
ref = Y;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
15 1 1 5 12 9 2 0 1 2 76 0 1 0 0 3 1 0 104 0 3 0 2 4 3 2 103 7 6 2 5 5 38 77 0 4 4 39 4 78 8 8 8 16 8 16 18 19 17 17 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 673;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(379,0,l),
(379,302,l),
(639,748,l),
(455,748,l),
(303,461,l),
(149,748,l),
(-36,748,l),
(220,302,l),
(220,0,l)
);
},
{
closed = 1;
nodes = (
(551,121,l),
(551,214,l),
(53,214,l),
(53,121,l)
);
},
{
closed = 1;
nodes = (
(551,286,l),
(551,379,l),
(53,379,l),
(53,286,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(574,139,l),
(574,196,l),
(76,196,l),
(76,139,l)
);
},
{
closed = 1;
nodes = (
(574,297,l),
(574,353,l),
(76,353,l),
(76,297,l)
);
},
{
ref = Y;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
15 1 1 5 12 9 2 0 1 2 76 0 1 0 0 3 1 0 104 0 3 0 2 4 3 2 103 7 6 2 5 5 38 77 0 4 4 39 4 78 8 8 8 16 8 16 18 19 17 17 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 608;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(379,0,l),
(379,302,l),
(639,748,l),
(455,748,l),
(303,461,l),
(149,748,l),
(-36,748,l),
(220,302,l),
(220,0,l)
);
},
{
closed = 1;
nodes = (
(551,121,l),
(551,214,l),
(53,214,l),
(53,121,l)
);
},
{
closed = 1;
nodes = (
(551,286,l),
(551,379,l),
(53,379,l),
(53,286,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(559,150,l),
(559,185,l),
(61,185,l),
(61,150,l)
);
},
{
closed = 1;
nodes = (
(559,303,l),
(559,337,l),
(61,337,l),
(61,303,l)
);
},
{
ref = Y;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 55 values pushed */
15 1 1 5 12 9 2 0 1 2 76 0 1 0 0 3 1 0 104 0 3 0 2 4 3 2 103 7 6 2 5 5 38 77 0 4 4 39 4 78 8 8 8 16 8 16 18 19 17 17 17 16 8 8 28 
CALL[ ]	/* CallFunction */";
};
width = 568;
}
);
metricLeft = Y;
metricRight = Y;
note = yen;
unicode = 165;
userData = {
KernOnSpecialSpacing = {
L = symbols;
R = symbols;
};
};
},
{
glyphname = plus;
kernLeft = KO_plus;
kernRight = KO_plus;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(654,233,l),
(654,363,l),
(74,363,l),
(74,233,l)
);
},
{
closed = 1;
nodes = (
(429,0,l),
(429,596,l),
(299,596,l),
(299,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 1 3 133 0 2 0 2 134 4 1 1 0 0 1 87 4 1 1 1 0 96 0 0 1 0 80 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(499,356,l),
(499,392,l),
(39,392,l),
(39,356,l)
);
},
{
closed = 1;
nodes = (
(289,144,l),
(289,605,l),
(249,605,l),
(249,144,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(677,260,l),
(677,336,l),
(97,336,l),
(97,260,l)
);
},
{
closed = 1;
nodes = (
(425,0,l),
(425,596,l),
(349,596,l),
(349,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 1 3 133 0 2 0 2 134 4 1 1 0 0 1 87 4 1 1 1 0 96 0 0 1 0 80 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(497,356,l),
(497,392,l),
(37,392,l),
(37,356,l)
);
},
{
closed = 1;
nodes = (
(287,144,l),
(287,605,l),
(247,605,l),
(247,144,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(683,277,l),
(683,319,l),
(103,319,l),
(103,277,l)
);
},
{
closed = 1;
nodes = (
(414,0,l),
(414,596,l),
(372,596,l),
(372,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 42 values pushed */
0 3 1 3 133 0 2 0 2 134 4 1 1 0 0 1 87 4 1 1 1 0 96 0 0 1 0 80 0 0 7 6 5 4 0 3 0 3 17 5 8 23 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
metricLeft = H;
metricRight = H;
note = plus;
unicode = 43;
userData = {
KernOnSpecialSpacing = {
L = math;
R = math;
};
};
},
{
glyphname = minus;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(654,233,l),
(654,363,l),
(74,363,l),
(74,233,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(499,356,l),
(499,392,l),
(39,392,l),
(39,356,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(677,260,l),
(677,336,l),
(97,336,l),
(97,260,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(497,356,l),
(497,392,l),
(37,392,l),
(37,356,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(683,277,l),
(683,319,l),
(103,319,l),
(103,277,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 28 values pushed */
2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
metricLeft = H;
metricRight = H;
note = minus;
unicode = 8722;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = multiply;
lastChange = "2025-03-02 13:30:54 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(107,133,l),
(529,555,l),
(621,463,l),
(199,41,l)
);
},
{
closed = 1;
nodes = (
(107,463,l),
(199,555,l),
(621,133,l),
(529,41,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 2 0 2 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(49,223,l),
(374,548,l),
(400,523,l),
(74,198,l)
);
},
{
closed = 1;
nodes = (
(49,523,l),
(75,549,l),
(400,223,l),
(374,198,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(150,60,l),
(572,482,l),
(519,536,l),
(97,114,l)
);
},
{
closed = 1;
nodes = (
(97,482,l),
(519,60,l),
(572,114,l),
(150,536,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 2 0 2 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(47,223,l),
(372,548,l),
(398,523,l),
(72,198,l)
);
},
{
closed = 1;
nodes = (
(47,523,l),
(73,549,l),
(398,223,l),
(372,198,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(132,72,l),
(554,494,l),
(525,524,l),
(103,102,l)
);
},
{
closed = 1;
nodes = (
(103,494,l),
(525,72,l),
(554,102,l),
(132,524,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 6 values pushed */
7 5 2 0 2 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = multiply;
unicode = 215;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = divide;
kernLeft = KO_plus;
kernRight = KO_plus;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(654,233,l),
(654,363,l),
(74,363,l),
(74,233,l)
);
},
{
closed = 1;
nodes = (
(419,-19,o),
(458,18,o),
(458,71,cs),
(458,123,o),
(419,160,o),
(365,160,cs),
(311,160,o),
(271,123,o),
(271,71,cs),
(271,18,o),
(311,-19,o),
(365,-19,cs)
);
},
{
closed = 1;
nodes = (
(419,437,o),
(458,474,o),
(458,527,cs),
(458,579,o),
(419,616,o),
(365,616,cs),
(311,616,o),
(271,579,o),
(271,527,cs),
(271,474,o),
(311,437,o),
(365,437,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
7 1 3 0 2 1 3 2 103 6 1 1 0 0 5 1 0 103 8 1 5 4 4 5 87 8 1 5 5 4 95 0 4 5 4 79 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(538,311,l),
(538,437,l),
(39,437,l),
(39,311,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(677,260,l),
(677,336,l),
(97,336,l),
(97,260,l)
);
},
{
closed = 1;
nodes = (
(426,8,o),
(453,33,o),
(453,71,cs),
(453,108,o),
(426,133,o),
(388,133,cs),
(350,133,o),
(322,108,o),
(322,71,cs),
(322,33,o),
(350,8,o),
(388,8,cs)
);
},
{
closed = 1;
nodes = (
(426,464,o),
(453,489,o),
(453,527,cs),
(453,564,o),
(426,589,o),
(388,589,cs),
(350,589,o),
(322,564,o),
(322,527,cs),
(322,489,o),
(350,464,o),
(388,464,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
7 1 3 0 2 1 3 2 103 6 1 1 0 0 5 1 0 103 8 1 5 4 4 5 87 8 1 5 5 4 95 0 4 5 4 79 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(536,311,l),
(536,437,l),
(37,437,l),
(37,311,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(683,277,l),
(683,319,l),
(103,319,l),
(103,277,l)
);
},
{
closed = 1;
nodes = (
(422,25,o),
(441,43,o),
(441,71,cs),
(441,98,o),
(422,116,o),
(394,116,cs),
(366,116,o),
(346,98,o),
(346,71,cs),
(346,43,o),
(366,25,o),
(394,25,cs)
);
},
{
closed = 1;
nodes = (
(422,481,o),
(441,499,o),
(441,527,cs),
(441,554,o),
(422,572,o),
(394,572,cs),
(366,572,o),
(346,554,o),
(346,527,cs),
(346,499,o),
(366,481,o),
(394,481,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
7 1 3 0 2 1 3 2 103 6 1 1 0 0 5 1 0 103 8 1 5 4 4 5 87 8 1 5 5 4 95 0 4 5 4 79 8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 8 23 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
metricLeft = H;
metricRight = H;
note = divide;
unicode = 247;
userData = {
KernOnSpecialSpacing = {
L = math;
R = math;
};
};
},
{
glyphname = equal;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(654,124,l),
(654,254,l),
(74,254,l),
(74,124,l)
);
},
{
closed = 1;
nodes = (
(654,339,l),
(654,469,l),
(74,469,l),
(74,339,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
5 1 3 0 2 1 3 2 103 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(515,408,l),
(515,534,l),
(55,534,l),
(55,408,l)
);
},
{
closed = 1;
nodes = (
(515,213,l),
(515,339,l),
(55,339,l),
(55,213,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(677,151,l),
(677,227,l),
(97,227,l),
(97,151,l)
);
},
{
closed = 1;
nodes = (
(677,366,l),
(677,442,l),
(97,442,l),
(97,366,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
5 1 3 0 2 1 3 2 103 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(513,408,l),
(513,534,l),
(53,534,l),
(53,408,l)
);
},
{
closed = 1;
nodes = (
(513,213,l),
(513,339,l),
(53,339,l),
(53,213,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(683,168,l),
(683,210,l),
(103,210,l),
(103,168,l)
);
},
{
closed = 1;
nodes = (
(683,383,l),
(683,425,l),
(103,425,l),
(103,383,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 45 values pushed */
5 1 3 0 2 1 3 2 103 4 1 1 0 0 1 87 4 1 1 1 0 95 0 0 1 0 79 4 4 0 0 4 7 4 7 6 5 0 3 0 3 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
metricLeft = H;
metricRight = H;
note = equal;
unicode = 61;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = notequal;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(654,124,l),
(654,254,l),
(74,254,l),
(74,124,l)
);
},
{
closed = 1;
nodes = (
(654,339,l),
(654,469,l),
(74,469,l),
(74,339,l)
);
},
{
closed = 1;
nodes = (
(309,0,l),
(570,570,l),
(420,570,l),
(158,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 5 1 112 0 0 2 2 0 113 8 1 5 0 4 3 5 4 104 7 1 3 2 2 3 87 7 1 3 3 2 95 0 2 3 2 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 1 5 1 133 0 0 2 0 134 8 1 5 0 4 3 5 4 104 7 1 3 2 2 3 87 7 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(235,114,l),
(473,634,l),
(336,634,l),
(97,114,l)
);
},
{
closed = 1;
nodes = (
(515,213,l),
(515,339,l),
(55,339,l),
(55,213,l)
);
},
{
closed = 1;
nodes = (
(515,408,l),
(515,534,l),
(55,534,l),
(55,408,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(677,151,l),
(677,227,l),
(97,227,l),
(97,151,l)
);
},
{
closed = 1;
nodes = (
(677,366,l),
(677,442,l),
(97,442,l),
(97,366,l)
);
},
{
closed = 1;
nodes = (
(298,0,l),
(559,570,l),
(475,570,l),
(213,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 5 1 112 0 0 2 2 0 113 8 1 5 0 4 3 5 4 104 7 1 3 2 2 3 87 7 1 3 3 2 95 0 2 3 2 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 1 5 1 133 0 0 2 0 134 8 1 5 0 4 3 5 4 104 7 1 3 2 2 3 87 7 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 6 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(233,114,l),
(471,634,l),
(334,634,l),
(95,114,l)
);
},
{
closed = 1;
nodes = (
(513,213,l),
(513,339,l),
(53,339,l),
(53,213,l)
);
},
{
closed = 1;
nodes = (
(513,408,l),
(513,534,l),
(53,534,l),
(53,408,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(683,168,l),
(683,210,l),
(103,210,l),
(103,168,l)
);
},
{
closed = 1;
nodes = (
(683,383,l),
(683,425,l),
(103,425,l),
(103,383,l)
);
},
{
closed = 1;
nodes = (
(283,0,l),
(544,570,l),
(500,570,l),
(238,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 40 values pushed */
6 1 1 5 5 1 112 0 0 2 2 0 113 8 1 5 0 4 3 5 4 104 7 1 3 2 2 3 87 7 1 3 3 2 95 0 2 3 2 79 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 38 values pushed */
6 1 1 5 1 133 0 0 2 0 134 8 1 5 0 4 3 5 4 104 7 1 3 2 2 3 87 7 1 3 3 2 95 0 2 3 2 79 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 26 values pushed */
8 8 4 4 0 0 8 11 8 11 10 9 4 7 4 7 6 5 0 3 0 3 17 9 6 23 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
metricLeft = H;
metricRight = H;
note = notequal;
unicode = 8800;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = greater;
lastChange = "2025-03-02 13:31:06 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (728,0);
ref = less;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(312,290,l),
(312,458,l),
(-148,663,l),
(-148,512,l),
(187,374,l),
(-148,237,l),
(-148,85,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (728,0);
ref = less;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(358,290,l),
(358,458,l),
(-102,663,l),
(-102,512,l),
(233,374,l),
(-102,237,l),
(-102,85,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (728,0);
ref = less;
scale = (-1,1);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
4 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = greater;
unicode = 62;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = less;
lastChange = "2025-03-02 13:31:14 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(587,-4,l),
(587,156,l),
(264,334,l),
(587,508,l),
(587,668,l),
(140,399,l),
(140,263,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(571,237,l),
(236,374,l),
(571,512,l),
(571,663,l),
(111,458,l),
(111,290,l),
(571,85,l)
);
}
);
};
guides = (
{
angle = 149.0872;
pos = (599,40);
}
);
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(588,-4,l),
(588,88,l),
(168,333,l),
(588,577,l),
(588,668,l),
(97,373,l),
(97,289,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(569,237,l),
(234,374,l),
(569,512,l),
(569,663,l),
(109,458,l),
(109,290,l),
(569,85,l)
);
}
);
};
guides = (
{
angle = 149.0872;
pos = (597,40);
}
);
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(621,-4,l),
(621,46,l),
(140,332,l),
(621,619,l),
(621,668,l),
(103,356,l),
(103,306,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 4 values pushed */
3 0 1 50 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = less;
unicode = 60;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = greaterequal;
lastChange = "2025-03-02 13:31:49 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (728,0);
ref = lessequal;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 9 8 7 6 5 4 7 1 74 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(462,331,l),
(462,499,l),
(2,704,l),
(2,553,l),
(337,415,l),
(2,278,l),
(2,126,l)
);
},
{
closed = 1;
nodes = (
(462,-33,l),
(462,93,l),
(2,93,l),
(2,-33,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (728,0);
ref = lessequal;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 9 8 7 6 5 4 7 1 74 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(508,331,l),
(508,499,l),
(48,704,l),
(48,553,l),
(383,415,l),
(48,278,l),
(48,126,l)
);
},
{
closed = 1;
nodes = (
(508,-33,l),
(508,93,l),
(48,93,l),
(48,-33,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (728,0);
ref = lessequal;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 38 values pushed */
10 9 8 7 6 5 4 7 1 74 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 0 0 0 3 0 3 17 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = greaterequal;
unicode = 8805;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = lessequal;
lastChange = "2025-03-02 13:31:54 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(602,128,l),
(602,279,l),
(207,431,l),
(207,397,l),
(602,547,l),
(602,698,l),
(125,494,l),
(125,331,l)
);
},
{
closed = 1;
nodes = (
(602,-36,l),
(602,94,l),
(125,94,l),
(125,-36,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(515,278,l),
(180,415,l),
(515,553,l),
(515,704,l),
(55,499,l),
(55,331,l),
(515,127,l)
);
},
{
closed = 1;
nodes = (
(515,-33,l),
(515,93,l),
(55,93,l),
(55,-33,l)
);
}
);
};
guides = (
{
angle = 90;
pos = (80,29);
}
);
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(574,128,l),
(574,219,l),
(142,427,l),
(142,398,l),
(574,607,l),
(574,698,l),
(97,458,l),
(97,366,l)
);
},
{
closed = 1;
nodes = (
(574,-9,l),
(574,67,l),
(97,67,l),
(97,-9,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(513,278,l),
(178,415,l),
(513,553,l),
(513,704,l),
(53,499,l),
(53,331,l),
(513,127,l)
);
},
{
closed = 1;
nodes = (
(513,-33,l),
(513,93,l),
(53,93,l),
(53,-33,l)
);
}
);
};
guides = (
{
angle = 90;
pos = (78,29);
}
);
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(580,128,l),
(580,181,l),
(126,425,l),
(126,399,l),
(580,645,l),
(580,698,l),
(103,436,l),
(103,388,l)
);
},
{
closed = 1;
nodes = (
(580,8,l),
(580,50,l),
(103,50,l),
(103,8,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 37 values pushed */
6 5 4 3 2 1 0 7 0 74 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 7 7 7 10 7 10 24 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = lessequal;
unicode = 8804;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = plusminus;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(654,0,l),
(654,130,l),
(74,130,l),
(74,0,l)
);
},
{
closed = 1;
nodes = (
(654,393,l),
(654,523,l),
(74,523,l),
(74,393,l)
);
},
{
closed = 1;
nodes = (
(429,200,l),
(429,716,l),
(299,716,l),
(299,200,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 5 3 5 133 0 4 2 1 2 4 1 128 7 1 3 0 2 4 3 2 104 6 1 1 0 0 1 87 6 1 1 1 0 95 0 0 1 0 79 4 4 0 0 11 10 9 8 4 7 4 7 6 5 0 3 0 3 17 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(509,76,l),
(509,203,l),
(49,203,l),
(49,76,l)
);
},
{
closed = 1;
nodes = (
(509,422,l),
(509,548,l),
(49,548,l),
(49,422,l)
);
},
{
closed = 1;
nodes = (
(342,255,l),
(342,715,l),
(216,715,l),
(216,255,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(677,0,l),
(677,76,l),
(97,76,l),
(97,0,l)
);
},
{
closed = 1;
nodes = (
(677,420,l),
(677,496,l),
(97,496,l),
(97,420,l)
);
},
{
closed = 1;
nodes = (
(425,200,l),
(425,716,l),
(349,716,l),
(349,200,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 5 3 5 133 0 4 2 1 2 4 1 128 7 1 3 0 2 4 3 2 104 6 1 1 0 0 1 87 6 1 1 1 0 95 0 0 1 0 79 4 4 0 0 11 10 9 8 4 7 4 7 6 5 0 3 0 3 17 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 774;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(507,76,l),
(507,203,l),
(47,203,l),
(47,76,l)
);
},
{
closed = 1;
nodes = (
(507,422,l),
(507,548,l),
(47,548,l),
(47,422,l)
);
},
{
closed = 1;
nodes = (
(340,255,l),
(340,715,l),
(214,715,l),
(214,255,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(683,0,l),
(683,42,l),
(103,42,l),
(103,0,l)
);
},
{
closed = 1;
nodes = (
(683,437,l),
(683,479,l),
(103,479,l),
(103,437,l)
);
},
{
closed = 1;
nodes = (
(414,200,l),
(414,716,l),
(372,716,l),
(372,200,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 62 values pushed */
0 5 3 5 133 0 4 2 1 2 4 1 128 7 1 3 0 2 4 3 2 104 6 1 1 0 0 1 87 6 1 1 1 0 95 0 0 1 0 79 4 4 0 0 11 10 9 8 4 7 4 7 6 5 0 3 0 3 17 8 8 23 
CALL[ ]	/* CallFunction */";
};
width = 787;
}
);
metricLeft = H;
metricRight = H;
note = plusminus;
unicode = 177;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = approxequal;
lastChange = "2025-03-02 13:32:18 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (0,-130);
ref = asciitilde;
},
{
pos = (0,140);
ref = asciitilde;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
0 11 9 10 10 11 114 0 8 7 6 7 8 114 0 5 3 4 4 5 114 0 2 1 0 1 2 114 0 9 0 7 8 9 7 105 0 10 13 1 6 3 10 6 106 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 12 1 0 4 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 9 10 9 11 10 128 0 8 7 6 7 8 6 128 0 5 3 4 3 5 4 128 0 2 1 0 1 2 0 128 0 9 0 7 8 9 7 105 0 10 13 1 6 3 10 6 106 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 12 1 0 4 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
29 28 1 0 52 51 49 47 43 41 38 37 35 33 28 55 29 55 24 23 21 19 15 13 10 9 7 5 0 27 1 27 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(547,401,o),
(624,489,o),
(618,625,c),
(484,625,l),
(489,572,o),
(472,541,o),
(441,541,cs),
(424,541,o),
(410,551,o),
(379,575,cs),
(327,616,o),
(286,643,o),
(223,643,cs),
(120,643,o),
(44,557,o),
(50,419,c),
(183,419,l),
(179,472,o),
(195,504,o),
(227,504,cs),
(244,504,o),
(258,493,o),
(289,469,cs),
(341,428,o),
(382,401,o),
(445,401,cs)
);
},
{
closed = 1;
nodes = (
(547,134,o),
(624,222,o),
(618,358,c),
(484,358,l),
(489,305,o),
(472,274,o),
(441,274,cs),
(424,274,o),
(410,284,o),
(379,308,cs),
(327,349,o),
(286,376,o),
(223,376,cs),
(120,376,o),
(44,290,o),
(50,152,c),
(183,152,l),
(179,205,o),
(195,237,o),
(227,237,cs),
(244,237,o),
(258,226,o),
(289,202,cs),
(341,161,o),
(382,134,o),
(445,134,cs)
);
}
);
};
layerId = m003;
shapes = (
{
pos = (1,-130);
ref = asciitilde;
},
{
pos = (1,140);
ref = asciitilde;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
0 11 9 10 10 11 114 0 8 7 6 7 8 114 0 5 3 4 4 5 114 0 2 1 0 1 2 114 0 9 0 7 8 9 7 105 0 10 13 1 6 3 10 6 106 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 12 1 0 4 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 9 10 9 11 10 128 0 8 7 6 7 8 6 128 0 5 3 4 3 5 4 128 0 2 1 0 1 2 0 128 0 9 0 7 8 9 7 105 0 10 13 1 6 3 10 6 106 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 12 1 0 4 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
29 28 1 0 52 51 49 47 43 41 38 37 35 33 28 55 29 55 24 23 21 19 15 13 10 9 7 5 0 27 1 27 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(546,401,o),
(623,489,o),
(617,625,c),
(483,625,l),
(488,572,o),
(471,541,o),
(440,541,cs),
(423,541,o),
(409,551,o),
(378,575,cs),
(326,616,o),
(285,643,o),
(222,643,cs),
(119,643,o),
(43,557,o),
(49,419,c),
(182,419,l),
(178,472,o),
(194,504,o),
(226,504,cs),
(243,504,o),
(257,493,o),
(288,469,cs),
(340,428,o),
(381,401,o),
(444,401,cs)
);
},
{
closed = 1;
nodes = (
(546,134,o),
(623,222,o),
(617,358,c),
(483,358,l),
(488,305,o),
(471,274,o),
(440,274,cs),
(423,274,o),
(409,284,o),
(378,308,cs),
(326,349,o),
(285,376,o),
(222,376,cs),
(119,376,o),
(43,290,o),
(49,152,c),
(182,152,l),
(178,205,o),
(194,237,o),
(226,237,cs),
(243,237,o),
(257,226,o),
(288,202,cs),
(340,161,o),
(381,134,o),
(444,134,cs)
);
}
);
};
layerId = m004;
shapes = (
{
pos = (0,-130);
ref = asciitilde;
},
{
pos = (0,140);
ref = asciitilde;
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 70 values pushed */
0 11 9 10 10 11 114 0 8 7 6 7 8 114 0 5 3 4 4 5 114 0 2 1 0 1 2 114 0 9 0 7 8 9 7 105 0 10 13 1 6 3 10 6 106 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 12 1 0 4 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 74 values pushed */
0 11 9 10 9 11 10 128 0 8 7 6 7 8 6 128 0 5 3 4 3 5 4 128 0 2 1 0 1 2 0 128 0 9 0 7 8 9 7 105 0 10 13 1 6 3 10 6 106 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 12 1 0 4 0 82 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 35 values pushed */
29 28 1 0 52 51 49 47 43 41 38 37 35 33 28 55 29 55 24 23 21 19 15 13 10 9 7 5 0 27 1 27 14 6 22 
CALL[ ]	/* CallFunction */";
};
width = 728;
}
);
note = approxequal;
unicode = 8776;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = asciitilde;
lastChange = "2025-03-02 13:32:13 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(557,168,o),
(639,225,o),
(639,323,cs),
(639,389,l),
(505,389,l),
(505,356,ls),
(505,314,o),
(492,304,o),
(470,304,cs),
(403,304,o),
(384,402,o),
(256,402,cs),
(173,402,o),
(90,360,o),
(90,242,cs),
(90,176,l),
(223,176,l),
(223,214,ls),
(223,263,o),
(238,270,o),
(256,270,cs),
(324,270,o),
(355,168,o),
(471,168,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 1 0 4 89 5 1 3 0 1 0 3 1 105 0 4 4 0 98 2 6 2 0 4 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 3 4 4 5 114 0 2 1 0 1 2 114 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 6 1 0 4 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 3 4 3 5 4 128 0 2 1 0 1 2 0 128 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 6 1 0 4 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 24 23 21 19 15 13 10 9 7 5 0 27 1 27 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 728;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(551,243,o),
(628,331,o),
(622,467,c),
(488,467,l),
(493,414,o),
(476,383,o),
(445,383,cs),
(428,383,o),
(414,393,o),
(383,417,cs),
(331,458,o),
(290,485,o),
(227,485,cs),
(124,485,o),
(48,399,o),
(54,261,c),
(187,261,l),
(183,314,o),
(199,346,o),
(231,346,cs),
(248,346,o),
(262,335,o),
(293,311,cs),
(345,270,o),
(386,243,o),
(449,243,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(581,168,o),
(646,237,o),
(646,344,cs),
(646,389,l),
(570,389,l),
(570,356,ls),
(570,285,o),
(540,244,o),
(495,244,cs),
(404,244,o),
(376,402,o),
(244,402,cs),
(162,402,o),
(97,341,o),
(97,225,cs),
(97,176,l),
(173,176,l),
(173,214,ls),
(173,289,o),
(202,328,o),
(244,328,cs),
(333,328,o),
(367,168,o),
(495,168,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 1 0 4 89 5 1 3 0 1 0 3 1 105 0 4 4 0 98 2 6 2 0 4 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 3 4 4 5 114 0 2 1 0 1 2 114 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 6 1 0 4 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 3 4 3 5 4 128 0 2 1 0 1 2 0 128 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 6 1 0 4 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 24 23 21 19 15 13 10 9 7 5 0 27 1 27 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 743;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(535,243,o),
(612,331,o),
(606,467,c),
(472,467,l),
(477,414,o),
(460,383,o),
(429,383,cs),
(412,383,o),
(398,393,o),
(367,417,cs),
(315,458,o),
(274,485,o),
(211,485,cs),
(108,485,o),
(32,399,o),
(38,261,c),
(171,261,l),
(167,314,o),
(183,346,o),
(215,346,cs),
(232,346,o),
(246,335,o),
(277,311,cs),
(329,270,o),
(370,243,o),
(433,243,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(597,168,o),
(652,244,o),
(652,357,cs),
(652,389,l),
(612,389,l),
(612,356,ls),
(612,268,o),
(572,206,o),
(512,206,cs),
(406,206,o),
(372,402,o),
(238,402,cs),
(156,402,o),
(103,329,o),
(103,214,cs),
(103,176,l),
(144,176,l),
(144,214,ls),
(144,305,o),
(181,364,o),
(238,364,cs),
(341,364,o),
(376,168,o),
(512,168,cs)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
13 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 27 values pushed */
0 4 1 0 4 89 5 1 3 0 1 0 3 1 105 0 4 4 0 98 2 6 2 0 4 0 82 
ELSE[ ]	/* Else */
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
15 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 39 values pushed */
0 5 3 4 4 5 114 0 2 1 0 1 2 114 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 6 1 0 4 0 82 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 41 values pushed */
0 5 3 4 3 5 4 128 0 2 1 0 1 2 0 128 0 4 1 0 4 89 0 3 0 1 2 3 1 105 0 4 4 0 98 6 1 0 4 0 82 
EIF[ ]	/* EndIf */
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
1 0 24 23 21 19 15 13 10 9 7 5 0 27 1 27 7 8 22 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 756;
}
);
note = asciitilde;
unicode = 126;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = asciicircum;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(170,376,l),
(309,700,l),
(240,700,l),
(378,376,l),
(526,376,l),
(374,751,l),
(176,751,l),
(24,376,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 549;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(153,377,l),
(254,623,l),
(356,377,l),
(503,377,l),
(338,748,l),
(170,748,l),
(5,377,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(153,376,l),
(292,706,l),
(266,706,l),
(404,376,l),
(488,376,l),
(336,751,l),
(223,751,l),
(71,376,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 558;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(153,377,l),
(254,623,l),
(356,377,l),
(503,377,l),
(338,748,l),
(170,748,l),
(5,377,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(141,376,l),
(280,710,l),
(280,710,l),
(418,376,l),
(463,376,l),
(311,751,l),
(250,751,l),
(98,376,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 2 values pushed */
6 100 
WCVTP[ ]	/* WriteCVTInPixels */
NPUSHB[ ]	/* 22 values pushed */
2 1 0 2 1 76 0 2 0 2 133 1 1 0 0 118 17 18 16 3 8 25 
CALL[ ]	/* CallFunction */
PUSHB[ ]	/* 2 values pushed */
6 0 
WCVTP[ ]	/* WriteCVTInPixels */";
};
width = 560;
}
);
note = asciicircum;
unicode = 94;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = percent;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(319,0,l),
(774,748,l),
(643,748,l),
(189,0,l)
);
},
{
closed = 1;
nodes = (
(347,354,o),
(429,437,o),
(429,556,cs),
(429,677,o),
(347,762,o),
(230,762,cs),
(114,762,o),
(32,677,o),
(32,556,cs),
(32,437,o),
(114,354,o),
(230,354,cs)
);
},
{
closed = 1;
nodes = (
(183,459,o),
(154,496,o),
(154,556,cs),
(154,618,o),
(183,657,o),
(230,657,cs),
(277,657,o),
(307,618,o),
(307,556,cs),
(307,496,o),
(277,459,o),
(230,459,cs)
);
},
{
closed = 1;
nodes = (
(862,-14,o),
(944,69,o),
(944,188,cs),
(944,309,o),
(862,394,o),
(745,394,cs),
(629,394,o),
(547,309,o),
(547,188,cs),
(547,69,o),
(629,-14,o),
(745,-14,cs)
);
},
{
closed = 1;
nodes = (
(698,91,o),
(669,128,o),
(669,188,cs),
(669,250,o),
(698,289,o),
(745,289,cs),
(792,289,o),
(822,250,o),
(822,188,cs),
(822,128,o),
(792,91,o),
(745,91,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
2 1 4 6 1 76 3 1 1 74 1 1 4 73 9 1 2 8 1 0 7 2 0 105 0 5 0 7 6 5 7 105 0 3 3 1 97 0 1 1 46 77 11 1 6 6 4 97 10 1 4 4 47 4 78 49 48 33 32 21 20 5 4 55 53 48 59 49 59 41 39 32 47 33 47 27 25 20 31 21 31 13 11 4 19 5 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 976;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(857,-14,o),
(939,69,o),
(939,188,cs),
(939,309,o),
(857,394,o),
(740,394,cs),
(624,394,o),
(542,309,o),
(542,188,cs),
(542,69,o),
(624,-14,o),
(740,-14,cs)
);
},
{
closed = 1;
nodes = (
(693,91,o),
(664,128,o),
(664,188,cs),
(664,250,o),
(693,289,o),
(740,289,cs),
(787,289,o),
(817,250,o),
(817,188,cs),
(817,128,o),
(787,91,o),
(740,91,cs)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(308,0,l),
(763,748,l),
(686,748,l),
(232,0,l)
);
},
{
closed = 1;
nodes = (
(364,354,o),
(445,436,o),
(445,556,cs),
(445,678,o),
(364,762,o),
(246,762,cs),
(129,762,o),
(48,678,o),
(48,556,cs),
(48,436,o),
(129,354,o),
(246,354,cs)
);
},
{
closed = 1;
nodes = (
(172,416,o),
(122,472,o),
(122,556,cs),
(122,642,o),
(172,700,o),
(246,700,cs),
(321,700,o),
(371,642,o),
(371,556,cs),
(371,472,o),
(321,416,o),
(246,416,cs)
);
},
{
closed = 1;
nodes = (
(879,-13,o),
(961,69,o),
(961,189,cs),
(961,311,o),
(879,395,o),
(762,395,cs),
(645,395,o),
(564,310,o),
(564,189,cs),
(564,70,o),
(645,-13,o),
(762,-13,cs)
);
},
{
closed = 1;
nodes = (
(688,50,o),
(638,106,o),
(638,189,cs),
(638,275,o),
(688,333,o),
(762,333,cs),
(837,333,o),
(887,273,o),
(887,189,cs),
(887,107,o),
(837,50,o),
(762,50,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
2 1 4 6 1 76 3 1 1 74 1 1 4 73 9 1 2 8 1 0 7 2 0 105 0 5 0 7 6 5 7 105 0 3 3 1 97 0 1 1 46 77 11 1 6 6 4 97 10 1 4 4 47 4 78 49 48 33 32 21 20 5 4 55 53 48 59 49 59 41 39 32 47 33 47 27 25 20 31 21 31 13 11 4 19 5 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 1008;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(858,-14,o),
(940,69,o),
(940,188,cs),
(940,309,o),
(858,394,o),
(741,394,cs),
(625,394,o),
(543,309,o),
(543,188,cs),
(543,69,o),
(625,-14,o),
(741,-14,cs)
);
},
{
closed = 1;
nodes = (
(694,91,o),
(665,128,o),
(665,188,cs),
(665,250,o),
(694,289,o),
(741,289,cs),
(788,289,o),
(818,250,o),
(818,188,cs),
(818,128,o),
(788,91,o),
(741,91,cs)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(296,0,l),
(751,748,l),
(708,748,l),
(254,0,l)
);
},
{
closed = 1;
nodes = (
(369,354,o),
(450,436,o),
(450,556,cs),
(450,678,o),
(369,762,o),
(251,762,cs),
(134,762,o),
(53,678,o),
(53,556,cs),
(53,436,o),
(134,354,o),
(251,354,cs)
);
},
{
closed = 1;
nodes = (
(160,390,o),
(97,458,o),
(97,556,cs),
(97,656,o),
(160,726,o),
(251,726,cs),
(343,726,o),
(407,656,o),
(407,556,cs),
(407,458,o),
(343,390,o),
(251,390,cs)
);
},
{
closed = 1;
nodes = (
(885,-12,o),
(966,70,o),
(966,190,cs),
(966,312,o),
(885,396,o),
(767,396,cs),
(650,396,o),
(569,312,o),
(569,190,cs),
(569,70,o),
(650,-12,o),
(767,-12,cs)
);
},
{
closed = 1;
nodes = (
(676,24,o),
(613,92,o),
(613,190,cs),
(613,290,o),
(676,360,o),
(767,360,cs),
(860,360,o),
(923,290,o),
(923,190,cs),
(923,92,o),
(860,24,o),
(767,24,cs)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 90 values pushed */
2 1 4 6 1 76 3 1 1 74 1 1 4 73 9 1 2 8 1 0 7 2 0 105 0 5 0 7 6 5 7 105 0 3 3 1 97 0 1 1 46 77 11 1 6 6 4 97 10 1 4 4 47 4 78 49 48 33 32 21 20 5 4 55 53 48 59 49 59 41 39 32 47 33 47 27 25 20 31 21 31 13 11 4 19 5 19 12 8 22 
CALL[ ]	/* CallFunction */";
};
width = 1019;
}
);
metricLeft = o;
metricRight = o;
note = percent;
unicode = 37;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = perthousand;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (980,-367);
ref = degree;
},
{
ref = percent;
}
);
width = 1463;
}
);
metricLeft = o;
metricRight = o;
note = perthousand;
unicode = 8240;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = grave;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = gravecomb;
}
);
width = 376;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
ref = gravecomb;
}
);
width = 311;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
ref = gravecomb;
}
);
width = 376;
}
);
unicode = 96;
},
{
glyphname = acute;
lastChange = "2025-03-02 13:03:43 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (109,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(179,810,l),
(303,963,l),
(128,963,l),
(47,810,l)
);
}
);
width = 343;
}
);
unicode = 180;
},
{
glyphname = circumflex;
lastChange = "2025-03-02 12:55:56 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (224,750);
},
{
name = top;
pos = (224,940);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(161,810,l),
(257,914,l),
(191,914,l),
(286,810,l),
(411,810,l),
(366,869,ls),
(324,924,o),
(303,963,o),
(223,963,cs),
(142,963,o),
(123,924,o),
(81,868,cs),
(37,810,l)
);
}
);
width = 438;
}
);
unicode = 710;
},
{
glyphname = breve;
lastChange = "2025-03-02 13:32:31 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (213,750);
},
{
name = top;
pos = (213,938);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(319,800,o),
(386,863,o),
(386,963,c),
(267,963,l),
(267,920,o),
(245,890,o),
(213,890,cs),
(183,890,o),
(161,920,o),
(161,963,c),
(40,963,l),
(40,863,o),
(107,800,o),
(213,800,cs)
);
}
);
width = 426;
}
);
unicode = 728;
},
{
glyphname = ring;
lastChange = "2025-03-02 13:06:23 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (232,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(294,802,o),
(345,847,o),
(345,910,cs),
(345,974,o),
(294,1019,o),
(232,1019,cs),
(170,1019,o),
(119,974,o),
(119,910,cs),
(119,847,o),
(170,802,o),
(232,802,cs)
);
},
{
closed = 1;
nodes = (
(213,875,o),
(198,891,o),
(198,910,cs),
(198,930,o),
(213,944,o),
(232,944,cs),
(251,944,o),
(266,930,o),
(266,910,cs),
(266,891,o),
(251,875,o),
(232,875,cs)
);
}
);
width = 464;
}
);
unicode = 730;
},
{
glyphname = tilde;
lastChange = "2025-03-02 12:56:46 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (253,750);
},
{
name = top;
pos = (253,966);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(379,805,o),
(426,841,o),
(426,921,cs),
(426,958,l),
(320,958,l),
(320,938,ls),
(320,918,o),
(313,912,o),
(302,912,cs),
(273,912,o),
(255,966,o),
(188,966,cs),
(127,966,o),
(80,935,o),
(80,850,cs),
(80,810,l),
(185,810,l),
(185,833,ls),
(185,857,o),
(194,861,o),
(203,861,cs),
(232,861,o),
(255,805,o),
(319,805,cs)
);
}
);
width = 506;
}
);
unicode = 732;
},
{
glyphname = Abreveacute;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (160,0);
ref = brevecomb_acutecomb;
}
);
width = 745;
}
);
unicode = 7854;
},
{
glyphname = Abrevedotbelow;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Abreve;
},
{
pos = (226,0);
ref = dotbelowcomb;
}
);
width = 745;
}
);
unicode = 7862;
},
{
glyphname = Abrevegrave;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (160,0);
ref = brevecomb_gravecomb;
}
);
width = 745;
}
);
unicode = 7856;
},
{
glyphname = Abrevehookabove;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (160,0);
ref = brevecomb_hookabovecomb;
}
);
width = 745;
}
);
unicode = 7858;
},
{
glyphname = Abrevetilde;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (160,0);
ref = brevecomb_tildecomb;
}
);
width = 745;
}
);
unicode = 7860;
},
{
glyphname = Acircumflexacute;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (149,0);
ref = circumflexcomb_acutecomb;
}
);
width = 745;
}
);
unicode = 7844;
},
{
glyphname = Acircumflexdotbelow;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Acircumflex;
},
{
pos = (226,0);
ref = dotbelowcomb;
}
);
width = 745;
}
);
unicode = 7852;
},
{
glyphname = Acircumflexgrave;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (149,0);
ref = circumflexcomb_gravecomb;
}
);
width = 745;
}
);
unicode = 7846;
},
{
glyphname = Acircumflexhookabove;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (149,0);
ref = circumflexcomb_hookabovecomb;
}
);
width = 745;
}
);
unicode = 7848;
},
{
glyphname = Acircumflextilde;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (149,0);
ref = circumflexcomb_tildecomb;
}
);
width = 745;
}
);
unicode = 7850;
},
{
glyphname = Adieresis;
lastChange = "2025-03-02 12:50:48 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (49,0);
ref = dieresis;
}
);
width = 745;
}
);
unicode = 196;
},
{
glyphname = Adotbelow;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (226,0);
ref = dotbelowcomb;
}
);
width = 745;
}
);
unicode = 7840;
},
{
glyphname = Ahookabove;
kernLeft = KO_A;
kernRight = KO_A;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (195,0);
ref = hookabovecomb;
}
);
width = 745;
}
);
unicode = 7842;
},
{
glyphname = Amacron;
lastChange = "2025-03-02 12:51:03 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (117,0);
ref = macron;
}
);
width = 745;
}
);
unicode = 256;
},
{
glyphname = Aogonek;
lastChange = "2025-03-02 13:23:03 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (406,0);
ref = ogonekcomb;
}
);
width = 745;
}
);
unicode = 260;
},
{
glyphname = Aring;
lastChange = "2025-03-02 12:52:12 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = A;
},
{
pos = (141,0);
ref = ring;
}
);
width = 745;
}
);
unicode = 197;
},
{
glyphname = AE;
lastChange = "2025-03-02 12:33:47 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(208,0,l),
(262,119,l),
(470,119,l),
(470,0,l),
(985,0,l),
(985,151,l),
(649,151,l),
(649,313,l),
(964,313,l),
(964,458,l),
(649,458,l),
(649,599,l),
(985,599,l),
(985,750,l),
(518,750,ls),
(392,750,o),
(338,688,o),
(284,572,cs),
(11,0,l)
);
},
{
closed = 1;
nodes = (
(470,584,l),
(470,276,l),
(331,276,l)
);
}
);
width = 1034;
}
);
metricLeft = A;
metricRight = E;
unicode = 198;
},
{
glyphname = Cacute;
lastChange = "2025-03-02 13:23:37 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = C;
},
{
pos = (290,0);
ref = acutecomb;
}
);
width = 763;
}
);
unicode = 262;
},
{
glyphname = Ccaron;
lastChange = "2025-03-02 13:23:48 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = C;
},
{
pos = (112,0);
ref = caroncomb;
}
);
width = 763;
}
);
unicode = 268;
},
{
glyphname = Ccedilla;
lastChange = "2025-03-02 12:52:55 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = C;
},
{
pos = (188,0);
ref = cedilla;
}
);
width = 763;
}
);
unicode = 199;
},
{
glyphname = Cdotaccent;
lastChange = "2025-03-02 13:34:33 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = C;
},
{
pos = (195,0);
ref = dotaccentcomb;
}
);
width = 763;
}
);
unicode = 266;
},
{
glyphname = Dcaron;
lastChange = "2025-03-02 13:24:19 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = D;
},
{
pos = (67,0);
ref = caroncomb;
}
);
width = 767;
}
);
unicode = 270;
},
{
glyphname = Eth;
lastChange = "2025-03-02 12:33:47 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Dcroat;
}
);
width = 769;
}
);
unicode = 208;
},
{
glyphname = Ecaron;
lastChange = "2025-03-02 13:24:46 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (53,0);
ref = caroncomb;
}
);
width = 633;
}
);
unicode = 282;
},
{
glyphname = Ecircumflexacute;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (116,0);
ref = circumflexcomb_acutecomb;
}
);
width = 633;
}
);
unicode = 7870;
},
{
glyphname = Ecircumflexdotbelow;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ecircumflex;
},
{
pos = (193,0);
ref = dotbelowcomb;
}
);
width = 633;
}
);
unicode = 7878;
},
{
glyphname = Ecircumflexgrave;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (116,0);
ref = circumflexcomb_gravecomb;
}
);
width = 633;
}
);
unicode = 7872;
},
{
glyphname = Ecircumflexhookabove;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (116,0);
ref = circumflexcomb_hookabovecomb;
}
);
width = 633;
}
);
unicode = 7874;
},
{
glyphname = Ecircumflextilde;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (116,0);
ref = circumflexcomb_tildecomb;
}
);
width = 633;
}
);
unicode = 7876;
},
{
glyphname = Edieresis;
lastChange = "2025-03-02 13:24:36 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (16,0);
ref = dieresis;
}
);
width = 633;
}
);
unicode = 203;
},
{
glyphname = Edotaccent;
lastChange = "2025-03-02 13:24:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (136,0);
ref = dotaccentcomb;
}
);
width = 633;
}
);
unicode = 278;
},
{
glyphname = Edotbelow;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (193,0);
ref = dotbelowcomb;
}
);
width = 633;
}
);
unicode = 7864;
},
{
glyphname = Ehookabove;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (162,0);
ref = hookabovecomb;
}
);
width = 633;
}
);
unicode = 7866;
},
{
glyphname = Emacron;
lastChange = "2025-03-02 13:24:59 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (84,0);
ref = macroncomb;
}
);
width = 633;
}
);
unicode = 274;
},
{
glyphname = Eogonek;
lastChange = "2025-03-02 13:25:06 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (256,0);
ref = ogonekcomb;
}
);
width = 633;
}
);
unicode = 280;
},
{
glyphname = Etilde;
kernLeft = KO_E;
kernRight = KO_E;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = E;
},
{
pos = (87,0);
ref = tildecomb;
}
);
width = 633;
}
);
unicode = 7868;
},
{
glyphname = Gbreve;
lastChange = "2025-03-02 13:34:42 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = G;
},
{
pos = (184,0);
ref = brevecomb;
}
);
width = 774;
}
);
unicode = 286;
},
{
glyphname = Gcommaaccent;
lastChange = "2025-03-02 13:25:36 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = G;
},
{
pos = (264,-90);
ref = commaaccentcomb;
}
);
width = 774;
}
);
unicode = 290;
},
{
glyphname = Gdotaccent;
lastChange = "2025-03-02 13:34:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = G;
},
{
pos = (193,0);
ref = dotaccentcomb;
}
);
width = 774;
}
);
unicode = 288;
},
{
glyphname = Hbar;
lastChange = "2025-09-12 13:00:08 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = H;
},
{
closed = 1;
nodes = (
(777,537,l),
(777,675,l),
(-12,675,l),
(-12,537,l)
);
}
);
width = 765;
}
);
unicode = 294;
},
{
glyphname = Icircumflex;
lastChange = "2025-03-02 12:56:01 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-61,0);
ref = circumflex;
}
);
width = 325;
}
);
unicode = 206;
},
{
glyphname = Idieresis;
lastChange = "2025-03-02 12:56:05 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-161,0);
ref = dieresis;
}
);
width = 325;
}
);
unicode = 207;
},
{
glyphname = Idotaccent;
lastChange = "2025-03-02 13:35:32 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-41,0);
ref = dotaccentcomb;
}
);
width = 325;
}
);
unicode = 304;
},
{
glyphname = Idotbelow;
kernLeft = KO_H;
kernRight = KO_H;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (16,0);
ref = dotbelowcomb;
}
);
width = 325;
}
);
unicode = 7882;
},
{
glyphname = Ihookabove;
kernLeft = KO_H;
kernRight = KO_H;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-15,0);
ref = hookabovecomb;
}
);
width = 325;
}
);
unicode = 7880;
},
{
glyphname = Imacron;
lastChange = "2025-03-02 13:25:49 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-93,0);
ref = macroncomb;
}
);
width = 325;
}
);
unicode = 298;
},
{
glyphname = Iogonek;
lastChange = "2025-03-02 13:26:01 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = I;
},
{
pos = (-77,0);
ref = ogonekcomb;
}
);
width = 325;
}
);
unicode = 302;
},
{
glyphname = Kcommaaccent;
lastChange = "2025-03-02 13:37:47 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = K;
},
{
pos = (227,-90);
ref = commaaccentcomb;
}
);
width = 719;
}
);
unicode = 310;
},
{
glyphname = Lacute;
lastChange = "2025-03-02 13:37:59 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = L;
},
{
pos = (194,0);
ref = acutecomb;
}
);
width = 606;
}
);
unicode = 313;
},
{
glyphname = Lcaron;
lastChange = "2025-09-12 12:59:09 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = L;
},
{
closed = 1;
nodes = (
(367,536,l),
(500,518,l),
(539,750,l),
(397,768,l)
);
}
);
width = 606;
}
);
unicode = 317;
},
{
glyphname = Lcommaaccent;
lastChange = "2025-03-02 13:38:16 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = L;
},
{
pos = (170,-90);
ref = commaaccentcomb;
}
);
width = 606;
}
);
unicode = 315;
},
{
glyphname = Lslash;
lastChange = "2025-03-02 13:38:40 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(373,391,l),
(337,528,l),
(-13,434,l),
(23,297,l)
);
},
{
ref = L;
}
);
width = 600;
}
);
unicode = 321;
},
{
glyphname = Nacute;
lastChange = "2025-03-02 13:38:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = N;
},
{
pos = (278,0);
ref = acutecomb;
}
);
width = 774;
}
);
unicode = 323;
},
{
glyphname = Ncaron;
lastChange = "2025-03-02 13:38:56 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = N;
},
{
pos = (100,0);
ref = caroncomb;
}
);
width = 774;
}
);
unicode = 327;
},
{
glyphname = Ncommaaccent;
lastChange = "2025-03-02 13:39:03 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = N;
},
{
pos = (254,-90);
ref = commaaccentcomb;
}
);
width = 774;
}
);
unicode = 325;
},
{
glyphname = Ntilde;
lastChange = "2025-03-02 12:56:56 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = N;
},
{
pos = (134,0);
ref = tilde;
}
);
width = 774;
}
);
unicode = 209;
},
{
glyphname = Ocircumflexacute;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (176,0);
ref = circumflexcomb_acutecomb;
}
);
width = 800;
}
);
unicode = 7888;
},
{
glyphname = Ocircumflexdotbelow;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ocircumflex;
},
{
pos = (253,0);
ref = dotbelowcomb;
}
);
width = 800;
}
);
unicode = 7896;
},
{
glyphname = Ocircumflexgrave;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (176,0);
ref = circumflexcomb_gravecomb;
}
);
width = 800;
}
);
unicode = 7890;
},
{
glyphname = Ocircumflexhookabove;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (176,0);
ref = circumflexcomb_hookabovecomb;
}
);
width = 800;
}
);
unicode = 7892;
},
{
glyphname = Ocircumflextilde;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (176,0);
ref = circumflexcomb_tildecomb;
}
);
width = 800;
}
);
unicode = 7894;
},
{
glyphname = Odieresis;
lastChange = "2025-03-02 17:24:01 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (76,0);
ref = dieresis;
}
);
width = 800;
}
);
unicode = 214;
},
{
glyphname = Odotbelow;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (253,0);
ref = dotbelowcomb;
}
);
width = 800;
}
);
unicode = 7884;
},
{
glyphname = Ohookabove;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (222,0);
ref = hookabovecomb;
}
);
width = 800;
}
);
unicode = 7886;
},
{
glyphname = Ohornacute;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ohorn;
},
{
pos = (283,0);
ref = acutecomb;
}
);
width = 784;
}
);
unicode = 7898;
},
{
glyphname = Ohorndotbelow;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ohorn;
},
{
pos = (245,0);
ref = dotbelowcomb;
}
);
width = 784;
}
);
unicode = 7906;
},
{
glyphname = Ohorngrave;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ohorn;
},
{
pos = (159,0);
ref = gravecomb;
}
);
width = 784;
}
);
unicode = 7900;
},
{
glyphname = Ohornhookabove;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ohorn;
},
{
pos = (214,0);
ref = hookabovecomb;
}
);
width = 784;
}
);
unicode = 7902;
},
{
glyphname = Ohorntilde;
kernLeft = KO_O;
kernRight = KO_O;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Ohorn;
},
{
pos = (139,0);
ref = tildecomb;
}
);
width = 784;
}
);
unicode = 7904;
},
{
glyphname = Ohungarumlaut;
lastChange = "2025-03-02 17:24:08 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = O;
},
{
pos = (121,0);
ref = hungarumlautcomb;
}
);
width = 800;
}
);
unicode = 336;
},
{
glyphname = Oslash;
lastChange = "2025-03-02 12:58:19 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(735,693,l),
(613,780,l),
(66,58,l),
(186,-31,l)
);
},
{
ref = O;
}
);
width = 800;
}
);
metricLeft = O;
metricRight = O;
unicode = 216;
},
{
glyphname = OE;
lastChange = "2025-03-02 12:33:47 +0000";
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(1096,752,l),
(674,752,l),
(674,657,l),
(611,723,o),
(524,765,o),
(414,765,cs),
(193,765,o),
(29,592,o),
(29,377,cs),
(29,162,o),
(192,-12,o),
(414,-12,cs),
(524,-12,o),
(613,29,o),
(674,94,c),
(674,1,l),
(1096,1,l),
(1096,173,l),
(824,173,l),
(824,297,l),
(1078,297,l),
(1078,466,l),
(824,466,l),
(824,580,l),
(1096,580,l)
);
},
{
closed = 1;
nodes = (
(316,167,o),
(229,257,o),
(229,377,cs),
(229,497,o),
(316,586,o),
(439,586,cs),
(555,586,o),
(641,495,o),
(641,377,cs),
(641,258,o),
(555,167,o),
(439,167,cs)
);
}
);
};
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(477,-15,o),
(543,4,o),
(598,59,c),
(574,70,l),
(574,0,l),
(1084,0,l),
(1084,151,l),
(748,151,l),
(748,291,l),
(751,313,l),
(1063,313,l),
(1063,458,l),
(748,458,l),
(748,599,l),
(1084,599,l),
(1084,750,l),
(574,750,l),
(574,680,l),
(598,691,l),
(544,746,o),
(477,765,o),
(400,765,cs),
(183,765,o),
(46,614,o),
(46,374,cs),
(46,135,o),
(183,-15,o),
(400,-15,cs)
);
},
{
closed = 1;
nodes = (
(293,140,o),
(226,230,o),
(226,374,cs),
(226,519,o),
(293,610,o),
(400,610,cs),
(507,610,o),
(574,519,o),
(574,374,cs),
(574,230,o),
(507,140,o),
(400,140,cs)
);
}
);
width = 1133;
}
);
metricLeft = O;
metricRight = E;
unicode = 338;
},
{
glyphname = Thorn;
lastChange = "2025-03-02 12:58:56 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(248,0,l),
(248,142,l),
(345,142,ls),
(484,142,o),
(586,251,o),
(586,380,cs),
(586,508,o),
(498,618,o),
(350,618,cs),
(248,618,l),
(248,750,l),
(61,750,l),
(61,0,l)
);
},
{
closed = 1;
nodes = (
(248,446,l),
(339,446,ls),
(383,446,o),
(410,419,o),
(410,381,cs),
(410,344,o),
(383,313,o),
(339,313,cs),
(248,313,l)
);
}
);
width = 618;
}
);
metricLeft = l;
metricRight = b;
unicode = 222;
},
{
glyphname = Racute;
lastChange = "2025-03-02 17:24:39 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = R;
},
{
pos = (235,0);
ref = acutecomb;
}
);
width = 708;
}
);
unicode = 340;
},
{
glyphname = Rcaron;
lastChange = "2025-03-02 17:24:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = R;
},
{
pos = (57,0);
ref = caroncomb;
}
);
width = 708;
}
);
unicode = 344;
},
{
glyphname = Sacute;
lastChange = "2025-03-02 17:25:02 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = S;
},
{
pos = (237,0);
ref = acutecomb;
}
);
width = 691;
}
);
unicode = 346;
},
{
glyphname = Scaron;
lastChange = "2025-03-02 17:25:11 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = S;
},
{
pos = (59,0);
ref = caroncomb;
}
);
width = 691;
}
);
unicode = 352;
},
{
glyphname = Scedilla;
lastChange = "2025-03-02 17:25:18 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = S;
},
{
pos = (135,0);
ref = cedillacomb;
}
);
width = 691;
}
);
unicode = 350;
},
{
glyphname = Scommaaccent;
lastChange = "2025-03-02 17:36:19 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = S;
},
{
pos = (213,-90);
ref = commaaccentcomb;
}
);
width = 691;
}
);
unicode = 536;
},
{
glyphname = Germandbls;
lastChange = "2025-03-02 13:03:04 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,611,l),
(380,611,ls),
(438,611,o),
(477,577,o),
(477,529,cs),
(477,482,o),
(439,454,o),
(386,454,cs),
(327,454,l),
(327,322,l),
(386,322,ls),
(455,322,o),
(496,288,o),
(496,234,cs),
(496,181,o),
(457,139,o),
(389,139,cs),
(374,139,l),
(336,0,l),
(388,0,ls),
(557,0,o),
(665,91,o),
(665,228,cs),
(665,336,o),
(598,389,o),
(474,403,c),
(490,377,l),
(586,395,o),
(649,463,o),
(649,551,cs),
(649,668,o),
(541,750,o),
(385,750,cs),
(178,750,ls),
(100,750,o),
(74,721,o),
(74,643,cs),
(74,0,l)
);
}
);
width = 711;
}
);
metricLeft = B;
metricRight = B;
unicode = 7838;
},
{
glyphname = Tcaron;
lastChange = "2025-03-02 17:25:35 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = T;
},
{
pos = (33,0);
ref = caroncomb;
}
);
width = 640;
}
);
unicode = 356;
},
{
glyphname = Tcommaaccent;
lastChange = "2025-03-02 17:36:24 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = T;
},
{
pos = (187,-90);
ref = commaaccentcomb;
}
);
width = 640;
}
);
unicode = 538;
},
{
glyphname = Ucircumflex;
lastChange = "2025-03-02 13:03:17 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (161,0);
ref = circumflex;
}
);
width = 770;
}
);
unicode = 219;
},
{
glyphname = Udieresis;
lastChange = "2025-03-02 13:03:23 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (61,0);
ref = dieresis;
}
);
width = 770;
}
);
unicode = 220;
},
{
glyphname = Udotbelow;
kernLeft = KO_U;
kernRight = KO_U;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (238,0);
ref = dotbelowcomb;
}
);
width = 770;
}
);
unicode = 7908;
},
{
glyphname = Uhookabove;
kernLeft = KO_U;
kernRight = KO_U;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (207,0);
ref = hookabovecomb;
}
);
width = 770;
}
);
unicode = 7910;
},
{
glyphname = Uhornacute;
kernLeft = KO_U;
kernRight = KO_Uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Uhorn;
},
{
pos = (276,0);
ref = acutecomb;
}
);
width = 770;
}
);
unicode = 7912;
},
{
glyphname = Uhorndotbelow;
kernLeft = KO_U;
kernRight = KO_Uhorn;
lastChange = "2025-09-12 13:00:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Uhorn;
},
{
pos = (238,0);
ref = dotbelowcomb;
}
);
width = 770;
}
);
unicode = 7920;
},
{
glyphname = Uhorngrave;
kernLeft = KO_U;
kernRight = KO_Uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Uhorn;
},
{
pos = (152,0);
ref = gravecomb;
}
);
width = 770;
}
);
unicode = 7914;
},
{
glyphname = Uhornhookabove;
kernLeft = KO_U;
kernRight = KO_Uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Uhorn;
},
{
pos = (207,0);
ref = hookabovecomb;
}
);
width = 770;
}
);
unicode = 7916;
},
{
glyphname = Uhorntilde;
kernLeft = KO_U;
kernRight = KO_Uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Uhorn;
},
{
pos = (132,0);
ref = tildecomb;
}
);
width = 770;
}
);
unicode = 7918;
},
{
glyphname = Uhungarumlaut;
lastChange = "2025-03-02 17:25:45 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (106,0);
ref = hungarumlautcomb;
}
);
width = 770;
}
);
unicode = 368;
},
{
glyphname = Umacron;
lastChange = "2025-03-02 17:25:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (129,0);
ref = macroncomb;
}
);
width = 770;
}
);
unicode = 362;
},
{
glyphname = Uogonek;
lastChange = "2025-03-02 17:26:29 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (239,30);
ref = ogonekcomb;
}
);
width = 770;
}
);
unicode = 370;
},
{
glyphname = Uring;
lastChange = "2025-03-02 17:26:39 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = U;
},
{
pos = (153,0);
ref = ringcomb;
}
);
width = 770;
}
);
unicode = 366;
},
{
glyphname = Wacute;
lastChange = "2025-03-02 13:03:49 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = W;
},
{
pos = (406,0);
ref = acute;
}
);
width = 1030;
}
);
unicode = 7810;
},
{
glyphname = Wcircumflex;
lastChange = "2025-03-02 13:04:00 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = W;
},
{
pos = (291,0);
ref = circumflex;
}
);
width = 1030;
}
);
unicode = 372;
},
{
glyphname = Wdieresis;
lastChange = "2025-03-02 13:04:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = W;
},
{
pos = (191,0);
ref = dieresis;
}
);
width = 1030;
}
);
unicode = 7812;
},
{
glyphname = Wgrave;
lastChange = "2025-03-02 13:04:13 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = W;
},
{
pos = (282,0);
ref = grave;
}
);
width = 1030;
}
);
unicode = 7808;
},
{
glyphname = Ycircumflex;
lastChange = "2025-03-02 13:04:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (113,-2);
ref = circumflex;
}
);
width = 673;
}
);
unicode = 374;
},
{
glyphname = Ydieresis;
lastChange = "2025-03-02 13:04:30 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (13,-2);
ref = dieresis;
}
);
width = 673;
}
);
unicode = 376;
},
{
glyphname = Ydotbelow;
kernRight = KO_Y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (190,0);
ref = dotbelowcomb;
}
);
width = 673;
}
);
unicode = 7924;
},
{
glyphname = Yhookabove;
kernLeft = KO_Y;
kernRight = KO_Y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (159,-2);
ref = hookabovecomb;
}
);
width = 673;
}
);
unicode = 7926;
},
{
glyphname = Ytilde;
kernLeft = KO_Y;
kernRight = KO_Y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Y;
},
{
pos = (84,-2);
ref = tildecomb;
}
);
width = 673;
}
);
unicode = 7928;
},
{
glyphname = Zacute;
lastChange = "2025-03-02 17:26:56 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Z;
},
{
pos = (218,0);
ref = acutecomb;
}
);
width = 654;
}
);
unicode = 377;
},
{
glyphname = Zcaron;
lastChange = "2025-03-02 17:27:05 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Z;
},
{
pos = (40,0);
ref = caroncomb;
}
);
width = 654;
}
);
unicode = 381;
},
{
glyphname = Zdotaccent;
lastChange = "2025-03-02 17:27:08 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = Z;
},
{
pos = (123,0);
ref = dotaccentcomb;
}
);
width = 654;
}
);
unicode = 379;
},
{
glyphname = abreveacute;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (110,-180);
ref = brevecomb_acutecomb;
}
);
width = 655;
}
);
unicode = 7855;
userData = {
KernOnName = abreveacute;
};
},
{
glyphname = abrevedotbelow;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = abreve;
},
{
pos = (176,0);
ref = dotbelowcomb;
}
);
width = 655;
}
);
unicode = 7863;
userData = {
KernOnName = abrevedotbelow;
};
},
{
glyphname = abrevegrave;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (110,-180);
ref = brevecomb_gravecomb;
}
);
width = 655;
}
);
unicode = 7857;
userData = {
KernOnName = abrevegrave;
};
},
{
glyphname = abrevehookabove;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (110,-180);
ref = brevecomb_hookabovecomb;
}
);
width = 655;
}
);
unicode = 7859;
userData = {
KernOnName = abrevehookabove;
};
},
{
glyphname = abrevetilde;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (110,-180);
ref = brevecomb_tildecomb;
}
);
width = 655;
}
);
unicode = 7861;
userData = {
KernOnName = abrevetilde;
};
},
{
glyphname = acircumflexacute;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (99,-180);
ref = circumflexcomb_acutecomb;
}
);
width = 655;
}
);
unicode = 7845;
userData = {
KernOnName = acircumflexacute;
};
},
{
glyphname = acircumflexdotbelow;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = acircumflex;
},
{
pos = (176,0);
ref = dotbelowcomb;
}
);
width = 655;
}
);
unicode = 7853;
userData = {
KernOnName = acircumflexdotbelow;
};
},
{
glyphname = acircumflexgrave;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (99,-180);
ref = circumflexcomb_gravecomb;
}
);
width = 655;
}
);
unicode = 7847;
userData = {
KernOnName = acircumflexgrave;
};
},
{
glyphname = acircumflexhookabove;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (99,-180);
ref = circumflexcomb_hookabovecomb;
}
);
width = 655;
}
);
unicode = 7849;
userData = {
KernOnName = acircumflexhookabove;
};
},
{
glyphname = acircumflextilde;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (99,-180);
ref = circumflexcomb_tildecomb;
}
);
width = 655;
}
);
unicode = 7851;
userData = {
KernOnName = acircumflextilde;
};
},
{
glyphname = adieresis;
lastChange = "2025-03-02 13:04:38 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (-1,-180);
ref = dieresis;
}
);
width = 655;
}
);
unicode = 228;
},
{
glyphname = adotbelow;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (176,0);
ref = dotbelowcomb;
}
);
width = 655;
}
);
unicode = 7841;
userData = {
KernOnName = adotbelow;
};
},
{
glyphname = ahookabove;
kernLeft = KO_a;
kernRight = KO_a;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (145,-180);
ref = hookabovecomb;
}
);
width = 655;
}
);
unicode = 7843;
userData = {
KernOnName = ahookabove;
};
},
{
glyphname = amacron;
lastChange = "2025-03-02 17:27:16 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (67,-180);
ref = macroncomb;
}
);
width = 655;
}
);
unicode = 257;
},
{
glyphname = aogonek;
lastChange = "2025-03-02 17:27:29 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (266,0);
ref = ogonekcomb;
}
);
width = 655;
}
);
unicode = 261;
},
{
glyphname = aring;
lastChange = "2025-03-02 13:06:01 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = a;
},
{
pos = (91,-180);
ref = ring;
}
);
width = 655;
}
);
unicode = 229;
},
{
glyphname = ae;
lastChange = "2025-03-02 13:10:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(787,-15,o),
(892,60,o),
(913,184,c),
(762,184,l),
(752,143,o),
(713,110,o),
(655,110,cs),
(572,110,o),
(523,177,o),
(523,285,cs),
(523,312,ls),
(523,402,o),
(571,461,o),
(646,461,cs),
(701,461,o),
(752,429,o),
(757,345,c),
(486,345,l),
(486,246,l),
(917,246,l),
(927,460,o),
(822,585,o),
(645,585,cs),
(473,585,o),
(362,468,o),
(362,285,cs),
(362,101,o),
(474,-15,o),
(648,-15,cs)
);
},
{
closed = 1;
nodes = (
(335,-12,o),
(414,23,o),
(447,72,c),
(351,358,l),
(324,376,o),
(276,388,o),
(234,388,cs),
(115,388,o),
(32,307,o),
(32,193,cs),
(32,73,o),
(124,-12,o),
(254,-12,cs)
);
},
{
closed = 1;
nodes = (
(224,122,o),
(187,153,o),
(187,196,cs),
(187,239,o),
(224,269,o),
(277,269,cs),
(329,269,o),
(366,239,o),
(366,196,cs),
(366,153,o),
(329,122,o),
(277,122,cs)
);
},
{
closed = 1;
nodes = (
(515,330,ls),
(515,494,o),
(424,585,o),
(248,585,cs),
(224,585,o),
(164,584,o),
(109,576,c),
(109,437,l),
(145,441,o),
(175,445,o),
(215,445,cs),
(297,445,o),
(353,425,o),
(353,329,c),
(515,80,l)
);
}
);
width = 945;
}
);
metricLeft = a;
metricRight = e;
unicode = 230;
},
{
glyphname = cacute;
lastChange = "2025-03-02 17:27:39 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = c;
},
{
pos = (202,-180);
ref = acutecomb;
}
);
width = 582;
}
);
unicode = 263;
},
{
glyphname = ccaron;
lastChange = "2025-03-02 17:27:48 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = c;
},
{
pos = (24,-180);
ref = caroncomb;
}
);
width = 582;
}
);
unicode = 269;
},
{
glyphname = ccedilla;
lastChange = "2025-03-02 13:11:27 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = c;
},
{
pos = (100,0);
ref = cedilla;
}
);
width = 582;
}
);
unicode = 231;
},
{
glyphname = cdotaccent;
lastChange = "2025-03-02 17:36:31 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = c;
},
{
pos = (107,-180);
ref = dotaccentcomb;
}
);
width = 582;
}
);
unicode = 267;
},
{
glyphname = dcaron;
lastChange = "2025-03-02 17:28:21 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = d;
},
{
closed = 1;
nodes = (
(657,536,l),
(790,518,l),
(829,750,l),
(687,768,l)
);
}
);
width = 670;
}
);
unicode = 271;
},
{
glyphname = eth;
lastChange = "2025-03-02 13:13:25 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(495,-15,o),
(616,96,o),
(616,273,cs),
(616,403,o),
(495,525,o),
(324,525,cs),
(153,525,o),
(32,413,o),
(32,253,cs),
(32,96,o),
(153,-15,o),
(324,-15,cs)
);
},
{
closed = 1;
nodes = (
(249,125,o),
(197,177,o),
(197,253,cs),
(197,332,o),
(249,385,o),
(324,385,cs),
(399,385,o),
(451,332,o),
(451,253,cs),
(451,177,o),
(399,125,o),
(324,125,cs)
);
},
{
closed = 1;
nodes = (
(616,403,o),
(546,504,o),
(442,607,c),
(537,628,l),
(512,735,l),
(341,697,l),
(308,724,l),
(103,724,l),
(130,701,o),
(154,680,o),
(175,660,c),
(56,634,l),
(80,527,l),
(273,570,l),
(321,523,l),
(616,273,l)
);
}
);
width = 600;
}
);
metricLeft = dacroat;
metricRight = dacroat;
unicode = 240;
},
{
glyphname = ecaron;
lastChange = "2025-03-02 17:28:27 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (28,-180);
ref = caroncomb;
}
);
width = 615;
}
);
unicode = 283;
},
{
glyphname = ecircumflexacute;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (91,-180);
ref = circumflexcomb_acutecomb;
}
);
width = 615;
}
);
unicode = 7871;
},
{
glyphname = ecircumflexdotbelow;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (91,-180);
ref = circumflexcomb;
},
{
pos = (168,0);
ref = dotbelowcomb;
}
);
width = 615;
}
);
unicode = 7879;
},
{
glyphname = ecircumflexgrave;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (91,-180);
ref = circumflexcomb_gravecomb;
}
);
width = 615;
}
);
unicode = 7873;
},
{
glyphname = ecircumflexhookabove;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (91,-180);
ref = circumflexcomb_hookabovecomb;
}
);
width = 615;
}
);
unicode = 7875;
},
{
glyphname = ecircumflextilde;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (91,-180);
ref = circumflexcomb_tildecomb;
}
);
width = 615;
}
);
unicode = 7877;
},
{
glyphname = edieresis;
lastChange = "2025-03-02 13:13:36 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (-9,-180);
ref = dieresis;
}
);
width = 615;
}
);
unicode = 235;
},
{
glyphname = edotaccent;
lastChange = "2025-03-02 17:28:36 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (111,-180);
ref = dotaccentcomb;
}
);
width = 615;
}
);
unicode = 279;
},
{
glyphname = edotbelow;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (168,0);
ref = dotbelowcomb;
}
);
width = 615;
}
);
unicode = 7865;
},
{
glyphname = ehookabove;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (137,-180);
ref = hookabovecomb;
}
);
width = 615;
}
);
unicode = 7867;
},
{
glyphname = emacron;
lastChange = "2025-03-02 17:28:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (59,-180);
ref = macroncomb;
}
);
width = 615;
}
);
unicode = 275;
},
{
glyphname = eogonek;
lastChange = "2025-03-02 17:29:03 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (155,30);
ref = ogonekcomb;
}
);
width = 615;
}
);
unicode = 281;
},
{
glyphname = etilde;
kernLeft = KO_e;
kernRight = KO_e;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = e;
},
{
pos = (62,-180);
ref = tildecomb;
}
);
width = 615;
}
);
unicode = 7869;
},
{
glyphname = gbreve;
lastChange = "2025-03-02 17:36:42 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = g;
},
{
pos = (107,-180);
ref = brevecomb;
}
);
width = 640;
}
);
unicode = 287;
},
{
glyphname = gcommaaccent;
lastChange = "2025-03-02 17:29:42 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = g;
},
{
pos = (187,-270);
ref = commaaccentcomb;
}
);
width = 640;
}
);
unicode = 291;
},
{
glyphname = gdotaccent;
lastChange = "2025-03-02 17:36:49 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = g;
},
{
pos = (116,-180);
ref = dotaccentcomb;
}
);
width = 640;
}
);
unicode = 289;
},
{
glyphname = hbar;
lastChange = "2025-03-02 17:37:34 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = h;
},
{
closed = 1;
nodes = (
(315,598,l),
(315,705,l),
(-12,705,l),
(-12,598,l)
);
}
);
width = 643;
}
);
unicode = 295;
},
{
glyphname = idotless;
kernLeft = KO_idotless;
kernRight = KO_idotless;
lastChange = "2025-03-02 17:30:19 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (138,0);
},
{
name = ogonek;
pos = (223,0);
},
{
name = top;
pos = (138,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(223,0,l),
(223,570,l),
(61,570,l),
(61,0,l)
);
}
);
userData = {
assembly = "MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
9 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 23 values pushed */
4 1 0 0 1 97 0 1 1 48 77 5 1 3 3 41 77 0 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 21 values pushed */
0 1 4 1 0 3 1 0 105 5 1 3 3 41 77 0 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 19 values pushed */
12 12 1 0 12 15 12 15 14 13 7 5 0 11 1 11 6 8 22 
CALL[ ]	/* CallFunction */";
};
width = 276;
}
);
note = i;
unicode = 305;
},
{
glyphname = icircumflex;
lastChange = "2025-03-02 13:13:47 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (-86,-180);
ref = circumflex;
}
);
width = 276;
}
);
unicode = 238;
},
{
glyphname = idieresis;
lastChange = "2025-03-02 13:13:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (-186,-180);
ref = dieresis;
}
);
width = 276;
}
);
unicode = 239;
},
{
glyphname = idotbelow;
kernLeft = KO_i;
kernRight = KO_i;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = i;
},
{
pos = (-9,0);
ref = dotbelowcomb;
}
);
width = 276;
}
);
unicode = 7883;
},
{
glyphname = ihookabove;
kernLeft = KO_ihookabove;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (-40,-180);
ref = hookabovecomb;
}
);
width = 276;
}
);
unicode = 7881;
},
{
glyphname = imacron;
lastChange = "2025-03-02 17:29:58 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = idotless;
},
{
pos = (-118,-180);
ref = macroncomb;
}
);
width = 276;
}
);
unicode = 299;
},
{
glyphname = iogonek;
lastChange = "2025-03-02 17:30:25 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = i;
},
{
pos = (-109,0);
ref = ogonekcomb;
}
);
width = 276;
}
);
unicode = 303;
},
{
glyphname = jdotless;
lastChange = "2025-09-12 13:18:21 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (170,-180);
},
{
name = top;
pos = (207,570);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(91,-180,ls),
(231,-180,o),
(292,-124,o),
(292,0,cs),
(292,570,l),
(130,570,l),
(130,0,ls),
(130,-23,o),
(119,-40,o),
(91,-40,cs),
(46,-40,l),
(46,-180,l)
);
}
);
width = 339;
}
);
metricLeft = j;
metricRight = j;
unicode = 567;
},
{
glyphname = kcommaaccent;
lastChange = "2025-03-02 17:30:38 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = k;
},
{
pos = (170,-90);
ref = commaaccentcomb;
}
);
width = 605;
}
);
unicode = 311;
},
{
glyphname = lacute;
lastChange = "2025-03-02 17:31:04 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = l;
},
{
pos = (30,0);
ref = acutecomb;
}
);
width = 357;
}
);
unicode = 314;
},
{
glyphname = lcaron;
lastChange = "2025-03-02 17:31:45 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = l;
},
{
closed = 1;
nodes = (
(270,536,l),
(403,518,l),
(442,750,l),
(300,768,l)
);
}
);
width = 357;
}
);
unicode = 318;
},
{
glyphname = lcommaaccent;
lastChange = "2025-03-02 17:31:56 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = l;
},
{
pos = (46,-90);
ref = commaaccentcomb;
}
);
width = 357;
}
);
unicode = 316;
},
{
glyphname = lslash;
lastChange = "2025-03-02 17:32:10 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = l;
},
{
closed = 1;
nodes = (
(342,391,l),
(306,528,l),
(-44,434,l),
(-8,297,l)
);
}
);
width = 357;
}
);
unicode = 322;
},
{
glyphname = nacute;
lastChange = "2025-03-02 17:32:23 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = n;
},
{
pos = (204,-180);
ref = acutecomb;
}
);
width = 626;
}
);
unicode = 324;
},
{
glyphname = ncaron;
lastChange = "2025-03-02 17:32:28 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = n;
},
{
pos = (26,-180);
ref = caroncomb;
}
);
width = 626;
}
);
unicode = 328;
},
{
glyphname = ncommaaccent;
lastChange = "2025-03-02 17:32:32 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = n;
},
{
pos = (180,-90);
ref = commaaccentcomb;
}
);
width = 626;
}
);
unicode = 326;
},
{
glyphname = ntilde;
lastChange = "2025-03-02 13:14:18 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = n;
},
{
pos = (60,-180);
ref = tilde;
}
);
width = 626;
}
);
unicode = 241;
},
{
glyphname = ocircumflexacute;
kernLeft = KO_o;
kernRight = KO_ocircumflex;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (100,-180);
ref = circumflexcomb_acutecomb;
}
);
width = 648;
}
);
unicode = 7889;
userData = {
KernOnName = ocircumflexacute;
};
},
{
glyphname = ocircumflexdotbelow;
kernLeft = KO_o;
kernRight = KO_ocircumflex;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = ocircumflex;
},
{
pos = (177,0);
ref = dotbelowcomb;
}
);
width = 648;
}
);
unicode = 7897;
userData = {
KernOnName = ocircumflexdotbelow;
};
},
{
glyphname = ocircumflexgrave;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (100,-180);
ref = circumflexcomb_gravecomb;
}
);
width = 648;
}
);
unicode = 7891;
userData = {
KernOnName = ocircumflexgrave;
};
},
{
glyphname = ocircumflexhookabove;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (100,-180);
ref = circumflexcomb_hookabovecomb;
}
);
width = 648;
}
);
unicode = 7893;
userData = {
KernOnName = ocircumflexhookabove;
};
},
{
glyphname = ocircumflextilde;
kernLeft = KO_o;
kernRight = KO_ocircumflex;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (100,-180);
ref = circumflexcomb_tildecomb;
}
);
width = 648;
}
);
unicode = 7895;
userData = {
KernOnName = ocircumflextilde;
};
},
{
glyphname = odieresis;
lastChange = "2025-03-02 13:14:30 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (0,-180);
ref = dieresis;
}
);
width = 648;
}
);
unicode = 246;
},
{
glyphname = odotbelow;
kernLeft = KO_o;
kernRight = KO_o;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (177,0);
ref = dotbelowcomb;
}
);
width = 648;
}
);
unicode = 7885;
},
{
glyphname = ohookabove;
kernLeft = KO_o;
kernRight = KO_ocircumflex;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (146,-180);
ref = hookabovecomb;
}
);
width = 648;
}
);
unicode = 7887;
userData = {
KernOnName = ohookabove;
};
},
{
glyphname = ohornacute;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = ohorn;
},
{
pos = (215,-180);
ref = acutecomb;
}
);
width = 651;
}
);
unicode = 7899;
userData = {
KernOnName = ohornacute;
};
},
{
glyphname = ohorndotbelow;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = ohorn;
},
{
pos = (177,0);
ref = dotbelowcomb;
}
);
width = 651;
}
);
unicode = 7907;
userData = {
KernOnName = ohorndotbelow;
};
},
{
glyphname = ohorngrave;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = ohorn;
},
{
pos = (91,-180);
ref = gravecomb;
}
);
width = 651;
}
);
unicode = 7901;
userData = {
KernOnName = ohorngrave;
};
},
{
glyphname = ohornhookabove;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = ohorn;
},
{
pos = (146,-180);
ref = hookabovecomb;
}
);
width = 651;
}
);
unicode = 7903;
userData = {
KernOnName = ohornhookabove;
};
},
{
glyphname = ohorntilde;
kernLeft = KO_o;
lastChange = "2025-03-16 14:27:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = ohorn;
},
{
pos = (71,-180);
ref = tildecomb;
}
);
width = 651;
}
);
unicode = 7905;
userData = {
KernOnName = ohorntilde;
};
},
{
glyphname = ohungarumlaut;
lastChange = "2025-03-02 17:32:40 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = o;
},
{
pos = (45,-180);
ref = hungarumlautcomb;
}
);
width = 648;
}
);
unicode = 337;
},
{
glyphname = oslash;
lastChange = "2025-03-02 13:14:58 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (3,0);
ref = o;
},
{
closed = 1;
nodes = (
(621,566,l),
(514,643,l),
(32,7,l),
(138,-71,l)
);
}
);
width = 653;
}
);
metricLeft = o;
metricRight = o;
unicode = 248;
},
{
glyphname = oe;
lastChange = "2025-03-02 13:15:21 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (324,0);
},
{
name = top;
pos = (324,570);
},
{
name = topright;
pos = (324,555);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(495,-15,o),
(616,108,o),
(616,283,cs),
(616,460,o),
(495,585,o),
(324,585,cs),
(153,585,o),
(32,460,o),
(32,283,cs),
(32,108,o),
(153,-15,o),
(324,-15,cs)
);
},
{
closed = 1;
nodes = (
(249,125,o),
(197,189,o),
(197,283,cs),
(197,379,o),
(249,445,o),
(324,445,cs),
(399,445,o),
(451,379,o),
(451,283,cs),
(451,189,o),
(399,125,o),
(324,125,cs)
);
},
{
closed = 1;
nodes = (
(876,-15,o),
(981,60,o),
(1002,184,c),
(851,184,l),
(841,143,o),
(802,110,o),
(744,110,cs),
(661,110,o),
(612,177,o),
(612,285,cs),
(612,312,ls),
(612,402,o),
(660,461,o),
(735,461,cs),
(790,461,o),
(841,429,o),
(846,345,c),
(575,345,l),
(575,246,l),
(1006,246,l),
(1016,460,o),
(911,585,o),
(734,585,cs),
(562,585,o),
(451,468,o),
(451,285,cs),
(451,101,o),
(563,-15,o),
(737,-15,cs)
);
}
);
width = 1034;
}
);
metricLeft = o;
metricRight = e;
unicode = 339;
},
{
glyphname = thorn;
lastChange = "2025-03-02 13:19:00 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (353,0);
},
{
name = top;
pos = (353,570);
},
{
name = topright;
pos = (353,555);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(524,-15,o),
(645,108,o),
(645,283,cs),
(645,460,o),
(524,585,o),
(353,585,cs),
(182,585,o),
(61,460,o),
(61,283,cs),
(61,108,o),
(182,-15,o),
(353,-15,cs)
);
},
{
closed = 1;
nodes = (
(248,-90,l),
(248,37,l),
(182,125,l),
(182,445,l),
(248,526,l),
(248,660,l),
(61,660,l),
(61,-90,l)
);
},
{
closed = 1;
nodes = (
(267,125,o),
(225,206,o),
(226,287,cs),
(226,366,o),
(269,445,o),
(353,445,cs),
(428,445,o),
(480,379,o),
(480,283,cs),
(480,189,o),
(428,125,o),
(353,125,cs)
);
}
);
width = 677;
}
);
metricLeft = l;
metricRight = o;
unicode = 254;
},
{
glyphname = racute;
lastChange = "2025-03-02 17:33:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = r;
},
{
pos = (128,-180);
ref = acutecomb;
}
);
width = 434;
}
);
unicode = 341;
},
{
glyphname = rcaron;
lastChange = "2025-03-02 17:33:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = r;
},
{
pos = (-50,-180);
ref = caroncomb;
}
);
width = 434;
}
);
unicode = 345;
},
{
glyphname = sacute;
lastChange = "2025-03-02 17:33:24 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = s;
},
{
pos = (144,-180);
ref = acutecomb;
}
);
width = 525;
}
);
unicode = 347;
},
{
glyphname = scaron;
lastChange = "2025-03-02 17:33:31 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = s;
},
{
pos = (-34,-180);
ref = caroncomb;
}
);
width = 525;
}
);
unicode = 353;
},
{
glyphname = scedilla;
lastChange = "2025-03-02 17:33:37 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = s;
},
{
pos = (52,0);
ref = cedillacomb;
}
);
width = 525;
}
);
unicode = 351;
},
{
glyphname = scommaaccent;
lastChange = "2025-03-02 17:37:43 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = s;
},
{
pos = (130,-90);
ref = commaaccentcomb;
}
);
width = 525;
}
);
unicode = 537;
},
{
glyphname = germandbls;
lastChange = "2025-03-02 13:21:16 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(247,0,l),
(247,529,ls),
(247,582,o),
(287,611,o),
(359,611,cs),
(438,611,o),
(477,577,o),
(477,529,cs),
(477,482,o),
(439,454,o),
(386,454,cs),
(327,454,l),
(327,322,l),
(386,322,ls),
(455,322,o),
(496,288,o),
(496,234,cs),
(496,181,o),
(457,139,o),
(389,139,cs),
(374,139,l),
(336,0,l),
(388,0,ls),
(557,0,o),
(665,91,o),
(665,228,cs),
(665,336,o),
(598,389,o),
(474,403,c),
(490,377,l),
(586,395,o),
(649,463,o),
(649,551,cs),
(649,673,o),
(551,750,o),
(359,750,cs),
(190,750,o),
(74,671,o),
(74,529,cs),
(74,0,l)
);
}
);
width = 711;
}
);
metricLeft = B;
metricRight = B;
unicode = 223;
},
{
glyphname = tcaron;
lastChange = "2025-03-02 17:34:23 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = t;
},
{
closed = 1;
nodes = (
(340,636,l),
(473,618,l),
(512,850,l),
(370,868,l)
);
}
);
width = 434;
}
);
unicode = 357;
},
{
glyphname = tcommaaccent;
lastChange = "2025-03-02 17:38:00 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = t;
},
{
pos = (124,-90);
ref = commaaccentcomb;
}
);
width = 434;
}
);
unicode = 539;
},
{
glyphname = ucircumflex;
lastChange = "2025-03-02 13:15:31 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (92,-180);
ref = circumflex;
}
);
width = 626;
}
);
unicode = 251;
},
{
glyphname = udieresis;
lastChange = "2025-03-02 13:15:37 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (-8,-180);
ref = dieresis;
}
);
width = 626;
}
);
unicode = 252;
},
{
glyphname = udotbelow;
kernLeft = KO_u;
kernRight = KO_uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (169,0);
ref = dotbelowcomb;
}
);
width = 626;
}
);
unicode = 7909;
},
{
glyphname = uhookabove;
kernLeft = KO_u;
kernRight = KO_uacute;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (138,-180);
ref = hookabovecomb;
}
);
width = 626;
}
);
unicode = 7911;
},
{
glyphname = uhornacute;
kernLeft = KO_u;
kernRight = KO_uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = uhorn;
},
{
pos = (207,-184);
ref = acutecomb;
}
);
width = 626;
}
);
unicode = 7913;
},
{
glyphname = uhorndotbelow;
kernLeft = KO_u;
kernRight = KO_uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = uhorn;
},
{
pos = (169,0);
ref = dotbelowcomb;
}
);
width = 626;
}
);
unicode = 7921;
},
{
glyphname = uhorngrave;
kernLeft = KO_u;
kernRight = KO_uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = uhorn;
},
{
pos = (83,-184);
ref = gravecomb;
}
);
width = 626;
}
);
unicode = 7915;
},
{
glyphname = uhornhookabove;
kernLeft = KO_u;
kernRight = KO_uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = uhorn;
},
{
pos = (138,-184);
ref = hookabovecomb;
}
);
width = 626;
}
);
unicode = 7917;
},
{
glyphname = uhorntilde;
kernLeft = KO_u;
kernRight = KO_uhorn;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = uhorn;
},
{
pos = (63,-184);
ref = tildecomb;
}
);
width = 626;
}
);
unicode = 7919;
},
{
glyphname = uhungarumlaut;
lastChange = "2025-03-02 17:34:31 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (37,-180);
ref = hungarumlautcomb;
}
);
width = 626;
}
);
unicode = 369;
},
{
glyphname = umacron;
lastChange = "2025-03-02 17:34:39 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (60,-180);
ref = macroncomb;
}
);
width = 626;
}
);
unicode = 363;
},
{
glyphname = uogonek;
lastChange = "2025-03-02 17:35:25 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (140,30);
ref = ogonekcomb;
}
);
width = 626;
}
);
unicode = 371;
},
{
glyphname = uring;
lastChange = "2025-03-02 17:35:34 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = u;
},
{
pos = (84,-180);
ref = ringcomb;
}
);
width = 626;
}
);
unicode = 367;
},
{
glyphname = wacute;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = w;
},
{
pos = (323,-180);
ref = acute;
}
);
width = 864;
}
);
unicode = 7811;
},
{
glyphname = wcircumflex;
lastChange = "2025-03-02 13:15:58 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = w;
},
{
pos = (208,-180);
ref = circumflex;
}
);
width = 864;
}
);
unicode = 373;
},
{
glyphname = wdieresis;
lastChange = "2025-03-02 13:16:02 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = w;
},
{
pos = (108,-180);
ref = dieresis;
}
);
width = 864;
}
);
unicode = 7813;
},
{
glyphname = wgrave;
lastChange = "2025-03-02 13:16:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = w;
},
{
pos = (199,-180);
ref = grave;
}
);
width = 864;
}
);
unicode = 7809;
},
{
glyphname = ycircumflex;
lastChange = "2025-03-02 13:16:15 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (72,-180);
ref = circumflex;
}
);
width = 596;
}
);
unicode = 375;
},
{
glyphname = ydieresis;
lastChange = "2025-03-02 13:16:20 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (-28,-180);
ref = dieresis;
}
);
width = 596;
}
);
unicode = 255;
},
{
glyphname = ydotbelow;
kernLeft = KO_y;
kernRight = KO_y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (341,0);
ref = dotbelowcomb;
}
);
width = 596;
}
);
unicode = 7925;
},
{
glyphname = yhookabove;
kernLeft = KO_y;
kernRight = KO_y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (118,-180);
ref = hookabovecomb;
}
);
width = 596;
}
);
unicode = 7927;
},
{
glyphname = ytilde;
kernLeft = KO_y;
kernRight = KO_y;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = y;
},
{
pos = (43,-180);
ref = tildecomb;
}
);
width = 596;
}
);
unicode = 7929;
},
{
glyphname = zacute;
lastChange = "2025-03-02 17:34:56 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = z;
},
{
pos = (148,-180);
ref = acutecomb;
}
);
width = 513;
}
);
unicode = 378;
},
{
glyphname = zcaron;
lastChange = "2025-03-02 17:35:40 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = z;
},
{
pos = (-30,-180);
ref = caroncomb;
}
);
width = 513;
}
);
unicode = 382;
},
{
glyphname = zdotaccent;
lastChange = "2025-03-02 17:35:47 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = z;
},
{
pos = (53,-180);
ref = dotaccentcomb;
}
);
width = 513;
}
);
unicode = 380;
},
{
export = 0;
glyphname = m.ss04;
kernLeft = KO_m.ss04;
kernRight = KO_m;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(907,0,l),
(907,378,ls),
(907,442,o),
(856,539,o),
(765,591,o),
(707,591,qs),
(639,591,o),
(535,511,o),
(503,429,q),
(561,330,l),
(561,365,o),
(586,420,o),
(630,453,o),
(661,453,qs),
(702,453,o),
(753,395,o),
(753,345,qs),
(753,0,l)
);
},
{
closed = 1;
nodes = (
(561,0,l),
(561,378,ls),
(561,442,o),
(510,539,o),
(419,591,o),
(361,591,qs),
(295,591,o),
(199,505,o),
(178,429,q),
(215,330,l),
(215,365,o),
(240,420,o),
(284,453,o),
(315,453,qs),
(356,453,o),
(407,395,o),
(407,345,qs),
(407,0,l)
);
},
{
closed = 1;
nodes = (
(215,419,l),
(197,579,l),
(61,579,l),
(61,0,l),
(215,0,l)
);
}
);
};
layerId = "BF117372-7DE8-486D-9F63-2F0341B20F1E";
name = "4 Jun 24 at 12:03";
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(215,346,ls),
(215,411,o),
(251,452,o),
(309,452,cs),
(312,452,ls),
(370,452,o),
(407,411,o),
(407,346,cs),
(407,0,l),
(561,0,l),
(561,346,ls),
(561,411,o),
(598,452,o),
(656,452,cs),
(659,452,ls),
(717,452,o),
(753,411,o),
(753,346,cs),
(753,0,l),
(907,0,l),
(907,356,ls),
(907,495,o),
(818,591,o),
(688,591,cs),
(659,591,ls),
(592,591,o),
(526,559,o),
(485,511,c),
(448,559,o),
(389,591,o),
(329,591,cs),
(290,591,ls),
(154,591,o),
(61,495,o),
(61,356,cs),
(61,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 962;
},
{
associatedMasterId = m002;
layerId = "D81CF594-644B-4483-A6C4-8EC89387BC95";
name = "24 Jun 24 at 16:51";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,362,ls),
(224,412,o),
(262,444,o),
(322,444,cs),
(383,444,o),
(421,412,o),
(421,362,cs),
(421,0,l),
(583,0,l),
(583,362,ls),
(583,412,o),
(621,444,o),
(681,444,cs),
(741,444,o),
(779,412,o),
(779,362,cs),
(777,0,l),
(940,0,l),
(940,362,ls),
(940,503,o),
(849,590,o),
(704,590,cs),
(607,590,o),
(522,539,o),
(483,457,c),
(524,457,l),
(485,539,o),
(399,590,o),
(301,590,cs),
(154,590,o),
(62,503,o),
(62,362,cs),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 997;
},
{
associatedMasterId = m002;
layerId = "50A708B7-8B1C-4575-9E8F-3B57742C98FB";
name = "24 Jun 24 at 19:25";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,340,ls),
(224,401,o),
(264,444,o),
(322,444,cs),
(380,444,o),
(421,401,o),
(421,340,cs),
(421,0,l),
(583,0,l),
(583,340,ls),
(583,401,o),
(623,444,o),
(681,444,cs),
(739,444,o),
(779,401,o),
(779,340,cs),
(777,0,l),
(940,0,l),
(940,340,ls),
(940,487,o),
(843,590,o),
(704,590,cs),
(607,590,o),
(522,539,o),
(483,457,c),
(524,457,l),
(485,539,o),
(399,590,o),
(301,590,cs),
(161,590,o),
(62,487,o),
(62,340,cs),
(62,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 997;
},
{
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,431,l),
(206,570,l),
(62,570,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(578,0,l),
(578,372,ls),
(578,498,o),
(497,585,o),
(369,585,cs),
(277,585,o),
(207,524,o),
(178,423,c),
(224,314,l),
(224,402,o),
(267,446,o),
(327,446,cs),
(388,446,o),
(416,404,o),
(416,339,cs),
(416,0,l)
);
},
{
closed = 1;
nodes = (
(935,0,l),
(935,372,ls),
(935,498,o),
(854,585,o),
(726,585,cs),
(634,585,o),
(564,524,o),
(535,423,c),
(578,314,l),
(578,402,o),
(622,446,o),
(684,446,cs),
(745,446,o),
(773,404,o),
(773,339,cs),
(773,0,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 10 values pushed */
39 26 25 8 7 5 2 0 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 22 values pushed */
3 1 0 0 1 97 6 4 2 1 1 49 77 8 7 5 3 2 2 39 2 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 26 values pushed */
0 6 6 41 77 3 1 0 0 1 97 4 1 1 1 49 77 8 7 5 3 2 2 39 2 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
36 36 36 40 36 40 18 20 38 35 20 38 34 9 8 29 
CALL[ ]	/* CallFunction */";
};
width = 992;
}
);
note = m;
},
{
export = 0;
glyphname = n.ss04;
kernLeft = KO_n.ss04;
kernRight = KO_n;
lastChange = "2024-08-16 04:03:22 +0000";
layers = (
{
associatedMasterId = m002;
layerId = "DF6F65AB-CDFD-4BB8-83EC-B34D8FBDC406";
name = "17 Jun 24 at 16:57";
shapes = (
{
closed = 1;
nodes = (
(215,0,l),
(215,346,ls),
(215,411,o),
(254,452,o),
(317,452,cs),
(320,452,ls),
(383,452,o),
(423,411,o),
(423,346,cs),
(423,0,l),
(577,0,l),
(577,356,ls),
(577,495,o),
(483,591,o),
(347,591,cs),
(292,591,ls),
(155,591,o),
(61,495,o),
(61,356,cs),
(61,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 632;
},
{
associatedMasterId = m002;
layerId = "1D0BB10C-BAE8-4029-A911-6FF57E0FC463";
name = "24 Jun 24 at 16:51";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,363,ls),
(224,413,o),
(261,445,o),
(320,445,cs),
(379,445,o),
(416,413,o),
(416,363,cs),
(416,0,l),
(578,0,l),
(578,365,ls),
(578,500,o),
(478,585,o),
(320,585,cs),
(162,585,o),
(62,500,o),
(62,365,cs),
(62,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(254,0,l),
(254,354,ls),
(254,389,o),
(290,428,o),
(320,428,qs),
(351,428,o),
(387,389,o),
(387,354,qs),
(387,0,l),
(552,0,l),
(552,358,ls),
(552,476,o),
(425,588,o),
(320,588,qs),
(216,588,o),
(89,476,o),
(89,358,qs),
(89,0,l)
);
}
);
};
layerId = "F7F61A2D-8105-4313-AFEA-36B8E6580DB0";
name = "24 Jun 24 at 17:49";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,343,ls),
(224,406,o),
(261,445,o),
(320,445,cs),
(379,445,o),
(416,406,o),
(416,343,cs),
(416,0,l),
(578,0,l),
(578,355,ls),
(578,509,o),
(485,585,o),
(320,585,cs),
(155,585,o),
(62,509,o),
(62,355,cs),
(62,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(64,0,l),
(215,0,l),
(215,335,ls),
(215,368,o),
(225,395,o),
(243,416,cs),
(261,437,o),
(287,447,o),
(320,447,cs),
(352,447,o),
(378,437,o),
(396,416,cs),
(414,395,o),
(424,368,o),
(424,335,cs),
(424,0,l),
(576,0,l),
(576,341,ls),
(576,417,o),
(552,476,o),
(506,520,cs),
(459,563,o),
(397,584,o),
(320,584,cs),
(243,584,o),
(181,563,o),
(134,520,cs),
(88,476,o),
(64,417,o),
(64,341,cs)
);
}
);
};
layerId = "9498BA40-2E48-4CF9-A402-2B72A8474A48";
name = "24 Jun 24 at 19:18";
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,333,ls),
(224,405,o),
(264,445,o),
(320,445,cs),
(377,445,o),
(416,405,o),
(416,333,cs),
(416,0,l),
(578,0,l),
(578,335,ls),
(578,489,o),
(478,585,o),
(320,585,cs),
(162,585,o),
(62,489,o),
(62,335,cs),
(62,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
},
{
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(224,0,l),
(224,431,l),
(206,570,l),
(62,570,l),
(62,0,l)
);
},
{
closed = 1;
nodes = (
(578,0,l),
(578,372,ls),
(578,498,o),
(497,585,o),
(369,585,cs),
(277,585,o),
(207,524,o),
(178,423,c),
(216,324,l),
(216,397,o),
(254,446,o),
(317,446,cs),
(378,446,o),
(416,404,o),
(416,339,cs),
(416,0,l)
);
}
);
userData = {
assembly = "PUSHB[ ]	/* 8 values pushed */
13 12 3 3 1 2 1 76 
MPPEM[ ]	/* MeasurePixelPerEm */
PUSHB[ ]	/* 1 value pushed */
20 
LT[ ]	/* LessThan */
IF[ ]	/* If */
NPUSHB[ ]	/* 19 values pushed */
0 2 2 0 97 3 1 0 0 41 77 4 5 2 1 1 39 1 78 
ELSE[ ]	/* Else */
NPUSHB[ ]	/* 23 values pushed */
0 0 0 41 77 0 2 2 3 97 0 3 3 49 77 4 5 2 1 1 39 1 78 
EIF[ ]	/* EndIf */
NPUSHB[ ]	/* 16 values pushed */
0 0 22 21 17 15 9 7 0 4 0 4 17 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 635;
}
);
note = n;
},
{
glyphname = ordfeminine;
lastChange = "2025-03-02 13:34:11 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(248,385,o),
(296,431,o),
(304,498,c),
(304,644,l),
(296,704,o),
(248,745,o),
(182,745,cs),
(94,745,o),
(32,672,o),
(32,568,cs),
(32,461,o),
(97,385,o),
(188,385,cs)
);
},
{
closed = 1;
nodes = (
(165,482,o),
(140,515,o),
(140,568,cs),
(140,621,o),
(165,653,o),
(205,653,cs),
(245,653,o),
(269,621,o),
(269,568,cs),
(269,515,o),
(245,482,o),
(205,482,cs)
);
},
{
closed = 1;
nodes = (
(377,394,l),
(377,736,l),
(289,736,l),
(278,653,l),
(278,483,l),
(289,394,l)
);
}
);
width = 438;
}
);
metricLeft = a;
metricRight = a;
unicode = 170;
},
{
glyphname = ordmasculine;
lastChange = "2025-03-02 13:33:35 +0000";
layers = (
{
anchors = (
{
name = bottom;
pos = (207,394);
},
{
name = top;
pos = (207,736);
},
{
name = topright;
pos = (207,727);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(310,385,o),
(382,459,o),
(382,564,cs),
(382,670,o),
(310,745,o),
(207,745,cs),
(104,745,o),
(32,670,o),
(32,564,cs),
(32,459,o),
(104,385,o),
(207,385,cs)
);
},
{
closed = 1;
nodes = (
(167,481,o),
(140,514,o),
(140,564,cs),
(140,614,o),
(167,649,o),
(207,649,cs),
(247,649,o),
(274,614,o),
(274,564,cs),
(274,514,o),
(247,481,o),
(207,481,cs)
);
}
);
width = 414;
}
);
metricLeft = o;
metricRight = o;
unicode = 186;
},
{
glyphname = zero.blackCircled;
lastChange = "2025-03-02 17:23:39 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(372,110,o),
(293,211,o),
(293,371,cs),
(293,531,o),
(373,631,o),
(501,631,cs),
(627,631,o),
(708,530,o),
(708,369,cs),
(708,210,o),
(626,110,o),
(498,110,cs)
);
},
{
closed = 1;
nodes = (
(419,266,o),
(446,215,o),
(500,215,cs),
(554,215,o),
(581,266,o),
(581,371,cs),
(581,476,o),
(554,526,o),
(500,526,cs),
(446,526,o),
(419,476,o),
(419,371,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9471;
},
{
glyphname = one.blackCircled;
lastChange = "2025-03-02 12:26:07 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(474,440,l),
(451,425,o),
(423,422,o),
(344,422,c),
(344,530,l),
(424,530,o),
(457,529,o),
(480,623,c),
(597,623,l),
(597,118,l),
(474,118,l)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10102;
},
{
glyphname = two.blackCircled;
lastChange = "2025-03-02 17:22:50 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(324,174,ls),
(324,266,o),
(364,325,o),
(475,378,cs),
(522,400,o),
(574,423,o),
(574,472,cs),
(574,503,o),
(549,525,o),
(513,525,cs),
(474,525,o),
(443,491,o),
(443,433,c),
(326,433,l),
(320,548,o),
(387,630,o),
(513,630,cs),
(626,630,o),
(697,569,o),
(697,472,cs),
(697,378,o),
(631,331,o),
(542,283,cs),
(504,262,o),
(469,241,o),
(462,219,c),
(686,219,l),
(686,113,l),
(324,113,l)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10103;
},
{
glyphname = three.blackCircled;
lastChange = "2025-03-02 12:26:16 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(384,108,o),
(323,186,o),
(323,291,c),
(434,291,l),
(436,241,o),
(465,212,o),
(510,212,cs),
(553,212,o),
(577,239,o),
(577,274,cs),
(577,309,o),
(551,330,o),
(508,330,cs),
(464,330,l),
(464,428,l),
(508,428,ls),
(541,428,o),
(564,447,o),
(564,478,cs),
(564,509,o),
(540,530,o),
(504,530,cs),
(457,530,o),
(434,493,o),
(438,459,c),
(327,459,l),
(323,560,o),
(386,634,o),
(507,634,cs),
(613,634,o),
(686,576,o),
(686,493,cs),
(686,444,o),
(660,404,o),
(618,383,c),
(670,365,o),
(697,329,o),
(697,270,cs),
(697,173,o),
(623,108,o),
(509,108,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10104;
},
{
glyphname = four.blackCircled;
lastChange = "2025-03-02 12:24:08 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(525,212,l),
(378,212,ls),
(331,212,o),
(301,242,o),
(301,286,cs),
(301,317,o),
(321,348,o),
(341,388,cs),
(462,623,l),
(591,623,l),
(437,315,l),
(525,315,l),
(525,435,l),
(639,435,l),
(639,315,l),
(699,315,l),
(699,212,l),
(639,212,l),
(639,118,l),
(525,118,l)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10105;
},
{
glyphname = five.blackCircled;
lastChange = "2025-03-02 12:26:20 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(395,114,o),
(323,185,o),
(324,284,c),
(441,284,l),
(444,244,o),
(468,222,o),
(506,222,cs),
(550,222,o),
(574,248,o),
(574,295,cs),
(574,342,o),
(550,368,o),
(505,368,cs),
(472,368,o),
(452,353,o),
(443,329,c),
(326,329,l),
(360,629,l),
(680,629,l),
(680,524,l),
(466,524,l),
(456,448,l),
(471,459,o),
(496,471,o),
(532,471,cs),
(635,471,o),
(697,405,o),
(697,295,cs),
(697,189,o),
(629,114,o),
(506,114,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10106;
},
{
glyphname = six.blackCircled;
lastChange = "2025-03-02 12:26:24 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(378,108,o),
(310,201,o),
(306,357,cs),
(301,529,o),
(371,635,o),
(511,635,cs),
(611,635,o),
(687,572,o),
(690,478,c),
(577,478,l),
(571,506,o),
(551,526,o),
(516,526,cs),
(459,526,o),
(426,477,o),
(426,404,cs),
(426,400,l),
(450,430,o),
(499,445,o),
(540,445,cs),
(626,445,o),
(694,380,o),
(694,283,cs),
(694,188,o),
(628,108,o),
(507,108,cs)
);
},
{
closed = 1;
nodes = (
(439,242,o),
(468,214,o),
(509,214,cs),
(550,214,o),
(578,242,o),
(578,282,cs),
(578,322,o),
(550,349,o),
(509,349,cs),
(468,349,o),
(439,322,o),
(439,282,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10107;
},
{
glyphname = seven.blackCircled;
lastChange = "2025-09-12 12:56:04 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(562,516,l),
(338,516,l),
(338,625,l),
(584,625,ls),
(652,625,o),
(683,594,o),
(683,543,cs),
(683,517,o),
(677,498,o),
(669,477,cs),
(533,118,l),
(402,118,l)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10108;
},
{
glyphname = eight.blackCircled;
lastChange = "2025-03-02 12:24:08 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(381,107,o),
(306,166,o),
(306,258,cs),
(306,308,o),
(335,353,o),
(382,374,c),
(338,396,o),
(313,439,o),
(313,486,cs),
(313,577,o),
(385,635,o),
(500,635,cs),
(616,635,o),
(688,578,o),
(688,487,cs),
(688,438,o),
(660,395,o),
(618,374,c),
(666,353,o),
(695,306,o),
(695,258,cs),
(695,166,o),
(620,107,o),
(501,107,cs)
);
},
{
closed = 1;
nodes = (
(427,234,o),
(455,211,o),
(500,211,cs),
(546,211,o),
(574,234,o),
(574,271,cs),
(574,306,o),
(544,329,o),
(500,329,cs),
(457,329,o),
(427,306,o),
(427,271,cs)
);
},
{
closed = 1;
nodes = (
(431,445,o),
(459,423,o),
(500,423,cs),
(542,423,o),
(570,445,o),
(570,476,cs),
(570,510,o),
(544,530,o),
(500,530,cs),
(457,530,o),
(431,510,o),
(431,476,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10109;
},
{
glyphname = nine.blackCircled;
lastChange = "2025-03-02 12:27:57 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = -1;
locked = 1;
ref = _part.blackCircle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(637,635,o),
(705,542,o),
(709,386,cs),
(714,214,o),
(644,108,o),
(504,108,cs),
(404,108,o),
(328,171,o),
(325,265,c),
(438,265,l),
(444,237,o),
(464,217,o),
(499,217,cs),
(556,217,o),
(589,266,o),
(589,339,cs),
(589,343,l),
(565,313,o),
(516,298,o),
(475,298,cs),
(389,298,o),
(321,363,o),
(321,460,cs),
(321,555,o),
(387,635,o),
(508,635,cs)
);
},
{
closed = 1;
nodes = (
(576,501,o),
(547,529,o),
(506,529,cs),
(465,529,o),
(437,501,o),
(437,461,cs),
(437,421,o),
(465,394,o),
(506,394,cs),
(547,394,o),
(576,421,o),
(576,461,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 10110;
},
{
glyphname = zero.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(626,110,o),
(708,210,o),
(708,369,cs),
(708,530,o),
(627,631,o),
(501,631,cs),
(373,631,o),
(293,531,o),
(293,371,cs),
(293,211,o),
(372,110,o),
(498,110,cs)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(446,215,o),
(419,266,o),
(419,371,cs),
(419,476,o),
(446,526,o),
(500,526,cs),
(554,526,o),
(581,476,o),
(581,371,cs),
(581,266,o),
(554,215,o),
(500,215,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9450;
},
{
glyphname = one.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(598,118,l),
(598,623,l),
(481,623,l),
(458,529,o),
(426,530,o),
(345,530,c),
(345,422,l),
(424,422,o),
(452,425,o),
(475,440,c),
(475,118,l)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9312;
},
{
glyphname = two.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(686,113,l),
(686,219,l),
(409,219,l),
(469,191,l),
(441,224,o),
(489,254,o),
(542,283,cs),
(631,331,o),
(697,378,o),
(697,472,cs),
(697,569,o),
(626,630,o),
(513,630,cs),
(387,630,o),
(320,548,o),
(326,433,c),
(443,433,l),
(443,491,o),
(474,525,o),
(513,525,cs),
(549,525,o),
(574,503,o),
(574,472,cs),
(574,423,o),
(522,400,o),
(475,378,cs),
(364,325,o),
(324,266,o),
(324,174,cs),
(324,113,l)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9313;
},
{
glyphname = three.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(623,108,o),
(697,173,o),
(697,270,cs),
(697,349,o),
(648,386,o),
(558,395,c),
(575,369,l),
(642,380,o),
(686,429,o),
(686,493,cs),
(686,576,o),
(613,634,o),
(507,634,cs),
(386,634,o),
(323,560,o),
(327,459,c),
(438,459,l),
(434,493,o),
(457,530,o),
(504,530,cs),
(540,530,o),
(564,509,o),
(564,478,cs),
(564,447,o),
(541,428,o),
(508,428,cs),
(464,428,l),
(464,330,l),
(508,330,ls),
(551,330,o),
(577,309,o),
(577,274,cs),
(577,239,o),
(553,212,o),
(510,212,cs),
(465,212,o),
(436,241,o),
(434,291,c),
(323,291,l),
(323,186,o),
(384,108,o),
(509,108,cs)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9314;
},
{
glyphname = four.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(699,212,l),
(699,315,l),
(434,315,l),
(436,313,l),
(591,623,l),
(462,623,l),
(341,388,ls),
(321,348,o),
(301,317,o),
(301,286,cs),
(301,242,o),
(331,212,o),
(378,212,cs)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(639,118,l),
(639,435,l),
(525,435,l),
(525,118,l)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9315;
},
{
glyphname = five.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(629,114,o),
(697,189,o),
(697,295,cs),
(697,405,o),
(635,471,o),
(532,471,cs),
(496,471,o),
(471,459,o),
(456,448,c),
(466,524,l),
(680,524,l),
(680,629,l),
(360,629,l),
(326,329,l),
(443,329,l),
(452,353,o),
(472,368,o),
(505,368,cs),
(550,368,o),
(574,342,o),
(574,295,cs),
(574,248,o),
(550,222,o),
(506,222,cs),
(468,222,o),
(444,244,o),
(441,284,c),
(324,284,l),
(323,185,o),
(395,114,o),
(506,114,cs)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9316;
},
{
glyphname = six.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(628,108,o),
(694,188,o),
(694,283,cs),
(694,380,o),
(626,445,o),
(540,445,cs),
(488,445,o),
(422,421,o),
(412,370,c),
(433,342,l),
(427,374,o),
(426,389,o),
(426,404,cs),
(426,477,o),
(459,526,o),
(516,526,cs),
(551,526,o),
(571,506,o),
(577,478,c),
(690,478,l),
(687,572,o),
(611,635,o),
(511,635,cs),
(371,635,o),
(301,529,o),
(306,357,cs),
(310,201,o),
(378,108,o),
(507,108,cs)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(468,214,o),
(439,242,o),
(439,282,cs),
(439,322,o),
(468,349,o),
(509,349,cs),
(550,349,o),
(578,322,o),
(578,282,cs),
(578,242,o),
(550,214,o),
(509,214,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9317;
},
{
glyphname = seven.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(542,118,l),
(678,477,ls),
(686,498,o),
(692,517,o),
(692,543,cs),
(692,594,o),
(661,625,o),
(593,625,cs),
(347,625,l),
(347,516,l),
(572,516,l),
(571,517,l),
(411,118,l)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9318;
},
{
glyphname = eight.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(620,107,o),
(695,166,o),
(695,258,cs),
(695,318,o),
(650,376,o),
(581,384,c),
(585,363,l),
(645,374,o),
(688,426,o),
(688,487,cs),
(688,578,o),
(616,635,o),
(500,635,cs),
(385,635,o),
(313,577,o),
(313,486,cs),
(313,428,o),
(351,375,o),
(418,362,c),
(418,385,l),
(349,373,o),
(306,320,o),
(306,258,cs),
(306,166,o),
(381,107,o),
(501,107,cs)
);
},
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
},
{
closed = 1;
nodes = (
(455,211,o),
(427,234,o),
(427,271,cs),
(427,306,o),
(457,329,o),
(500,329,cs),
(544,329,o),
(574,306,o),
(574,271,cs),
(574,234,o),
(546,211,o),
(500,211,cs)
);
},
{
closed = 1;
nodes = (
(459,423,o),
(431,445,o),
(431,476,cs),
(431,510,o),
(457,530,o),
(500,530,cs),
(544,530,o),
(570,510,o),
(570,476,cs),
(570,445,o),
(542,423,o),
(500,423,cs)
);
}
);
width = 1000;
}
);
metricLeft = "=40";
metricRight = "=|";
unicode = 9319;
},
{
glyphname = nine.circled;
lastChange = "2025-09-12 13:05:53 +0000";
layers = (
{
layerId = m002;
shapes = (
{
locked = 1;
ref = _part.circle;
scale = (0.9882,0.9882);
},
{
alignment = -1;
angle = 180;
pos = (718,621);
ref = six;
scale = (0.665,0.665);
}
);
width = 999;
}
);
metricLeft = "=40";
metricRight = "=40";
unicode = 9320;
},
{
glyphname = nbspace;
lastChange = "2025-09-12 13:17:16 +0000";
layers = (
{
layerId = m002;
width = 220;
}
);
metricWidth = space;
unicode = 160;
},
{
glyphname = lineseparator;
layers = (
{
layerId = m002;
width = 600;
}
);
unicode = 8232;
},
{
glyphname = paragraphseparator;
layers = (
{
layerId = m002;
width = 600;
}
);
unicode = 8233;
},
{
glyphname = guillemetleft;
kernRight = KO_guillemotleft;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = guilsinglleft;
},
{
pos = (234,0);
ref = guilsinglleft;
}
);
width = 690;
},
{
associatedMasterId = m002;
layerId = m003;
shapes = (
{
pos = (1,0);
ref = guilsinglleft;
},
{
pos = (235,0);
ref = guilsinglleft;
}
);
width = 665;
},
{
associatedMasterId = m002;
layerId = m004;
shapes = (
{
pos = (-1,0);
ref = guilsinglleft;
},
{
pos = (233,0);
ref = guilsinglleft;
}
);
width = 634;
}
);
metricLeft = H;
metricRight = H;
note = guillemotleft;
unicode = 171;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = quotes;
};
};
},
{
glyphname = guillemetright;
kernLeft = KO_guillemotright;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
pos = (690,0);
ref = guillemetleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
10 7 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 690;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(644,52,l),
(776,290,l),
(644,527,l),
(502,527,l),
(633,290,l),
(502,52,l)
);
},
{
closed = 1;
nodes = (
(410,52,l),
(542,290,l),
(410,527,l),
(268,527,l),
(399,290,l),
(268,52,l)
);
}
);
};
layerId = m003;
shapes = (
{
alignment = 1;
pos = (690,0);
ref = guillemetleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
10 7 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 690;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(644,52,l),
(776,290,l),
(644,527,l),
(502,527,l),
(633,290,l),
(502,52,l)
);
},
{
closed = 1;
nodes = (
(410,52,l),
(542,290,l),
(410,527,l),
(268,527,l),
(399,290,l),
(268,52,l)
);
}
);
};
layerId = m004;
shapes = (
{
alignment = 1;
pos = (690,0);
ref = guillemetleft;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 48 values pushed */
10 7 4 1 4 1 0 1 76 2 1 0 1 1 0 87 2 1 0 0 1 95 5 3 4 3 1 0 1 79 6 6 0 0 6 11 6 11 9 8 0 5 0 5 18 6 8 23 
CALL[ ]	/* CallFunction */";
};
width = 690;
}
);
note = guillemotright;
unicode = 187;
userData = {
KernOnSpecialSpacing = {
L = quotes;
R = NoKerning;
};
};
},
{
glyphname = exclamdown.case;
lastChange = "2025-03-02 12:28:20 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
angle = 180;
pos = (336,750);
ref = exclam;
}
);
width = 336;
}
);
},
{
glyphname = questiondown.case;
lastChange = "2025-03-02 12:28:20 +0000";
layers = (
{
layerId = m002;
shapes = (
{
alignment = 1;
angle = 180;
pos = (547,750);
ref = question;
}
);
width = 547;
}
);
},
{
glyphname = currency;
kernLeft = currency;
kernRight = currency;
lastChange = "2025-03-02 17:43:23 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(515,405,o),
(498,451,o),
(470,487,c),
(529,546,l),
(483,593,l),
(422,532,l),
(385,558,o),
(339,573,o),
(290,573,cs),
(242,573,o),
(196,558,o),
(159,532,c),
(97,594,l),
(50,547,l),
(110,487,l),
(82,451,o),
(65,405,o),
(65,354,cs),
(65,304,o),
(82,259,o),
(110,223,c),
(51,164,l),
(97,117,l),
(158,178,l),
(195,151,o),
(241,136,o),
(290,136,cs),
(338,136,o),
(384,151,o),
(421,177,c),
(480,117,l),
(528,164,l),
(470,222,l),
(498,258,o),
(515,304,o),
(515,354,cs)
);
},
{
closed = 1;
nodes = (
(241,268,o),
(204,305,o),
(204,354,cs),
(204,405,o),
(241,441,o),
(290,441,cs),
(339,441,o),
(376,405,o),
(376,354,cs),
(376,305,o),
(339,268,o),
(290,268,cs)
);
}
);
width = 579;
}
);
metricLeft = "=50";
metricRight = "=|";
unicode = 164;
},
{
glyphname = euro;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(608,-15,o),
(745,91,o),
(745,280,c),
(580,280,l),
(580,203,o),
(529,133,o),
(437,133,cs),
(331,133,o),
(264,227,o),
(264,374,cs),
(264,523,o),
(332,615,o),
(435,615,cs),
(517,615,o),
(568,557,o),
(574,482,c),
(740,482,l),
(740,648,o),
(615,765,o),
(432,765,cs),
(226,765,o),
(94,616,o),
(94,375,cs),
(94,135,o),
(225,-15,o),
(434,-15,cs)
);
},
{
closed = 1;
nodes = (
(469,247,l),
(469,340,l),
(46,340,l),
(46,247,l)
);
},
{
closed = 1;
nodes = (
(469,415,l),
(469,509,l),
(46,509,l),
(46,415,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
0 5 1 0 1 5 0 128 0 8 3 2 3 8 2 128 0 1 0 0 3 1 0 103 0 3 0 2 7 3 2 103 0 6 6 4 97 10 1 4 4 46 77 0 7 7 9 97 0 9 9 47 9 78 9 8 34 32 29 28 25 23 17 15 13 12 8 40 9 40 17 17 17 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 791;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(679,-12,o),
(820,104,o),
(844,280,c),
(680,280,l),
(666,193,o),
(592,134,o),
(500,134,cs),
(374,134,o),
(288,232,o),
(288,375,cs),
(288,522,o),
(377,614,o),
(489,614,cs),
(572,614,o),
(645,559,o),
(665,482,c),
(827,482,l),
(802,650,o),
(671,760,o),
(500,760,cs),
(356,760,o),
(238,690,o),
(174,574,cs),
(141,515,o),
(125,449,o),
(125,375,cs),
(125,227,o),
(194,105,o),
(308,38,cs),
(365,5,o),
(429,-12,o),
(500,-12,cs)
);
},
{
closed = 1;
nodes = (
(528,247,l),
(537,340,l),
(24,340,l),
(15,247,l)
);
},
{
closed = 1;
nodes = (
(543,415,l),
(552,509,l),
(39,509,l),
(30,415,l)
);
}
);
};
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(619,-15,o),
(745,103,o),
(745,280,c),
(656,280,l),
(656,157,o),
(577,66,o),
(455,66,cs),
(316,66,o),
(222,190,o),
(222,375,cs),
(222,559,o),
(315,683,o),
(453,683,cs),
(569,683,o),
(648,598,o),
(650,482,c),
(740,482,l),
(740,648,o),
(621,765,o),
(452,765,cs),
(259,765,o),
(130,611,o),
(130,376,cs),
(130,141,o),
(259,-15,o),
(451,-15,cs)
);
},
{
closed = 1;
nodes = (
(487,265,l),
(487,322,l),
(64,322,l),
(64,265,l)
);
},
{
closed = 1;
nodes = (
(487,433,l),
(487,491,l),
(64,491,l),
(64,433,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
0 5 1 0 1 5 0 128 0 8 3 2 3 8 2 128 0 1 0 0 3 1 0 103 0 3 0 2 7 3 2 103 0 6 6 4 97 10 1 4 4 46 77 0 7 7 9 97 0 9 9 47 9 78 9 8 34 32 29 28 25 23 17 15 13 12 8 40 9 40 17 17 17 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 809;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(678,-12,o),
(819,104,o),
(843,280,c),
(679,280,l),
(665,193,o),
(591,134,o),
(499,134,cs),
(373,134,o),
(287,232,o),
(287,375,cs),
(287,522,o),
(376,614,o),
(488,614,cs),
(571,614,o),
(644,559,o),
(664,482,c),
(826,482,l),
(801,650,o),
(670,760,o),
(499,760,cs),
(355,760,o),
(237,690,o),
(173,574,cs),
(140,515,o),
(124,449,o),
(124,375,cs),
(124,227,o),
(193,105,o),
(307,38,cs),
(364,5,o),
(428,-12,o),
(499,-12,cs)
);
},
{
closed = 1;
nodes = (
(527,247,l),
(536,340,l),
(23,340,l),
(14,247,l)
);
},
{
closed = 1;
nodes = (
(542,415,l),
(551,509,l),
(38,509,l),
(29,415,l)
);
}
);
};
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(619,-15,o),
(739,110,o),
(739,280,c),
(696,280,l),
(696,130,o),
(599,25,o),
(460,25,cs),
(299,25,o),
(189,167,o),
(189,375,cs),
(189,583,o),
(298,725,o),
(458,725,cs),
(593,725,o),
(690,626,o),
(690,482,c),
(734,482,l),
(734,648,o),
(620,765,o),
(459,765,cs),
(273,765,o),
(146,607,o),
(146,376,cs),
(146,144,o),
(273,-15,o),
(456,-15,cs)
);
},
{
closed = 1;
nodes = (
(492,276,l),
(492,311,l),
(69,311,l),
(69,276,l)
);
},
{
closed = 1;
nodes = (
(492,444,l),
(492,480,l),
(69,480,l),
(69,444,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 77 values pushed */
0 5 1 0 1 5 0 128 0 8 3 2 3 8 2 128 0 1 0 0 3 1 0 103 0 3 0 2 7 3 2 103 0 6 6 4 97 10 1 4 4 46 77 0 7 7 9 97 0 9 9 47 9 78 9 8 34 32 29 28 25 23 17 15 13 12 8 40 9 40 17 17 17 16 11 8 26 
CALL[ ]	/* CallFunction */";
};
width = 808;
}
);
metricLeft = C;
metricRight = C;
note = Euro;
unicode = 8364;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = symbols;
};
};
},
{
glyphname = bulletoperator;
lastChange = "2025-03-02 12:28:09 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(235,277,o),
(277,317,o),
(277,375,cs),
(277,431,o),
(235,472,o),
(176,472,cs),
(117,472,o),
(74,431,o),
(74,375,cs),
(74,317,o),
(117,277,o),
(176,277,cs)
);
}
);
width = 351;
}
);
metricLeft = "=plus";
metricRight = "=plus";
unicode = 8729;
},
{
glyphname = upArrow;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(230,314,l),
(429,678,l),
(320,678,l),
(518,314,l),
(676,314,l),
(424,689,l),
(326,689,l),
(74,314,l)
);
},
{
closed = 1;
nodes = (
(437,1,l),
(437,607,l),
(312,607,l),
(312,1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 4 2 1 4 0 1 1 76 3 1 1 74 2 1 1 0 1 133 0 0 0 118 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 750;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(394,516,l),
(603,236,l),
(704,316,l),
(394,690,l),
(85,316,l),
(186,236,l)
);
},
{
closed = 1;
nodes = (
(462,1,l),
(462,537,l),
(328,537,l),
(328,1,l)
);
}
);
};
guides = (
{
angle = 236.0989;
pos = (150,314);
}
);
layerId = m003;
shapes = (
{
closed = 1;
nodes = (
(186,314,l),
(420,698,l),
(375,698,l),
(608,314,l),
(699,314,l),
(433,711,l),
(364,711,l),
(97,314,l)
);
},
{
closed = 1;
nodes = (
(433,1,l),
(433,667,l),
(362,667,l),
(362,1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 4 2 1 4 0 1 1 76 3 1 1 74 2 1 1 0 1 133 0 0 0 118 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 796;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(412,516,l),
(621,236,l),
(722,316,l),
(412,690,l),
(103,316,l),
(204,236,l)
);
},
{
closed = 1;
nodes = (
(480,1,l),
(480,537,l),
(346,537,l),
(346,1,l)
);
}
);
};
guides = (
{
angle = 236.0989;
pos = (168,314);
}
);
layerId = m004;
shapes = (
{
closed = 1;
nodes = (
(151,314,l),
(407,711,l),
(401,711,l),
(655,314,l),
(705,314,l),
(429,725,l),
(380,725,l),
(103,314,l)
);
},
{
closed = 1;
nodes = (
(422,1,l),
(422,705,l),
(385,705,l),
(385,1,l)
);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 4 2 1 4 0 1 1 76 3 1 1 74 2 1 1 0 1 133 0 0 0 118 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 809;
}
);
metricLeft = H;
metricRight = H;
note = arrowup;
unicode = 8593;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = rightArrow;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
angle = -89.1;
pos = (68,697);
ref = upArrow;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 0 1 1 76 2 1 2 1 74 5 4 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 838;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(831,289,l),
(457,599,l),
(376,498,l),
(656,289,l),
(376,81,l),
(457,-20,l)
);
},
{
closed = 1;
nodes = (
(677,222,l),
(677,357,l),
(141,357,l),
(141,222,l)
);
}
);
};
layerId = m003;
shapes = (
{
angle = -89.1;
pos = (90,697);
ref = upArrow;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 0 1 1 76 2 1 2 1 74 5 4 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 905;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(843,289,l),
(469,599,l),
(388,498,l),
(668,289,l),
(388,81,l),
(469,-20,l)
);
},
{
closed = 1;
nodes = (
(689,222,l),
(689,357,l),
(153,357,l),
(153,222,l)
);
}
);
};
layerId = m004;
shapes = (
{
angle = -89.1;
pos = (96,697);
ref = upArrow;
}
);
userData = {
assembly = "NPUSHB[ ]	/* 44 values pushed */
3 1 0 1 1 76 2 1 2 1 74 5 4 2 0 73 2 1 1 0 0 1 87 2 1 1 1 0 95 0 0 1 0 79 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 932;
}
);
metricLeft = H;
metricRight = H;
note = arrowright;
unicode = 8594;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = downArrow;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (0,690);
ref = upArrow;
scale = (1,-1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 4 2 1 4 1 0 1 76 3 1 1 73 0 0 1 0 133 2 1 1 1 118 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 750;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(649,374,l),
(548,454,l),
(340,174,l),
(131,454,l),
(30,374,l),
(340,0,l)
);
},
{
closed = 1;
nodes = (
(406,153,l),
(406,689,l),
(272,689,l),
(272,153,l)
);
}
);
};
layerId = m003;
shapes = (
{
pos = (0,690);
ref = upArrow;
scale = (1,-1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 4 2 1 4 1 0 1 76 3 1 1 73 0 0 1 0 133 2 1 1 1 118 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 796;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(649,374,l),
(548,454,l),
(340,174,l),
(131,454,l),
(30,374,l),
(340,0,l)
);
},
{
closed = 1;
nodes = (
(406,153,l),
(406,689,l),
(272,689,l),
(272,153,l)
);
}
);
};
layerId = m004;
shapes = (
{
pos = (0,690);
ref = upArrow;
scale = (1,-1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 33 values pushed */
5 4 2 1 4 1 0 1 76 3 1 1 73 0 0 1 0 133 2 1 1 1 118 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 809;
}
);
metricLeft = H;
metricRight = H;
note = arrowdown;
unicode = 8595;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = leftArrow;
lastChange = "2025-09-12 13:12:41 +0000";
layers = (
{
layerId = m002;
shapes = (
{
pos = (838,0);
ref = rightArrow;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
3 1 1 0 1 76 5 4 2 0 74 2 1 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 838;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(707,80,l),
(427,290,l),
(707,497,l),
(626,598,l),
(252,289,l),
(626,-21,l)
);
},
{
closed = 1;
nodes = (
(942,221,l),
(942,356,l),
(406,356,l),
(406,221,l)
);
}
);
};
layerId = m003;
shapes = (
{
pos = (905,0);
ref = rightArrow;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
3 1 1 0 1 76 5 4 2 0 74 2 1 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 905;
},
{
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(733,80,l),
(453,290,l),
(733,497,l),
(652,598,l),
(278,289,l),
(652,-21,l)
);
},
{
closed = 1;
nodes = (
(968,221,l),
(968,356,l),
(432,356,l),
(432,221,l)
);
}
);
};
layerId = m004;
shapes = (
{
pos = (931,0);
ref = rightArrow;
scale = (-1,1);
}
);
userData = {
assembly = "NPUSHB[ ]	/* 43 values pushed */
3 1 1 0 1 76 5 4 2 0 74 2 1 2 1 73 0 0 1 1 0 87 0 0 0 1 95 2 1 1 0 1 79 6 6 6 9 6 9 23 3 6 23 
CALL[ ]	/* CallFunction */";
};
width = 932;
}
);
metricLeft = H;
metricRight = H;
note = arrowleft;
unicode = 8592;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = lozenge;
kernLeft = lozenge;
kernRight = lozenge;
lastChange = "2025-03-02 17:43:09 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(394,-13,o),
(424,21,o),
(453,74,cs),
(628,377,l),
(453,678,ls),
(424,731,o),
(394,765,o),
(339,765,cs),
(284,765,o),
(254,731,o),
(225,678,cs),
(50,377,l),
(225,74,ls),
(254,21,o),
(284,-13,o),
(339,-13,cs)
);
},
{
closed = 1;
nodes = (
(233,377,l),
(339,568,l),
(445,377,l),
(339,185,l)
);
}
);
width = 678;
}
);
metricLeft = "=50";
metricRight = "=|";
unicode = 9674;
},
{
glyphname = section;
lastChange = "2025-03-02 17:40:56 +0000";
layers = (
{
background = {
shapes = (
{
closed = 1;
nodes = (
(418,-130,o),
(518,-54,o),
(518,69,cs),
(518,103,o),
(503,133,o),
(482,160,c),
(514,192,o),
(546,236,o),
(546,303,cs),
(546,385,o),
(482,455,o),
(374,478,cs),
(289,497,o),
(226,512,o),
(226,549,cs),
(226,574,o),
(246,594,o),
(279,594,cs),
(313,594,o),
(339,573,o),
(342,532,c),
(513,532,l),
(503,659,o),
(414,738,o),
(282,738,cs),
(146,738,o),
(54,655,o),
(54,537,cs),
(54,498,o),
(65,467,o),
(85,442,c),
(53,414,o),
(20,364,o),
(20,308,cs),
(20,214,o),
(97,142,o),
(216,125,cs),
(268,118,o),
(341,105,o),
(341,60,cs),
(341,34,o),
(319,15,o),
(285,15,cs),
(246,15,o),
(217,39,o),
(215,83,c),
(39,83,l),
(50,-52,o),
(148,-130,o),
(284,-130,cs)
);
},
{
closed = 1;
nodes = (
(345,241,o),
(329,246,o),
(315,251,cs),
(215,278,o),
(185,290,o),
(185,329,cs),
(185,345,o),
(192,363,o),
(202,374,c),
(216,368,o),
(228,364,o),
(243,360,cs),
(347,331,o),
(379,321,o),
(379,283,cs),
(379,267,o),
(372,247,o),
(362,234,c)
);
}
);
};
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(451,-94,o),
(538,-24,o),
(538,96,cs),
(538,130,o),
(523,160,o),
(502,187,c),
(534,219,o),
(566,263,o),
(566,330,cs),
(566,412,o),
(502,482,o),
(394,505,cs),
(296,528,o),
(224,546,o),
(224,591,cs),
(224,627,o),
(265,642,o),
(299,642,cs),
(347,642,o),
(388,612,o),
(388,572,c),
(540,572,l),
(540,681,o),
(443,757,o),
(309,757,cs),
(201,757,o),
(74,707,o),
(74,564,cs),
(74,525,o),
(85,494,o),
(105,469,c),
(73,441,o),
(40,391,o),
(40,335,cs),
(40,241,o),
(117,169,o),
(236,152,cs),
(298,144,o),
(384,129,o),
(384,77,cs),
(384,42,o),
(350,23,o),
(303,23,cs),
(249,23,o),
(212,48,o),
(201,106,c),
(58,106,l),
(58,-18,o),
(152,-94,o),
(305,-94,cs)
);
},
{
closed = 1;
nodes = (
(369,258,o),
(352,263,o),
(337,267,cs),
(230,296,o),
(198,311,o),
(198,352,cs),
(198,380,o),
(206,399,o),
(216,411,c),
(231,405,o),
(244,401,o),
(260,396,cs),
(372,365,o),
(406,355,o),
(406,314,cs),
(406,297,o),
(398,275,o),
(388,251,c)
);
}
);
width = 606;
}
);
unicode = 167;
},
{
glyphname = trademark;
lastChange = "2025-03-02 17:42:36 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(912,201,o),
(947,235,o),
(962,302,cs),
(1027,583,ls),
(1028,587,o),
(1031,585,o),
(1031,583,cs),
(1031,214,l),
(1167,214,l),
(1167,641,ls),
(1167,720,o),
(1118,765,o),
(1050,765,cs),
(986,765,o),
(942,727,o),
(923,651,cs),
(856,383,ls),
(855,379,o),
(852,379,o),
(851,383,cs),
(782,651,ls),
(762,730,o),
(721,765,o),
(658,765,cs),
(590,765,o),
(540,720,o),
(540,641,cs),
(540,214,l),
(677,214,l),
(677,577,ls),
(677,579,o),
(680,580,o),
(681,578,c),
(746,302,ls),
(762,234,o),
(797,201,o),
(854,201,cs)
);
},
{
closed = 1;
nodes = (
(330,210,l),
(330,625,l),
(500,625,l),
(500,750,l),
(20,750,l),
(20,625,l),
(190,625,l),
(190,210,l)
);
}
);
width = 1241;
}
);
metricLeft = T;
metricRight = M;
unicode = 8482;
},
{
glyphname = dieresiscomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (324,750);
}
);
layerId = m002;
shapes = (
{
ref = dieresis;
}
);
width = 651;
}
);
unicode = 776;
},
{
glyphname = dotaccentcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (204,750);
}
);
layerId = m002;
shapes = (
{
ref = dotaccent;
}
);
width = 407;
}
);
unicode = 775;
},
{
glyphname = gravecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (233,750);
}
);
layerId = m002;
shapes = (
{
pos = (342,0);
ref = acutecomb;
scale = (-1,1);
}
);
width = 342;
}
);
unicode = 768;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = acutecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (109,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(179,810,l),
(303,963,l),
(128,963,l),
(47,810,l)
);
}
);
width = 342;
}
);
unicode = 769;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = hungarumlautcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (279,750);
}
);
layerId = m002;
shapes = (
{
ref = hungarumlaut;
}
);
width = 676;
}
);
unicode = 779;
},
{
glyphname = circumflexcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (224,750);
},
{
name = top;
pos = (224,940);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(161,810,l),
(257,914,l),
(191,914,l),
(286,810,l),
(411,810,l),
(366,869,ls),
(324,924,o),
(303,963,o),
(223,963,cs),
(142,963,o),
(123,924,o),
(81,868,cs),
(37,810,l)
);
}
);
width = 448;
}
);
unicode = 770;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = caroncomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (287,750);
}
);
layerId = m002;
shapes = (
{
ref = caron;
}
);
width = 574;
}
);
unicode = 780;
},
{
glyphname = brevecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (213,750);
},
{
name = top;
pos = (213,938);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(319,800,o),
(386,863,o),
(386,963,c),
(267,963,l),
(267,920,o),
(245,890,o),
(213,890,cs),
(183,890,o),
(161,920,o),
(161,963,c),
(40,963,l),
(40,863,o),
(107,800,o),
(213,800,cs)
);
}
);
width = 426;
}
);
unicode = 774;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = ringcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (232,750);
}
);
layerId = m002;
shapes = (
{
ref = ring;
}
);
width = 464;
}
);
unicode = 778;
},
{
glyphname = tildecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (253,750);
},
{
name = top;
pos = (253,966);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(379,805,o),
(426,841,o),
(426,921,cs),
(426,958,l),
(320,958,l),
(320,938,ls),
(320,918,o),
(313,912,o),
(302,912,cs),
(273,912,o),
(255,966,o),
(188,966,cs),
(127,966,o),
(80,935,o),
(80,850,cs),
(80,810,l),
(185,810,l),
(185,833,ls),
(185,857,o),
(194,861,o),
(203,861,cs),
(232,861,o),
(255,805,o),
(319,805,cs)
);
}
);
width = 506;
},
{
anchors = (
{
name = _top;
pos = (253,750);
}
);
associatedMasterId = m002;
layerId = "827BC9B7-1B42-4E36-9FCE-DB82AA51CF4D";
name = "18 Jun 24 at 18:04";
shapes = (
{
closed = 1;
nodes = (
(388,805,o),
(426,872,o),
(426,958,c),
(302,958,l),
(302,927,o),
(293,917,o),
(278,917,cs),
(256,917,o),
(233,963,o),
(180,963,cs),
(118,963,o),
(80,896,o),
(80,810,c),
(204,810,l),
(203,841,o),
(212,851,o),
(227,851,cs),
(249,851,o),
(275,805,o),
(327,805,cs)
);
}
);
width = 506;
}
);
unicode = 771;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = macroncomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (256,750);
}
);
layerId = m002;
shapes = (
{
ref = macron;
}
);
width = 512;
}
);
unicode = 772;
},
{
glyphname = hookabovecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (178,750);
}
);
guides = (
{
angle = 180;
pos = (371,816);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(234,810,l),
(237,818,o),
(242,822,o),
(251,828,cs),
(291,855,o),
(304,875,o),
(304,904,cs),
(304,966,o),
(246,1002,o),
(178,1002,cs),
(104,1002,o),
(48,955,o),
(48,884,c),
(145,884,l),
(148,903,o),
(161,917,o),
(178,917,cs),
(194,917,o),
(203,908,o),
(203,897,cs),
(203,884,o),
(182,873,o),
(158,859,cs),
(139,848,o),
(124,831,o),
(124,810,c)
);
}
);
width = 363;
},
{
anchors = (
{
name = _top;
pos = (180,748);
}
);
associatedMasterId = m002;
guides = (
{
angle = 180;
pos = (371,816);
}
);
layerId = "F4EFACC9-05AE-4751-9393-B6229BF6BF42";
name = "18 Jun 24 at 17:19";
shapes = (
{
closed = 1;
nodes = (
(228,816,l),
(228,825,ls),
(228,850,o),
(339,846,o),
(339,923,cs),
(339,980,o),
(278,1016,o),
(190,1016,cs),
(94,1016,o),
(27,973,o),
(21,911,c),
(135,911,l),
(141,929,o),
(161,941,o),
(187,941,cs),
(207,941,o),
(223,934,o),
(223,923,cs),
(223,897,o),
(133,901,o),
(133,833,cs),
(133,816,l)
);
}
);
width = 363;
},
{
anchors = (
{
name = _top;
pos = (180,750);
}
);
associatedMasterId = m002;
background = {
shapes = (
{
closed = 1;
nodes = (
(233,809,l),
(233,814,o),
(244,825,o),
(252,830,qs),
(275,847,o),
(303,886,o),
(303,916,qs),
(303,959,o),
(239,1011,o),
(185,1011,qs),
(161,1011,o),
(113,999,o),
(97,989,q),
(97,954,l),
(109,963,o),
(153,978,o),
(178,978,qs),
(221,978,o),
(266,941,o),
(266,910,qs),
(266,889,o),
(243,862,o),
(220,846,qs),
(203,834,o),
(188,819,o),
(188,809,q)
);
},
{
closed = 1;
nodes = (
(167,809,l),
(167,824,o),
(187,845,o),
(207,859,qs),
(226,873,o),
(245,894,o),
(245,907,qs),
(245,933,o),
(205,960,o),
(176,960,qs),
(154,960,o),
(111,945,o),
(97,935,q),
(97,902,l),
(100,900,l),
(133,925,o),
(167,925,qs),
(201,925,o),
(201,905,qs),
(201,898,o),
(191,885,o),
(169,871,o),
(163,867,qs),
(147,856,o),
(128,830,o),
(129,809,q)
);
}
);
};
guides = (
{
angle = 180;
pos = (371,816);
}
);
layerId = "2C5CC483-BE50-480F-9E06-F7A305C08243";
name = "18 Jun 24 at 17:35";
shapes = (
{
closed = 1;
nodes = (
(145,884,l),
(148,903,o),
(161,915,o),
(178,915,cs),
(194,915,o),
(204,908,o),
(204,895,cs),
(204,879,o),
(175,852,o),
(130,810,c),
(242,810,l),
(291,847,o),
(304,875,o),
(304,904,cs),
(304,966,o),
(246,1002,o),
(180,1002,cs),
(104,1002,o),
(48,955,o),
(48,884,c)
);
}
);
width = 363;
}
);
unicode = 777;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = horncomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _topright;
pos = (50,750);
},
{
name = topright;
pos = (343,856);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(294,701,o),
(339,768,o),
(332,858,c),
(196,858,l),
(201,777,o),
(177,750,o),
(109,750,cs),
(50,750,l),
(210,673,l)
);
}
);
width = 373;
}
);
unicode = 795;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = dotbelowcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (147,0);
},
{
name = bottom;
pos = (147,-249);
}
);
layerId = m002;
name = Bold;
shapes = (
{
closed = 1;
nodes = (
(198,-216,o),
(233,-181,o),
(233,-132,cs),
(233,-84,o),
(198,-50,o),
(147,-50,cs),
(96,-50,o),
(60,-84,o),
(60,-132,cs),
(60,-181,o),
(96,-216,o),
(147,-216,cs)
);
}
);
width = 293;
},
{
anchors = (
{
name = _bottom;
pos = (147,0);
},
{
name = bottom;
pos = (147,-249);
}
);
associatedMasterId = m002;
layerId = "6164503B-9C11-4420-9AEA-8B4FCF8612ED";
name = "27 Jun 24 at 12:19";
shapes = (
{
closed = 1;
nodes = (
(227,-180,l),
(227,-60,l),
(65,-60,l),
(65,-180,l)
);
}
);
width = 293;
}
);
unicode = 803;
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = commaaccentcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (133,90);
},
{
name = bottom;
pos = (133,-284);
}
);
layerId = m002;
shapes = (
{
pos = (0,-140);
ref = comma;
}
);
width = 276;
}
);
unicode = 806;
},
{
glyphname = cedillacomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
layerId = m002;
shapes = (
{
ref = cedilla;
}
);
width = 421;
}
);
unicode = 807;
},
{
glyphname = ogonekcomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _ogonek;
pos = (328,0);
}
);
layerId = m002;
shapes = (
{
ref = ogonek;
}
);
width = 428;
}
);
unicode = 808;
},
{
glyphname = brevecomb_acutecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (213,750);
}
);
layerId = m002;
shapes = (
{
alignment = -1;
pos = (109,223);
ref = acutecomb;
scale = (1,0.94);
},
{
closed = 1;
nodes = (
(319,800,o),
(386,863,o),
(386,947,c),
(267,947,l),
(267,912,o),
(246,890,o),
(213,890,cs),
(181,890,o),
(161,912,o),
(161,947,c),
(40,947,l),
(40,863,o),
(107,800,o),
(213,800,cs)
);
}
);
width = 426;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = brevecomb_gravecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (213,750);
}
);
layerId = m002;
shapes = (
{
pos = (-24,223);
ref = gravecomb;
scale = (1,0.94);
},
{
closed = 1;
nodes = (
(319,800,o),
(386,863,o),
(386,947,c),
(267,947,l),
(267,912,o),
(246,890,o),
(213,890,cs),
(181,890,o),
(161,912,o),
(161,947,c),
(40,947,l),
(40,863,o),
(107,800,o),
(213,800,cs)
);
}
);
width = 426;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = brevecomb_hookabovecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (213,750);
}
);
layerId = m002;
shapes = (
{
pos = (37,223);
ref = hookabovecomb;
scale = (1,0.94);
},
{
closed = 1;
nodes = (
(319,800,o),
(386,863,o),
(386,947,c),
(267,947,l),
(267,912,o),
(246,890,o),
(213,890,cs),
(181,890,o),
(161,912,o),
(161,947,c),
(40,947,l),
(40,863,o),
(107,800,o),
(213,800,cs)
);
}
);
width = 426;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = brevecomb_tildecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (213,750);
}
);
layerId = m002;
shapes = (
{
pos = (-40,233);
ref = tildecomb;
scale = (1,0.94);
},
{
closed = 1;
nodes = (
(319,800,o),
(386,863,o),
(386,947,c),
(267,947,l),
(267,912,o),
(246,890,o),
(213,890,cs),
(181,890,o),
(161,912,o),
(161,947,c),
(40,947,l),
(40,863,o),
(107,800,o),
(213,800,cs)
);
}
);
width = 426;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = circumflexcomb_acutecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (224,750);
}
);
layerId = m002;
shapes = (
{
pos = (0,81);
ref = circumflexcomb;
scale = (1,0.9);
},
{
alignment = -1;
pos = (348,126);
ref = acutecomb;
scale = (0.84,0.94);
}
);
width = 448;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = circumflexcomb_gravecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (224,750);
}
);
guides = (
{
angle = 90;
pos = (398,816);
}
);
layerId = m002;
shapes = (
{
pos = (0,81);
ref = circumflexcomb;
scale = (1,0.9);
},
{
alignment = -1;
pos = (556,126);
ref = acutecomb;
scale = (-0.84,0.94);
}
);
width = 448;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = circumflexcomb_hookabovecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (224,750);
}
);
layerId = m002;
shapes = (
{
pos = (0,81);
ref = circumflexcomb;
scale = (1,0.9);
},
{
closed = 1;
nodes = (
(446,923,l),
(450,938,o),
(473,948,o),
(486,961,cs),
(498,972,o),
(508,986,o),
(508,1008,cs),
(508,1066,o),
(446,1103,o),
(372,1103,cs),
(292,1103,o),
(231,1056,o),
(231,988,c),
(330,988,l),
(333,1010,o),
(348,1022,o),
(372,1022,cs),
(393,1022,o),
(405,1012,o),
(405,999,cs),
(405,987,o),
(390,978,o),
(375,968,cs),
(358,957,o),
(340,945,o),
(340,923,c)
);
}
);
width = 448;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = circumflexcomb_tildecomb;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (224,750);
}
);
layerId = m002;
shapes = (
{
pos = (0,81);
ref = circumflexcomb;
scale = (1,0.9);
},
{
alignment = -1;
pos = (-29,222);
ref = tildecomb;
scale = (1,0.94);
}
);
width = 448;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = horncomb.case;
lastChange = "2025-03-02 17:46:18 +0000";
layers = (
{
anchors = (
{
name = _topright;
pos = (50,748);
},
{
name = topright;
pos = (343,856);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(318,666,o),
(384,737,o),
(372,846,c),
(246,846,l),
(253,782,o),
(226,748,o),
(169,748,cs),
(50,748,l),
(210,671,l)
);
}
);
width = 373;
}
);
userData = {
KernOnSpecialSpacing = {
L = NoKerning;
R = NoKerning;
};
};
},
{
glyphname = dieresis;
lastChange = "2025-03-02 13:37:27 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (324,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(268,810,o),
(308,844,o),
(308,893,cs),
(308,941,o),
(268,975,o),
(217,975,cs),
(165,975,o),
(125,941,o),
(125,893,cs),
(125,844,o),
(165,810,o),
(217,810,cs)
);
},
{
closed = 1;
nodes = (
(486,810,o),
(526,844,o),
(526,893,cs),
(526,941,o),
(486,975,o),
(435,975,cs),
(383,975,o),
(343,941,o),
(343,893,cs),
(343,844,o),
(383,810,o),
(435,810,cs)
);
}
);
width = 651;
}
);
unicode = 168;
},
{
glyphname = dotaccent;
lastChange = "2025-03-02 13:36:56 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (204,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(255,810,o),
(295,844,o),
(295,893,cs),
(295,941,o),
(255,975,o),
(204,975,cs),
(152,975,o),
(112,941,o),
(112,893,cs),
(112,844,o),
(152,810,o),
(204,810,cs)
);
}
);
width = 407;
}
);
unicode = 729;
},
{
glyphname = hungarumlaut;
lastChange = "2025-03-02 12:49:05 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (279,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(232,810,l),
(356,963,l),
(181,963,l),
(100,810,l)
);
},
{
closed = 1;
nodes = (
(452,810,l),
(576,963,l),
(401,963,l),
(320,810,l)
);
}
);
width = 676;
}
);
unicode = 733;
},
{
glyphname = caron;
lastChange = "2025-03-02 12:49:07 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (287,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(366,810,o),
(387,849,o),
(429,904,cs),
(474,963,l),
(349,963,l),
(254,859,l),
(320,859,l),
(224,963,l),
(100,963,l),
(144,905,ls),
(186,849,o),
(205,810,o),
(286,810,cs)
);
}
);
width = 574;
}
);
unicode = 711;
},
{
glyphname = macron;
lastChange = "2025-03-02 12:49:10 +0000";
layers = (
{
anchors = (
{
name = _top;
pos = (256,750);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(412,830,l),
(412,963,l),
(100,963,l),
(100,830,l)
);
}
);
width = 512;
}
);
unicode = 175;
},
{
glyphname = cedilla;
lastChange = "2025-03-02 12:52:40 +0000";
layers = (
{
anchors = (
{
name = _bottom;
pos = (211,0);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(183,-291,ls),
(265,-291,o),
(321,-249,o),
(321,-168,cs),
(321,-104,o),
(281,-72,o),
(233,-62,c),
(262,0,l),
(145,0,l),
(119,-52,ls),
(112,-67,o),
(108,-80,o),
(108,-93,cs),
(108,-123,o),
(133,-143,o),
(164,-143,cs),
(169,-143,ls),
(185,-143,o),
(195,-150,o),
(195,-163,cs),
(195,-177,o),
(183,-185,o),
(169,-185,cs),
(100,-185,l),
(100,-291,l)
);
}
);
width = 421;
}
);
unicode = 184;
},
{
glyphname = ogonek;
lastChange = "2025-03-02 13:23:21 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(280,-263,o),
(303,-262,o),
(321,-260,c),
(321,-129,l),
(273,-129,o),
(251,-113,o),
(251,-80,cs),
(251,-51,o),
(279,-27,o),
(328,0,c),
(194,32,l),
(116,-7,o),
(80,-66,o),
(80,-118,cs),
(80,-201,o),
(154,-263,o),
(261,-263,cs)
);
}
);
width = 428;
}
);
unicode = 731;
},
{
export = 0;
glyphname = _part.blackCircle;
lastChange = "2025-09-12 13:06:43 +0000";
layers = (
{
anchors = (
{
name = "#center";
pos = (505.5,375);
}
);
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(771,-95,o),
(971,101,o),
(971,362,cs),
(971,627,o),
(771,825,o),
(504,825,cs),
(240,825,o),
(40,627,o),
(40,362,cs),
(40,102,o),
(240,-95,o),
(504,-95,cs)
);
}
);
width = 1011;
}
);
metricLeft = "=40";
metricRight = "=|";
},
{
export = 0;
glyphname = _part.circle;
lastChange = "2025-09-12 13:06:39 +0000";
layers = (
{
layerId = m002;
shapes = (
{
closed = 1;
nodes = (
(771,-95,o),
(971,101,o),
(971,362,cs),
(971,627,o),
(771,825,o),
(504,825,cs),
(240,825,o),
(40,627,o),
(40,362,cs),
(40,102,o),
(240,-95,o),
(504,-95,cs)
);
},
{
closed = 1;
nodes = (
(276,-32,o),
(104,138,o),
(104,362,cs),
(104,591,o),
(276,762,o),
(504,762,cs),
(735,762,o),
(907,591,o),
(907,362,cs),
(907,137,o),
(735,-32,o),
(504,-32,cs)
);
}
);
width = 1011;
}
);
metricLeft = "=40";
metricRight = "=|";
}
);
instances = (
{
axesValues = (
400
);
customParameters = (
{
disabled = 1;
name = Filter;
value = "RoundCorner;15;1";
},
{
disabled = 1;
name = Filter;
value = "RoundCorner;-10";
},
{
disabled = 1;
name = Filter;
value = "RMXHarmonizer;supersmooth all";
}
);
instanceInterpolations = {
m002 = 1;
};
name = Regular;
}
);
kerningLTR = {
m002 = {
"@MMK_L_KO_A" = {
"@MMK_R_KO_A" = 17;
"@MMK_R_KO_O" = -16;
"@MMK_R_KO_T" = -81;
"@MMK_R_KO_U" = -17;
"@MMK_R_KO_V" = -103;
"@MMK_R_KO_W" = -39;
"@MMK_R_KO_Y" = -94;
"@MMK_R_KO_Yacute" = -94;
"@MMK_R_KO_Z" = 12;
"@MMK_R_KO_a" = -18;
"@MMK_R_KO_aacute" = -18;
"@MMK_R_KO_ampersand" = -19;
"@MMK_R_KO_asterisk" = -93;
"@MMK_R_KO_backslash" = -69;
"@MMK_R_KO_comma" = 15;
"@MMK_R_KO_d" = -18;
"@MMK_R_KO_dollar" = -16;
"@MMK_R_KO_e" = -21;
"@MMK_R_KO_ellipsis" = -17;
"@MMK_R_KO_endash" = -29;
"@MMK_R_KO_f" = -47;
"@MMK_R_KO_four" = -6;
"@MMK_R_KO_guillemotright" = -20;
"@MMK_R_KO_j" = -18;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_o" = -22;
"@MMK_R_KO_one" = -59;
"@MMK_R_KO_period" = 6;
"@MMK_R_KO_plus" = -70;
"@MMK_R_KO_q" = -18;
"@MMK_R_KO_question" = -46;
"@MMK_R_KO_quotedbl" = -83;
"@MMK_R_KO_quotedblleft" = -100;
"@MMK_R_KO_quotedblright" = -97;
"@MMK_R_KO_quoteleft" = -96;
"@MMK_R_KO_quoteright" = -97;
"@MMK_R_KO_quotesingle" = -83;
"@MMK_R_KO_s" = -6;
"@MMK_R_KO_semicolon" = 9;
"@MMK_R_KO_seven" = -37;
"@MMK_R_KO_six" = -9;
"@MMK_R_KO_slash" = 20;
"@MMK_R_KO_t" = -73;
"@MMK_R_KO_three" = -6;
"@MMK_R_KO_two" = 25;
"@MMK_R_KO_u" = -25;
"@MMK_R_KO_underscore" = -72;
"@MMK_R_KO_v" = -77;
"@MMK_R_KO_w" = -65;
"@MMK_R_KO_y" = -81;
"@MMK_R_KO_z" = 2;
"@MMK_R_KO_zero" = -13;
};
"@MMK_L_KO_B" = {
"@MMK_R_KO_J" = -14;
"@MMK_R_KO_S" = 16;
"@MMK_R_KO_T" = -17;
"@MMK_R_KO_V" = -7;
"@MMK_R_KO_X" = -21;
"@MMK_R_KO_Y" = -20;
"@MMK_R_KO_Yacute" = -20;
"@MMK_R_KO_Z" = 9;
"@MMK_R_KO_asterisk" = -23;
"@MMK_R_KO_braceright" = -2;
"@MMK_R_KO_bracketright" = -6;
"@MMK_R_KO_comma" = -7;
"@MMK_R_KO_dollar" = 5;
"@MMK_R_KO_eight" = 13;
"@MMK_R_KO_ellipsis" = -43;
"@MMK_R_KO_endash" = -2;
"@MMK_R_KO_four" = 17;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_hyphen" = 11;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -5;
"@MMK_R_KO_idotless" = -9;
"@MMK_R_KO_itilde" = 19;
"@MMK_R_KO_j" = -66;
"@MMK_R_KO_l" = -4;
"@MMK_R_KO_n" = -14;
"@MMK_R_KO_nine" = 8;
"@MMK_R_KO_one" = -4;
"@MMK_R_KO_p" = -9;
"@MMK_R_KO_parenright" = 24;
"@MMK_R_KO_period" = -14;
"@MMK_R_KO_plus" = -43;
"@MMK_R_KO_quotedbl" = -17;
"@MMK_R_KO_quotedblleft" = -22;
"@MMK_R_KO_quotedblright" = -34;
"@MMK_R_KO_quoteleft" = -23;
"@MMK_R_KO_quoteright" = -34;
"@MMK_R_KO_quotesingle" = -17;
"@MMK_R_KO_semicolon" = 3;
"@MMK_R_KO_seven" = -3;
"@MMK_R_KO_six" = 10;
"@MMK_R_KO_slash" = -2;
"@MMK_R_KO_three" = 12;
"@MMK_R_KO_two" = 14;
"@MMK_R_KO_u" = -11;
"@MMK_R_KO_underscore" = -148;
"@MMK_R_KO_x" = -6;
"@MMK_R_KO_zero" = 3;
};
"@MMK_L_KO_C" = {
"@MMK_R_KO_A" = -13;
"@MMK_R_KO_E" = -4;
"@MMK_R_KO_Eacute" = -4;
"@MMK_R_KO_H" = -4;
"@MMK_R_KO_J" = -26;
"@MMK_R_KO_S" = 2;
"@MMK_R_KO_T" = -27;
"@MMK_R_KO_V" = -13;
"@MMK_R_KO_X" = -39;
"@MMK_R_KO_Y" = -30;
"@MMK_R_KO_Yacute" = -30;
"@MMK_R_KO_a" = -11;
"@MMK_R_KO_ampersand" = -18;
"@MMK_R_KO_asterisk" = -19;
"@MMK_R_KO_braceright" = -14;
"@MMK_R_KO_bracketright" = -18;
"@MMK_R_KO_comma" = -22;
"@MMK_R_KO_d" = -11;
"@MMK_R_KO_dollar" = -14;
"@MMK_R_KO_e" = -11;
"@MMK_R_KO_eight" = 7;
"@MMK_R_KO_ellipsis" = -57;
"@MMK_R_KO_endash" = -4;
"@MMK_R_KO_f" = -16;
"@MMK_R_KO_g" = -12;
"@MMK_R_KO_guillemotright" = -22;
"@MMK_R_KO_h" = -15;
"@MMK_R_KO_hyphen" = 11;
"@MMK_R_KO_i" = -13;
"@MMK_R_KO_iacute" = -15;
"@MMK_R_KO_idotless" = -20;
"@MMK_R_KO_igrave" = -15;
"@MMK_R_KO_itilde" = 4;
"@MMK_R_KO_j" = -76;
"@MMK_R_KO_l" = -15;
"@MMK_R_KO_n" = -28;
"@MMK_R_KO_o" = -11;
"@MMK_R_KO_one" = -4;
"@MMK_R_KO_p" = -20;
"@MMK_R_KO_parenright" = 9;
"@MMK_R_KO_period" = -26;
"@MMK_R_KO_plus" = -55;
"@MMK_R_KO_q" = -11;
"@MMK_R_KO_quotedbl" = -14;
"@MMK_R_KO_quotedblleft" = -19;
"@MMK_R_KO_quotedblright" = -27;
"@MMK_R_KO_quoteleft" = -18;
"@MMK_R_KO_quoteright" = -27;
"@MMK_R_KO_quotesingle" = -14;
"@MMK_R_KO_s" = -9;
"@MMK_R_KO_seven" = -19;
"@MMK_R_KO_six" = 4;
"@MMK_R_KO_slash" = -33;
"@MMK_R_KO_t" = -16;
"@MMK_R_KO_three" = 5;
"@MMK_R_KO_two" = 12;
"@MMK_R_KO_u" = -23;
"@MMK_R_KO_underscore" = -163;
"@MMK_R_KO_v" = -9;
"@MMK_R_KO_x" = -13;
"@MMK_R_KO_y" = -9;
};
"@MMK_L_KO_Dcroat" = {
"@MMK_R_KO_A" = -19;
"@MMK_R_KO_J" = -38;
"@MMK_R_KO_O" = 21;
"@MMK_R_KO_S" = 3;
"@MMK_R_KO_T" = -30;
"@MMK_R_KO_V" = -17;
"@MMK_R_KO_X" = -58;
"@MMK_R_KO_Y" = -29;
"@MMK_R_KO_Z" = -8;
"@MMK_R_KO_comma" = -30;
"@MMK_R_KO_h" = -6;
"@MMK_R_KO_hyphen" = 10;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -6;
"@MMK_R_KO_igrave" = -6;
"@MMK_R_KO_j" = -70;
"@MMK_R_KO_n" = -16;
"@MMK_R_KO_parenright" = -2;
"@MMK_R_KO_period" = -41;
"@MMK_R_KO_question" = -6;
"@MMK_R_KO_quotedbl" = -16;
"@MMK_R_KO_quotedblright" = -27;
"@MMK_R_KO_quoteright" = -27;
"@MMK_R_KO_quotesingle" = -16;
"@MMK_R_KO_slash" = -40;
"@MMK_R_KO_y" = -12;
};
"@MMK_L_KO_E" = {
"@MMK_R_KO_J" = -2;
"@MMK_R_KO_T" = 9;
"@MMK_R_KO_V" = 6;
"@MMK_R_KO_W" = 19;
"@MMK_R_KO_Z" = 8;
"@MMK_R_KO_a" = -24;
"@MMK_R_KO_aacute" = -22;
"@MMK_R_KO_ampersand" = -20;
"@MMK_R_KO_asterisk" = -25;
"@MMK_R_KO_backslash" = 25;
"@MMK_R_KO_d" = -24;
"@MMK_R_KO_dollar" = -12;
"@MMK_R_KO_e" = -23;
"@MMK_R_KO_ellipsis" = -31;
"@MMK_R_KO_endash" = -23;
"@MMK_R_KO_f" = -21;
"@MMK_R_KO_four" = -5;
"@MMK_R_KO_g" = -24;
"@MMK_R_KO_guillemotright" = -16;
"@MMK_R_KO_iacute" = -14;
"@MMK_R_KO_idotless" = -18;
"@MMK_R_KO_igrave" = 34;
"@MMK_R_KO_j" = -31;
"@MMK_R_KO_l" = -8;
"@MMK_R_KO_n" = -21;
"@MMK_R_KO_nine" = 2;
"@MMK_R_KO_o" = -24;
"@MMK_R_KO_one" = -20;
"@MMK_R_KO_p" = -18;
"@MMK_R_KO_parenright" = 65;
"@MMK_R_KO_plus" = -63;
"@MMK_R_KO_q" = -23;
"@MMK_R_KO_quotedbl" = -3;
"@MMK_R_KO_quotedblleft" = -18;
"@MMK_R_KO_quotedblright" = -16;
"@MMK_R_KO_quoteleft" = -20;
"@MMK_R_KO_quoteright" = -17;
"@MMK_R_KO_quotesingle" = -3;
"@MMK_R_KO_seven" = 7;
"@MMK_R_KO_t" = -21;
"@MMK_R_KO_two" = 11;
"@MMK_R_KO_u" = -28;
"@MMK_R_KO_underscore" = -84;
"@MMK_R_KO_x" = -3;
};
"@MMK_L_KO_F" = {
"@MMK_R_KO_A" = -48;
"@MMK_R_KO_J" = -89;
"@MMK_R_KO_O" = -5;
"@MMK_R_KO_T" = 24;
"@MMK_R_KO_V" = 9;
"@MMK_R_KO_W" = 27;
"@MMK_R_KO_X" = -19;
"@MMK_R_KO_Y" = 6;
"@MMK_R_KO_Yacute" = 6;
"@MMK_R_KO_a" = -18;
"@MMK_R_KO_aacute" = -18;
"@MMK_R_KO_ampersand" = -25;
"@MMK_R_KO_asterisk" = -17;
"@MMK_R_KO_backslash" = 37;
"@MMK_R_KO_colon" = -21;
"@MMK_R_KO_comma" = -87;
"@MMK_R_KO_d" = -18;
"@MMK_R_KO_dollar" = -17;
"@MMK_R_KO_e" = -18;
"@MMK_R_KO_ellipsis" = -180;
"@MMK_R_KO_endash" = -8;
"@MMK_R_KO_f" = -14;
"@MMK_R_KO_g" = -18;
"@MMK_R_KO_guillemotright" = -44;
"@MMK_R_KO_hyphen" = 4;
"@MMK_R_KO_iacute" = -24;
"@MMK_R_KO_idotless" = -29;
"@MMK_R_KO_igrave" = 35;
"@MMK_R_KO_itilde" = 43;
"@MMK_R_KO_j" = -57;
"@MMK_R_KO_n" = -35;
"@MMK_R_KO_o" = -18;
"@MMK_R_KO_one" = -23;
"@MMK_R_KO_p" = -27;
"@MMK_R_KO_parenright" = 29;
"@MMK_R_KO_period" = -89;
"@MMK_R_KO_plus" = -49;
"@MMK_R_KO_q" = -18;
"@MMK_R_KO_quotedblleft" = -11;
"@MMK_R_KO_quotedblright" = -13;
"@MMK_R_KO_quoteleft" = -13;
"@MMK_R_KO_quoteright" = -13;
"@MMK_R_KO_s" = -10;
"@MMK_R_KO_semicolon" = -18;
"@MMK_R_KO_seven" = 21;
"@MMK_R_KO_slash" = -59;
"@MMK_R_KO_t" = -14;
"@MMK_R_KO_u" = -27;
"@MMK_R_KO_underscore" = -267;
"@MMK_R_KO_x" = -29;
"@MMK_R_KO_z" = -22;
};
"@MMK_L_KO_G" = {
"@MMK_R_KO_A" = -10;
"@MMK_R_KO_J" = -25;
"@MMK_R_KO_O" = 9;
"@MMK_R_KO_S" = 7;
"@MMK_R_KO_T" = -29;
"@MMK_R_KO_V" = -14;
"@MMK_R_KO_X" = -42;
"@MMK_R_KO_Y" = -26;
"@MMK_R_KO_Yacute" = -26;
"@MMK_R_KO_a" = -8;
"@MMK_R_KO_aacute" = -9;
"@MMK_R_KO_ampersand" = -2;
"@MMK_R_KO_asterisk" = -24;
"@MMK_R_KO_backslash" = -3;
"@MMK_R_KO_braceright" = -17;
"@MMK_R_KO_bracketright" = -19;
"@MMK_R_KO_comma" = -15;
"@MMK_R_KO_d" = -9;
"@MMK_R_KO_e" = -10;
"@MMK_R_KO_eight" = 7;
"@MMK_R_KO_ellipsis" = -58;
"@MMK_R_KO_endash" = -4;
"@MMK_R_KO_f" = -10;
"@MMK_R_KO_four" = 18;
"@MMK_R_KO_g" = -3;
"@MMK_R_KO_guillemotright" = -27;
"@MMK_R_KO_h" = -5;
"@MMK_R_KO_hyphen" = 11;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -9;
"@MMK_R_KO_idotless" = -14;
"@MMK_R_KO_igrave" = -5;
"@MMK_R_KO_itilde" = 3;
"@MMK_R_KO_j" = -73;
"@MMK_R_KO_l" = -6;
"@MMK_R_KO_n" = -16;
"@MMK_R_KO_nine" = 3;
"@MMK_R_KO_o" = -10;
"@MMK_R_KO_one" = -7;
"@MMK_R_KO_p" = -14;
"@MMK_R_KO_parenright" = 9;
"@MMK_R_KO_period" = -27;
"@MMK_R_KO_plus" = -42;
"@MMK_R_KO_q" = -10;
"@MMK_R_KO_question" = -2;
"@MMK_R_KO_quotedbl" = -19;
"@MMK_R_KO_quotedblleft" = -25;
"@MMK_R_KO_quotedblright" = -35;
"@MMK_R_KO_quoteleft" = -24;
"@MMK_R_KO_quoteright" = -35;
"@MMK_R_KO_quotesingle" = -19;
"@MMK_R_KO_seven" = -21;
"@MMK_R_KO_six" = 17;
"@MMK_R_KO_slash" = -22;
"@MMK_R_KO_t" = -12;
"@MMK_R_KO_three" = 6;
"@MMK_R_KO_two" = 4;
"@MMK_R_KO_u" = -12;
"@MMK_R_KO_underscore" = -166;
"@MMK_R_KO_v" = -7;
"@MMK_R_KO_w" = -7;
"@MMK_R_KO_x" = -15;
"@MMK_R_KO_y" = -7;
"@MMK_R_KO_z" = -7;
"@MMK_R_KO_zero" = 12;
};
"@MMK_L_KO_H" = {
"@MMK_R_KO_J" = -9;
"@MMK_R_KO_U" = 2;
"@MMK_R_KO_W" = 13;
"@MMK_R_KO_X" = -12;
"@MMK_R_KO_Yacute" = -9;
"@MMK_R_KO_a" = -9;
"@MMK_R_KO_aacute" = -7;
"@MMK_R_KO_ampersand" = -11;
"@MMK_R_KO_asterisk" = -28;
"@MMK_R_KO_backslash" = 11;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_dollar" = -10;
"@MMK_R_KO_e" = -11;
"@MMK_R_KO_ellipsis" = -49;
"@MMK_R_KO_f" = -9;
"@MMK_R_KO_four" = 7;
"@MMK_R_KO_g" = -9;
"@MMK_R_KO_guillemotright" = -22;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_i" = 2;
"@MMK_R_KO_iacute" = -2;
"@MMK_R_KO_idotless" = -5;
"@MMK_R_KO_igrave" = 16;
"@MMK_R_KO_itilde" = 25;
"@MMK_R_KO_j" = -46;
"@MMK_R_KO_l" = -2;
"@MMK_R_KO_n" = -21;
"@MMK_R_KO_o" = -13;
"@MMK_R_KO_one" = -8;
"@MMK_R_KO_p" = -5;
"@MMK_R_KO_parenright" = 45;
"@MMK_R_KO_period" = -13;
"@MMK_R_KO_plus" = -51;
"@MMK_R_KO_q" = -10;
"@MMK_R_KO_quotedblleft" = -28;
"@MMK_R_KO_quotedblright" = -29;
"@MMK_R_KO_quoteleft" = -28;
"@MMK_R_KO_quoteright" = -29;
"@MMK_R_KO_semicolon" = 8;
"@MMK_R_KO_seven" = -2;
"@MMK_R_KO_six" = 4;
"@MMK_R_KO_slash" = -6;
"@MMK_R_KO_t" = -9;
"@MMK_R_KO_two" = 6;
"@MMK_R_KO_u" = -16;
"@MMK_R_KO_underscore" = -119;
"@MMK_R_KO_x" = -9;
};
"@MMK_L_KO_Iacute" = {
"@MMK_R_KO_J" = -7;
"@MMK_R_KO_U" = 3;
"@MMK_R_KO_W" = 13;
"@MMK_R_KO_X" = -11;
"@MMK_R_KO_a" = -7;
"@MMK_R_KO_asterisk" = -28;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_e" = -11;
"@MMK_R_KO_ellipsis" = -48;
"@MMK_R_KO_f" = -9;
"@MMK_R_KO_g" = -9;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_i" = 4;
"@MMK_R_KO_iacute" = -2;
"@MMK_R_KO_igrave" = 27;
"@MMK_R_KO_itilde" = 34;
"@MMK_R_KO_j" = -46;
"@MMK_R_KO_l" = -2;
"@MMK_R_KO_n" = -16;
"@MMK_R_KO_o" = -14;
"@MMK_R_KO_one" = -8;
"@MMK_R_KO_p" = -5;
"@MMK_R_KO_parenright" = 62;
"@MMK_R_KO_period" = -13;
"@MMK_R_KO_q" = -7;
"@MMK_R_KO_quotedblleft" = -28;
"@MMK_R_KO_quotedblright" = -28;
"@MMK_R_KO_quoteleft" = -28;
"@MMK_R_KO_quoteright" = -28;
"@MMK_R_KO_semicolon" = 9;
"@MMK_R_KO_t" = -9;
"@MMK_R_KO_two" = 7;
"@MMK_R_KO_u" = -16;
"@MMK_R_KO_x" = -9;
};
"@MMK_L_KO_K" = {
"@MMK_R_KO_A" = 7;
"@MMK_R_KO_H" = -2;
"@MMK_R_KO_O" = -29;
"@MMK_R_KO_S" = -8;
"@MMK_R_KO_T" = -11;
"@MMK_R_KO_U" = -4;
"@MMK_R_KO_V" = -3;
"@MMK_R_KO_Y" = -15;
"@MMK_R_KO_Yacute" = -15;
"@MMK_R_KO_Z" = 15;
"@MMK_R_KO_a" = -35;
"@MMK_R_KO_ampersand" = -25;
"@MMK_R_KO_asterisk" = -62;
"@MMK_R_KO_braceright" = 3;
"@MMK_R_KO_d" = -32;
"@MMK_R_KO_dollar" = -27;
"@MMK_R_KO_e" = -30;
"@MMK_R_KO_eight" = -5;
"@MMK_R_KO_ellipsis" = -19;
"@MMK_R_KO_endash" = -42;
"@MMK_R_KO_f" = -51;
"@MMK_R_KO_four" = -22;
"@MMK_R_KO_guillemotright" = -26;
"@MMK_R_KO_hyphen" = -2;
"@MMK_R_KO_idotless" = -6;
"@MMK_R_KO_igrave" = 30;
"@MMK_R_KO_itilde" = 36;
"@MMK_R_KO_j" = -20;
"@MMK_R_KO_nine" = -8;
"@MMK_R_KO_o" = -38;
"@MMK_R_KO_one" = -40;
"@MMK_R_KO_p" = -6;
"@MMK_R_KO_parenright" = 53;
"@MMK_R_KO_plus" = -87;
"@MMK_R_KO_q" = -31;
"@MMK_R_KO_question" = -17;
"@MMK_R_KO_quotedblleft" = -45;
"@MMK_R_KO_quotedblright" = -37;
"@MMK_R_KO_quoteleft" = -52;
"@MMK_R_KO_quoteright" = -37;
"@MMK_R_KO_s" = -15;
"@MMK_R_KO_semicolon" = 4;
"@MMK_R_KO_six" = -16;
"@MMK_R_KO_slash" = 11;
"@MMK_R_KO_t" = -74;
"@MMK_R_KO_three" = -3;
"@MMK_R_KO_two" = 14;
"@MMK_R_KO_u" = -41;
"@MMK_R_KO_underscore" = -74;
"@MMK_R_KO_v" = -69;
"@MMK_R_KO_w" = -66;
"@MMK_R_KO_x" = -3;
"@MMK_R_KO_y" = -68;
"@MMK_R_KO_zero" = -23;
};
"@MMK_L_KO_L" = {
"@MMK_R_KO_A" = 6;
"@MMK_R_KO_E" = -13;
"@MMK_R_KO_Eacute" = -13;
"@MMK_R_KO_H" = -13;
"@MMK_R_KO_J" = 20;
"@MMK_R_KO_O" = -42;
"@MMK_R_KO_S" = -19;
"@MMK_R_KO_T" = -102;
"@MMK_R_KO_U" = -38;
"@MMK_R_KO_V" = -94;
"@MMK_R_KO_W" = -52;
"@MMK_R_KO_X" = -17;
"@MMK_R_KO_Y" = -112;
"@MMK_R_KO_Yacute" = -112;
"@MMK_R_KO_Z" = 5;
"@MMK_R_KO_a" = -14;
"@MMK_R_KO_ampersand" = -11;
"@MMK_R_KO_asterisk" = -177;
"@MMK_R_KO_backslash" = -74;
"@MMK_R_KO_braceright" = -21;
"@MMK_R_KO_bracketright" = -23;
"@MMK_R_KO_comma" = 14;
"@MMK_R_KO_d" = -14;
"@MMK_R_KO_dollar" = -20;
"@MMK_R_KO_e" = -14;
"@MMK_R_KO_eight" = -10;
"@MMK_R_KO_ellipsis" = -18;
"@MMK_R_KO_endash" = -6;
"@MMK_R_KO_f" = -60;
"@MMK_R_KO_four" = -44;
"@MMK_R_KO_g" = -15;
"@MMK_R_KO_guillemotright" = -34;
"@MMK_R_KO_h" = -18;
"@MMK_R_KO_i" = -15;
"@MMK_R_KO_iacute" = -18;
"@MMK_R_KO_idotless" = -18;
"@MMK_R_KO_igrave" = -18;
"@MMK_R_KO_itilde" = -18;
"@MMK_R_KO_j" = -37;
"@MMK_R_KO_l" = -20;
"@MMK_R_KO_n" = -14;
"@MMK_R_KO_nine" = -20;
"@MMK_R_KO_o" = -15;
"@MMK_R_KO_one" = -100;
"@MMK_R_KO_p" = -18;
"@MMK_R_KO_parenright" = -13;
"@MMK_R_KO_period" = 10;
"@MMK_R_KO_plus" = -125;
"@MMK_R_KO_q" = -13;
"@MMK_R_KO_question" = -59;
"@MMK_R_KO_quotedbl" = -187;
"@MMK_R_KO_quotedblleft" = -204;
"@MMK_R_KO_quotedblright" = -206;
"@MMK_R_KO_quoteleft" = -168;
"@MMK_R_KO_quoteright" = -168;
"@MMK_R_KO_quotesingle" = -132;
"@MMK_R_KO_seven" = -55;
"@MMK_R_KO_six" = -25;
"@MMK_R_KO_slash" = 11;
"@MMK_R_KO_t" = -64;
"@MMK_R_KO_three" = -15;
"@MMK_R_KO_two" = 14;
"@MMK_R_KO_u" = -23;
"@MMK_R_KO_underscore" = -76;
"@MMK_R_KO_v" = -79;
"@MMK_R_KO_w" = -62;
"@MMK_R_KO_x" = -15;
"@MMK_R_KO_y" = -86;
"@MMK_R_KO_zero" = -33;
};
"@MMK_L_KO_O" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_J" = -35;
"@MMK_R_KO_O" = 14;
"@MMK_R_KO_S" = 5;
"@MMK_R_KO_T" = -28;
"@MMK_R_KO_U" = 2;
"@MMK_R_KO_V" = -16;
"@MMK_R_KO_X" = -52;
"@MMK_R_KO_Y" = -25;
"@MMK_R_KO_Yacute" = -25;
"@MMK_R_KO_Z" = -6;
"@MMK_R_KO_ampersand" = -3;
"@MMK_R_KO_asterisk" = -23;
"@MMK_R_KO_braceright" = -18;
"@MMK_R_KO_bracketright" = -19;
"@MMK_R_KO_comma" = -22;
"@MMK_R_KO_ellipsis" = -69;
"@MMK_R_KO_endash" = -3;
"@MMK_R_KO_four" = 18;
"@MMK_R_KO_guillemotright" = -22;
"@MMK_R_KO_h" = -5;
"@MMK_R_KO_hyphen" = 12;
"@MMK_R_KO_iacute" = -5;
"@MMK_R_KO_idotless" = -7;
"@MMK_R_KO_igrave" = -4;
"@MMK_R_KO_j" = -67;
"@MMK_R_KO_l" = -5;
"@MMK_R_KO_n" = -11;
"@MMK_R_KO_nine" = 11;
"@MMK_R_KO_p" = -9;
"@MMK_R_KO_parenright" = 2;
"@MMK_R_KO_period" = -39;
"@MMK_R_KO_plus" = -42;
"@MMK_R_KO_question" = -4;
"@MMK_R_KO_quotedbl" = -14;
"@MMK_R_KO_quotedblleft" = -24;
"@MMK_R_KO_quotedblright" = -25;
"@MMK_R_KO_quoteleft" = -22;
"@MMK_R_KO_quoteright" = -25;
"@MMK_R_KO_quotesingle" = -14;
"@MMK_R_KO_s" = 2;
"@MMK_R_KO_seven" = -29;
"@MMK_R_KO_six" = 22;
"@MMK_R_KO_slash" = -37;
"@MMK_R_KO_underscore" = -179;
"@MMK_R_KO_v" = -12;
"@MMK_R_KO_w" = -2;
"@MMK_R_KO_x" = -9;
"@MMK_R_KO_y" = -12;
"@MMK_R_KO_zero" = 17;
};
"@MMK_L_KO_P" = {
"@MMK_R_KO_A" = -45;
"@MMK_R_KO_E" = 9;
"@MMK_R_KO_Eacute" = 9;
"@MMK_R_KO_H" = 9;
"@MMK_R_KO_J" = -93;
"@MMK_R_KO_O" = 19;
"@MMK_R_KO_S" = 19;
"@MMK_R_KO_T" = -4;
"@MMK_R_KO_U" = 19;
"@MMK_R_KO_V" = 8;
"@MMK_R_KO_W" = 28;
"@MMK_R_KO_X" = -37;
"@MMK_R_KO_Z" = -13;
"@MMK_R_KO_a" = -15;
"@MMK_R_KO_ampersand" = -47;
"@MMK_R_KO_asterisk" = -2;
"@MMK_R_KO_backslash" = 24;
"@MMK_R_KO_colon" = 5;
"@MMK_R_KO_comma" = -130;
"@MMK_R_KO_d" = -15;
"@MMK_R_KO_dollar" = -2;
"@MMK_R_KO_e" = -16;
"@MMK_R_KO_eight" = 11;
"@MMK_R_KO_ellipsis" = -206;
"@MMK_R_KO_endash" = -4;
"@MMK_R_KO_g" = -12;
"@MMK_R_KO_guillemotright" = -12;
"@MMK_R_KO_hyphen" = 10;
"@MMK_R_KO_iacute" = -12;
"@MMK_R_KO_idotless" = -12;
"@MMK_R_KO_itilde" = 35;
"@MMK_R_KO_j" = -52;
"@MMK_R_KO_n" = -26;
"@MMK_R_KO_nine" = 26;
"@MMK_R_KO_o" = -17;
"@MMK_R_KO_one" = 17;
"@MMK_R_KO_p" = -12;
"@MMK_R_KO_period" = -133;
"@MMK_R_KO_plus" = -61;
"@MMK_R_KO_q" = -17;
"@MMK_R_KO_quotedblleft" = -2;
"@MMK_R_KO_quotedblright" = -7;
"@MMK_R_KO_quoteleft" = -2;
"@MMK_R_KO_quoteright" = -7;
"@MMK_R_KO_semicolon" = 11;
"@MMK_R_KO_seven" = -13;
"@MMK_R_KO_six" = 32;
"@MMK_R_KO_slash" = -71;
"@MMK_R_KO_three" = 2;
"@MMK_R_KO_two" = 17;
"@MMK_R_KO_u" = -8;
"@MMK_R_KO_underscore" = -313;
"@MMK_R_KO_v" = 15;
"@MMK_R_KO_w" = 14;
"@MMK_R_KO_x" = 6;
"@MMK_R_KO_y" = 15;
"@MMK_R_KO_z" = 12;
"@MMK_R_KO_zero" = 25;
};
"@MMK_L_KO_Q" = {
"@MMK_R_KO_J" = -16;
"@MMK_R_KO_O" = 14;
"@MMK_R_KO_S" = 5;
"@MMK_R_KO_T" = -28;
"@MMK_R_KO_U" = 2;
"@MMK_R_KO_V" = -15;
"@MMK_R_KO_X" = -21;
"@MMK_R_KO_Y" = -25;
"@MMK_R_KO_Yacute" = -25;
"@MMK_R_KO_Z" = -6;
"@MMK_R_KO_ampersand" = -3;
"@MMK_R_KO_asterisk" = -23;
"@MMK_R_KO_comma" = 83;
"@MMK_R_KO_ellipsis" = -58;
"@MMK_R_KO_four" = 19;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_hyphen" = 11;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -5;
"@MMK_R_KO_idotless" = -5;
"@MMK_R_KO_j" = -23;
"@MMK_R_KO_l" = -5;
"@MMK_R_KO_n" = -10;
"@MMK_R_KO_nine" = 10;
"@MMK_R_KO_parenright" = 29;
"@MMK_R_KO_plus" = -37;
"@MMK_R_KO_question" = -3;
"@MMK_R_KO_quotedbl" = -15;
"@MMK_R_KO_quotedblleft" = -25;
"@MMK_R_KO_quotedblright" = -26;
"@MMK_R_KO_quoteleft" = -22;
"@MMK_R_KO_quoteright" = -26;
"@MMK_R_KO_quotesingle" = -15;
"@MMK_R_KO_s" = 3;
"@MMK_R_KO_semicolon" = 6;
"@MMK_R_KO_seven" = -21;
"@MMK_R_KO_six" = 21;
"@MMK_R_KO_two" = 6;
"@MMK_R_KO_underscore" = -65;
"@MMK_R_KO_v" = -9;
"@MMK_R_KO_x" = -4;
"@MMK_R_KO_zero" = 17;
};
"@MMK_L_KO_R" = {
"@MMK_R_KO_A" = 15;
"@MMK_R_KO_E" = 2;
"@MMK_R_KO_Eacute" = 2;
"@MMK_R_KO_S" = 14;
"@MMK_R_KO_T" = -12;
"@MMK_R_KO_X" = -5;
"@MMK_R_KO_Y" = -12;
"@MMK_R_KO_Yacute" = -12;
"@MMK_R_KO_Z" = 19;
"@MMK_R_KO_ampersand" = -2;
"@MMK_R_KO_asterisk" = -15;
"@MMK_R_KO_backslash" = 2;
"@MMK_R_KO_colon" = 19;
"@MMK_R_KO_dollar" = 9;
"@MMK_R_KO_eight" = 11;
"@MMK_R_KO_ellipsis" = -37;
"@MMK_R_KO_endash" = -10;
"@MMK_R_KO_four" = 11;
"@MMK_R_KO_guillemotright" = -13;
"@MMK_R_KO_igrave" = 7;
"@MMK_R_KO_itilde" = 27;
"@MMK_R_KO_j" = -34;
"@MMK_R_KO_n" = -15;
"@MMK_R_KO_nine" = 18;
"@MMK_R_KO_o" = -4;
"@MMK_R_KO_one" = 4;
"@MMK_R_KO_parenright" = 34;
"@MMK_R_KO_plus" = -45;
"@MMK_R_KO_quotedbl" = -7;
"@MMK_R_KO_quotedblleft" = -15;
"@MMK_R_KO_quotedblright" = -22;
"@MMK_R_KO_quoteleft" = -15;
"@MMK_R_KO_quoteright" = -22;
"@MMK_R_KO_quotesingle" = -7;
"@MMK_R_KO_semicolon" = 25;
"@MMK_R_KO_six" = 14;
"@MMK_R_KO_slash" = 8;
"@MMK_R_KO_three" = 21;
"@MMK_R_KO_two" = 26;
"@MMK_R_KO_underscore" = -87;
"@MMK_R_KO_w" = 4;
"@MMK_R_KO_z" = 7;
"@MMK_R_KO_zero" = 6;
};
"@MMK_L_KO_S" = {
"@MMK_R_KO_J" = -13;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_S" = 8;
"@MMK_R_KO_T" = -22;
"@MMK_R_KO_V" = -9;
"@MMK_R_KO_X" = -24;
"@MMK_R_KO_Y" = -24;
"@MMK_R_KO_Yacute" = -24;
"@MMK_R_KO_Z" = 9;
"@MMK_R_KO_a" = -9;
"@MMK_R_KO_aacute" = -10;
"@MMK_R_KO_ampersand" = -6;
"@MMK_R_KO_asterisk" = -17;
"@MMK_R_KO_bracketright" = -6;
"@MMK_R_KO_comma" = -5;
"@MMK_R_KO_d" = -10;
"@MMK_R_KO_dollar" = 5;
"@MMK_R_KO_e" = -11;
"@MMK_R_KO_eight" = 15;
"@MMK_R_KO_ellipsis" = -44;
"@MMK_R_KO_endash" = -2;
"@MMK_R_KO_f" = -15;
"@MMK_R_KO_four" = 20;
"@MMK_R_KO_g" = -2;
"@MMK_R_KO_guillemotright" = -19;
"@MMK_R_KO_h" = -3;
"@MMK_R_KO_hyphen" = 13;
"@MMK_R_KO_iacute" = -5;
"@MMK_R_KO_idotless" = -14;
"@MMK_R_KO_igrave" = -3;
"@MMK_R_KO_itilde" = 17;
"@MMK_R_KO_j" = -71;
"@MMK_R_KO_l" = -5;
"@MMK_R_KO_n" = -13;
"@MMK_R_KO_nine" = 5;
"@MMK_R_KO_o" = -11;
"@MMK_R_KO_one" = -14;
"@MMK_R_KO_p" = -13;
"@MMK_R_KO_parenright" = 20;
"@MMK_R_KO_period" = -15;
"@MMK_R_KO_plus" = -42;
"@MMK_R_KO_q" = -10;
"@MMK_R_KO_quotedbl" = -13;
"@MMK_R_KO_quotedblleft" = -17;
"@MMK_R_KO_quotedblright" = -32;
"@MMK_R_KO_quoteleft" = -17;
"@MMK_R_KO_quoteright" = -32;
"@MMK_R_KO_quotesingle" = -13;
"@MMK_R_KO_seven" = -6;
"@MMK_R_KO_six" = 12;
"@MMK_R_KO_slash" = -15;
"@MMK_R_KO_t" = -15;
"@MMK_R_KO_three" = 11;
"@MMK_R_KO_two" = 16;
"@MMK_R_KO_u" = -10;
"@MMK_R_KO_underscore" = -149;
"@MMK_R_KO_x" = -4;
"@MMK_R_KO_zero" = 6;
};
"@MMK_L_KO_T" = {
"@MMK_R_KO_A" = -83;
"@MMK_R_KO_H" = -5;
"@MMK_R_KO_J" = -90;
"@MMK_R_KO_O" = -27;
"@MMK_R_KO_T" = 38;
"@MMK_R_KO_V" = 19;
"@MMK_R_KO_W" = 27;
"@MMK_R_KO_X" = -18;
"@MMK_R_KO_Y" = 18;
"@MMK_R_KO_Yacute" = 18;
"@MMK_R_KO_a" = -71;
"@MMK_R_KO_ampersand" = -64;
"@MMK_R_KO_asterisk" = -34;
"@MMK_R_KO_backslash" = 29;
"@MMK_R_KO_colon" = -33;
"@MMK_R_KO_comma" = -82;
"@MMK_R_KO_d" = -93;
"@MMK_R_KO_dollar" = -8;
"@MMK_R_KO_e" = -64;
"@MMK_R_KO_eight" = -2;
"@MMK_R_KO_ellipsis" = -147;
"@MMK_R_KO_endash" = -101;
"@MMK_R_KO_f" = -15;
"@MMK_R_KO_four" = -56;
"@MMK_R_KO_g" = -91;
"@MMK_R_KO_guillemotright" = -64;
"@MMK_R_KO_hyphen" = -60;
"@MMK_R_KO_iacute" = -21;
"@MMK_R_KO_idotless" = -58;
"@MMK_R_KO_igrave" = 40;
"@MMK_R_KO_itilde" = 55;
"@MMK_R_KO_j" = -48;
"@MMK_R_KO_l" = -3;
"@MMK_R_KO_n" = -100;
"@MMK_R_KO_o" = -70;
"@MMK_R_KO_one" = -26;
"@MMK_R_KO_p" = -58;
"@MMK_R_KO_parenright" = 13;
"@MMK_R_KO_period" = -89;
"@MMK_R_KO_plus" = -152;
"@MMK_R_KO_q" = -95;
"@MMK_R_KO_quotedblleft" = -9;
"@MMK_R_KO_quotedblright" = -4;
"@MMK_R_KO_quoteleft" = -23;
"@MMK_R_KO_quoteright" = -4;
"@MMK_R_KO_s" = -60;
"@MMK_R_KO_semicolon" = -30;
"@MMK_R_KO_seven" = 35;
"@MMK_R_KO_six" = -14;
"@MMK_R_KO_slash" = -100;
"@MMK_R_KO_t" = -28;
"@MMK_R_KO_three" = -11;
"@MMK_R_KO_two" = -11;
"@MMK_R_KO_u" = -55;
"@MMK_R_KO_underscore" = -192;
"@MMK_R_KO_v" = -54;
"@MMK_R_KO_w" = -52;
"@MMK_R_KO_x" = -58;
"@MMK_R_KO_y" = -56;
"@MMK_R_KO_z" = -37;
"@MMK_R_KO_zero" = -23;
};
"@MMK_L_KO_U" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_E" = 3;
"@MMK_R_KO_Eacute" = 3;
"@MMK_R_KO_J" = -33;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_U" = 10;
"@MMK_R_KO_V" = 9;
"@MMK_R_KO_W" = 23;
"@MMK_R_KO_X" = -16;
"@MMK_R_KO_a" = -7;
"@MMK_R_KO_aacute" = -7;
"@MMK_R_KO_ampersand" = -9;
"@MMK_R_KO_asterisk" = -22;
"@MMK_R_KO_backslash" = 22;
"@MMK_R_KO_comma" = -25;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_dollar" = -2;
"@MMK_R_KO_e" = -7;
"@MMK_R_KO_ellipsis" = -67;
"@MMK_R_KO_endash" = -11;
"@MMK_R_KO_four" = 12;
"@MMK_R_KO_g" = -8;
"@MMK_R_KO_guillemotright" = -23;
"@MMK_R_KO_h" = 2;
"@MMK_R_KO_iacute" = -7;
"@MMK_R_KO_igrave" = 26;
"@MMK_R_KO_j" = -64;
"@MMK_R_KO_l" = 2;
"@MMK_R_KO_n" = -21;
"@MMK_R_KO_nine" = 3;
"@MMK_R_KO_o" = -7;
"@MMK_R_KO_one" = -2;
"@MMK_R_KO_p" = -15;
"@MMK_R_KO_parenright" = 46;
"@MMK_R_KO_period" = -37;
"@MMK_R_KO_plus" = -46;
"@MMK_R_KO_q" = -7;
"@MMK_R_KO_question" = -2;
"@MMK_R_KO_quotedbl" = 10;
"@MMK_R_KO_quotedblleft" = -21;
"@MMK_R_KO_quotedblright" = -22;
"@MMK_R_KO_quoteleft" = -21;
"@MMK_R_KO_quoteright" = -22;
"@MMK_R_KO_quotesingle" = 10;
"@MMK_R_KO_six" = 14;
"@MMK_R_KO_slash" = -38;
"@MMK_R_KO_three" = 6;
"@MMK_R_KO_two" = 5;
"@MMK_R_KO_u" = -14;
"@MMK_R_KO_underscore" = -173;
"@MMK_R_KO_x" = -2;
"@MMK_R_KO_zero" = 8;
};
"@MMK_L_KO_Uacute" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_E" = 3;
"@MMK_R_KO_Eacute" = 3;
"@MMK_R_KO_J" = -33;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_U" = 10;
"@MMK_R_KO_V" = 9;
"@MMK_R_KO_W" = 23;
"@MMK_R_KO_X" = -16;
"@MMK_R_KO_a" = -7;
"@MMK_R_KO_comma" = -20;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_e" = -7;
"@MMK_R_KO_ellipsis" = -67;
"@MMK_R_KO_endash" = -11;
"@MMK_R_KO_g" = -8;
"@MMK_R_KO_guillemotright" = -23;
"@MMK_R_KO_h" = 2;
"@MMK_R_KO_iacute" = -7;
"@MMK_R_KO_j" = -64;
"@MMK_R_KO_l" = 2;
"@MMK_R_KO_n" = -21;
"@MMK_R_KO_o" = -7;
"@MMK_R_KO_one" = -2;
"@MMK_R_KO_p" = -15;
"@MMK_R_KO_parenright" = 46;
"@MMK_R_KO_period" = -37;
"@MMK_R_KO_q" = -7;
"@MMK_R_KO_question" = -2;
"@MMK_R_KO_quotedbl" = 10;
"@MMK_R_KO_quotedblleft" = -21;
"@MMK_R_KO_quotedblright" = -22;
"@MMK_R_KO_quoteleft" = -21;
"@MMK_R_KO_quoteright" = -22;
"@MMK_R_KO_quotesingle" = 10;
"@MMK_R_KO_slash" = -38;
"@MMK_R_KO_u" = -9;
};
"@MMK_L_KO_Uhorn" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_E" = 15;
"@MMK_R_KO_H" = 12;
"@MMK_R_KO_O" = 12;
"@MMK_R_KO_T" = 29;
"@MMK_R_KO_U" = 24;
"@MMK_R_KO_V" = 40;
"@MMK_R_KO_Y" = 49;
"@MMK_R_KO_Z" = 20;
"@MMK_R_KO_a" = -7;
"@MMK_R_KO_bracketright" = 17;
"@MMK_R_KO_comma" = -21;
"@MMK_R_KO_e" = -7;
"@MMK_R_KO_ellipsis" = -67;
"@MMK_R_KO_endash" = -11;
"@MMK_R_KO_guillemotright" = -23;
"@MMK_R_KO_n" = -21;
"@MMK_R_KO_parenright" = 89;
"@MMK_R_KO_period" = -37;
"@MMK_R_KO_quotedbl" = 35;
"@MMK_R_KO_quotedblright" = 11;
"@MMK_R_KO_quoteright" = 11;
"@MMK_R_KO_quotesingle" = 35;
"@MMK_R_KO_slash" = -38;
"@MMK_R_KO_u" = -14;
};
"@MMK_L_KO_V" = {
"@MMK_R_KO_A" = -110;
"@MMK_R_KO_H" = -2;
"@MMK_R_KO_J" = -89;
"@MMK_R_KO_O" = -17;
"@MMK_R_KO_S" = -3;
"@MMK_R_KO_T" = 18;
"@MMK_R_KO_U" = 9;
"@MMK_R_KO_V" = 19;
"@MMK_R_KO_W" = 31;
"@MMK_R_KO_X" = -8;
"@MMK_R_KO_Y" = 23;
"@MMK_R_KO_Yacute" = 23;
"@MMK_R_KO_a" = -70;
"@MMK_R_KO_aacute" = -75;
"@MMK_R_KO_ampersand" = -83;
"@MMK_R_KO_asterisk" = -33;
"@MMK_R_KO_backslash" = 53;
"@MMK_R_KO_colon" = -21;
"@MMK_R_KO_comma" = -77;
"@MMK_R_KO_d" = -75;
"@MMK_R_KO_dollar" = -17;
"@MMK_R_KO_e" = -76;
"@MMK_R_KO_eight" = -6;
"@MMK_R_KO_ellipsis" = -149;
"@MMK_R_KO_endash" = -60;
"@MMK_R_KO_f" = -25;
"@MMK_R_KO_four" = -42;
"@MMK_R_KO_g" = -73;
"@MMK_R_KO_guillemotright" = -51;
"@MMK_R_KO_hyphen" = -20;
"@MMK_R_KO_iacute" = -29;
"@MMK_R_KO_idotless" = -44;
"@MMK_R_KO_igrave" = 47;
"@MMK_R_KO_itilde" = 48;
"@MMK_R_KO_j" = -44;
"@MMK_R_KO_n" = -84;
"@MMK_R_KO_o" = -77;
"@MMK_R_KO_one" = -10;
"@MMK_R_KO_p" = -44;
"@MMK_R_KO_parenright" = 36;
"@MMK_R_KO_period" = -92;
"@MMK_R_KO_plus" = -103;
"@MMK_R_KO_q" = -76;
"@MMK_R_KO_quotedbl" = 15;
"@MMK_R_KO_quotedblleft" = -24;
"@MMK_R_KO_quotedblright" = -3;
"@MMK_R_KO_quoteleft" = -28;
"@MMK_R_KO_quoteright" = -3;
"@MMK_R_KO_quotesingle" = 15;
"@MMK_R_KO_s" = -43;
"@MMK_R_KO_semicolon" = -18;
"@MMK_R_KO_seven" = 11;
"@MMK_R_KO_six" = -11;
"@MMK_R_KO_slash" = -105;
"@MMK_R_KO_t" = -25;
"@MMK_R_KO_three" = -6;
"@MMK_R_KO_two" = -6;
"@MMK_R_KO_u" = -38;
"@MMK_R_KO_underscore" = -221;
"@MMK_R_KO_v" = -14;
"@MMK_R_KO_w" = -9;
"@MMK_R_KO_x" = -26;
"@MMK_R_KO_y" = -10;
"@MMK_R_KO_z" = -14;
"@MMK_R_KO_zero" = -14;
};
"@MMK_L_KO_W" = {
"@MMK_R_KO_A" = -39;
"@MMK_R_KO_E" = 14;
"@MMK_R_KO_Eacute" = 14;
"@MMK_R_KO_H" = 3;
"@MMK_R_KO_J" = -47;
"@MMK_R_KO_S" = 8;
"@MMK_R_KO_T" = 27;
"@MMK_R_KO_U" = 23;
"@MMK_R_KO_V" = 34;
"@MMK_R_KO_Y" = 29;
"@MMK_R_KO_Yacute" = 29;
"@MMK_R_KO_Z" = 8;
"@MMK_R_KO_a" = -28;
"@MMK_R_KO_ampersand" = -49;
"@MMK_R_KO_asterisk" = -18;
"@MMK_R_KO_backslash" = 61;
"@MMK_R_KO_braceright" = 13;
"@MMK_R_KO_comma" = -41;
"@MMK_R_KO_d" = -28;
"@MMK_R_KO_dollar" = 4;
"@MMK_R_KO_e" = -29;
"@MMK_R_KO_eight" = 3;
"@MMK_R_KO_ellipsis" = -94;
"@MMK_R_KO_endash" = -26;
"@MMK_R_KO_four" = -9;
"@MMK_R_KO_g" = -26;
"@MMK_R_KO_guillemotright" = -20;
"@MMK_R_KO_h" = 3;
"@MMK_R_KO_i" = 4;
"@MMK_R_KO_iacute" = -10;
"@MMK_R_KO_idotless" = -13;
"@MMK_R_KO_igrave" = 54;
"@MMK_R_KO_itilde" = 63;
"@MMK_R_KO_j" = -38;
"@MMK_R_KO_l" = 3;
"@MMK_R_KO_n" = -49;
"@MMK_R_KO_nine" = 13;
"@MMK_R_KO_o" = -30;
"@MMK_R_KO_p" = -12;
"@MMK_R_KO_parenright" = 59;
"@MMK_R_KO_period" = -54;
"@MMK_R_KO_plus" = -70;
"@MMK_R_KO_q" = -30;
"@MMK_R_KO_quotedbl" = 21;
"@MMK_R_KO_quotedblleft" = -14;
"@MMK_R_KO_quoteleft" = -12;
"@MMK_R_KO_quotesingle" = 21;
"@MMK_R_KO_s" = -10;
"@MMK_R_KO_seven" = 24;
"@MMK_R_KO_slash" = -68;
"@MMK_R_KO_three" = 5;
"@MMK_R_KO_two" = 2;
"@MMK_R_KO_u" = -14;
"@MMK_R_KO_underscore" = -167;
};
"@MMK_L_KO_X" = {
"@MMK_R_KO_E" = -8;
"@MMK_R_KO_Eacute" = -8;
"@MMK_R_KO_H" = -12;
"@MMK_R_KO_J" = -20;
"@MMK_R_KO_O" = -49;
"@MMK_R_KO_S" = -21;
"@MMK_R_KO_T" = -13;
"@MMK_R_KO_U" = -10;
"@MMK_R_KO_Y" = -6;
"@MMK_R_KO_Yacute" = -6;
"@MMK_R_KO_a" = -66;
"@MMK_R_KO_ampersand" = -54;
"@MMK_R_KO_asterisk" = -62;
"@MMK_R_KO_backslash" = 2;
"@MMK_R_KO_comma" = -4;
"@MMK_R_KO_d" = -68;
"@MMK_R_KO_dollar" = -57;
"@MMK_R_KO_e" = -66;
"@MMK_R_KO_eight" = -19;
"@MMK_R_KO_ellipsis" = -40;
"@MMK_R_KO_endash" = -69;
"@MMK_R_KO_f" = -73;
"@MMK_R_KO_four" = -49;
"@MMK_R_KO_g" = -31;
"@MMK_R_KO_guillemotright" = -49;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_hyphen" = -43;
"@MMK_R_KO_i" = -3;
"@MMK_R_KO_iacute" = -22;
"@MMK_R_KO_idotless" = -24;
"@MMK_R_KO_igrave" = 24;
"@MMK_R_KO_itilde" = 31;
"@MMK_R_KO_j" = -38;
"@MMK_R_KO_l" = -15;
"@MMK_R_KO_n" = -22;
"@MMK_R_KO_nine" = -20;
"@MMK_R_KO_o" = -70;
"@MMK_R_KO_one" = -42;
"@MMK_R_KO_p" = -23;
"@MMK_R_KO_parenright" = 40;
"@MMK_R_KO_period" = -8;
"@MMK_R_KO_plus" = -117;
"@MMK_R_KO_q" = -64;
"@MMK_R_KO_question" = -18;
"@MMK_R_KO_quotedblleft" = -46;
"@MMK_R_KO_quotedblright" = -34;
"@MMK_R_KO_quoteleft" = -50;
"@MMK_R_KO_quoteright" = -34;
"@MMK_R_KO_s" = -33;
"@MMK_R_KO_six" = -32;
"@MMK_R_KO_t" = -76;
"@MMK_R_KO_three" = -16;
"@MMK_R_KO_u" = -74;
"@MMK_R_KO_underscore" = -85;
"@MMK_R_KO_v" = -57;
"@MMK_R_KO_w" = -55;
"@MMK_R_KO_x" = -23;
"@MMK_R_KO_y" = -57;
"@MMK_R_KO_z" = -9;
"@MMK_R_KO_zero" = -39;
};
"@MMK_L_KO_Y" = {
"@MMK_R_KO_A" = -99;
"@MMK_R_KO_H" = -11;
"@MMK_R_KO_J" = -86;
"@MMK_R_KO_O" = -26;
"@MMK_R_KO_S" = -11;
"@MMK_R_KO_T" = 17;
"@MMK_R_KO_V" = 24;
"@MMK_R_KO_W" = 29;
"@MMK_R_KO_X" = -17;
"@MMK_R_KO_Y" = 13;
"@MMK_R_KO_Yacute" = 13;
"@MMK_R_KO_Z" = -9;
"@MMK_R_KO_a" = -100;
"@MMK_R_KO_ampersand" = -83;
"@MMK_R_KO_asterisk" = -32;
"@MMK_R_KO_backslash" = 43;
"@MMK_R_KO_colon" = -34;
"@MMK_R_KO_comma" = -97;
"@MMK_R_KO_d" = -100;
"@MMK_R_KO_dollar" = -34;
"@MMK_R_KO_e" = -102;
"@MMK_R_KO_eight" = -19;
"@MMK_R_KO_ellipsis" = -162;
"@MMK_R_KO_endash" = -92;
"@MMK_R_KO_f" = -36;
"@MMK_R_KO_four" = -78;
"@MMK_R_KO_g" = -97;
"@MMK_R_KO_guillemotright" = -71;
"@MMK_R_KO_hyphen" = -61;
"@MMK_R_KO_iacute" = -34;
"@MMK_R_KO_idotless" = -62;
"@MMK_R_KO_igrave" = 41;
"@MMK_R_KO_itilde" = 58;
"@MMK_R_KO_j" = -44;
"@MMK_R_KO_n" = -106;
"@MMK_R_KO_nine" = -7;
"@MMK_R_KO_o" = -105;
"@MMK_R_KO_one" = -21;
"@MMK_R_KO_p" = -62;
"@MMK_R_KO_parenright" = 21;
"@MMK_R_KO_period" = -105;
"@MMK_R_KO_plus" = -140;
"@MMK_R_KO_q" = -103;
"@MMK_R_KO_quotedbl" = 24;
"@MMK_R_KO_quotedblleft" = -20;
"@MMK_R_KO_quoteleft" = -26;
"@MMK_R_KO_quotesingle" = 24;
"@MMK_R_KO_s" = -76;
"@MMK_R_KO_semicolon" = -31;
"@MMK_R_KO_seven" = 14;
"@MMK_R_KO_six" = -15;
"@MMK_R_KO_slash" = -114;
"@MMK_R_KO_t" = -35;
"@MMK_R_KO_three" = -14;
"@MMK_R_KO_two" = -15;
"@MMK_R_KO_u" = -56;
"@MMK_R_KO_underscore" = -206;
"@MMK_R_KO_v" = -34;
"@MMK_R_KO_w" = -31;
"@MMK_R_KO_x" = -46;
"@MMK_R_KO_y" = -36;
"@MMK_R_KO_z" = -31;
"@MMK_R_KO_zero" = -20;
};
"@MMK_L_KO_Yacute" = {
"@MMK_R_KO_A" = -99;
"@MMK_R_KO_H" = -11;
"@MMK_R_KO_J" = -86;
"@MMK_R_KO_O" = -25;
"@MMK_R_KO_S" = -11;
"@MMK_R_KO_T" = 17;
"@MMK_R_KO_V" = 24;
"@MMK_R_KO_W" = 29;
"@MMK_R_KO_X" = -17;
"@MMK_R_KO_Y" = 13;
"@MMK_R_KO_Yacute" = 13;
"@MMK_R_KO_Z" = -9;
"@MMK_R_KO_a" = -100;
"@MMK_R_KO_colon" = -34;
"@MMK_R_KO_comma" = -97;
"@MMK_R_KO_d" = -100;
"@MMK_R_KO_e" = -102;
"@MMK_R_KO_ellipsis" = -162;
"@MMK_R_KO_endash" = -89;
"@MMK_R_KO_f" = -36;
"@MMK_R_KO_guillemotright" = -71;
"@MMK_R_KO_hyphen" = -61;
"@MMK_R_KO_j" = -44;
"@MMK_R_KO_n" = -104;
"@MMK_R_KO_o" = -105;
"@MMK_R_KO_parenright" = 27;
"@MMK_R_KO_period" = -105;
"@MMK_R_KO_quotedbl" = 24;
"@MMK_R_KO_quotedblleft" = -20;
"@MMK_R_KO_quoteleft" = -26;
"@MMK_R_KO_quotesingle" = 24;
"@MMK_R_KO_s" = -76;
"@MMK_R_KO_semicolon" = -31;
"@MMK_R_KO_slash" = -114;
"@MMK_R_KO_t" = -35;
"@MMK_R_KO_two" = -15;
"@MMK_R_KO_u" = -56;
"@MMK_R_KO_v" = -34;
"@MMK_R_KO_w" = -31;
"@MMK_R_KO_y" = -36;
};
"@MMK_L_KO_Z" = {
"@MMK_R_KO_J" = -6;
"@MMK_R_KO_O" = -10;
"@MMK_R_KO_S" = 6;
"@MMK_R_KO_T" = 9;
"@MMK_R_KO_U" = 2;
"@MMK_R_KO_V" = 10;
"@MMK_R_KO_W" = 21;
"@MMK_R_KO_X" = -3;
"@MMK_R_KO_a" = -28;
"@MMK_R_KO_ampersand" = -24;
"@MMK_R_KO_asterisk" = -26;
"@MMK_R_KO_backslash" = 22;
"@MMK_R_KO_d" = -28;
"@MMK_R_KO_dollar" = -11;
"@MMK_R_KO_e" = -27;
"@MMK_R_KO_ellipsis" = -36;
"@MMK_R_KO_endash" = -34;
"@MMK_R_KO_f" = -13;
"@MMK_R_KO_four" = -20;
"@MMK_R_KO_g" = -28;
"@MMK_R_KO_guillemotright" = -18;
"@MMK_R_KO_hyphen" = -13;
"@MMK_R_KO_iacute" = -16;
"@MMK_R_KO_idotless" = -29;
"@MMK_R_KO_igrave" = 17;
"@MMK_R_KO_itilde" = 41;
"@MMK_R_KO_j" = -37;
"@MMK_R_KO_l" = -9;
"@MMK_R_KO_n" = -27;
"@MMK_R_KO_nine" = 10;
"@MMK_R_KO_o" = -28;
"@MMK_R_KO_p" = -25;
"@MMK_R_KO_parenright" = 37;
"@MMK_R_KO_plus" = -101;
"@MMK_R_KO_q" = -27;
"@MMK_R_KO_quotedblleft" = -15;
"@MMK_R_KO_quotedblright" = -10;
"@MMK_R_KO_quoteleft" = -17;
"@MMK_R_KO_quoteright" = -10;
"@MMK_R_KO_s" = -6;
"@MMK_R_KO_six" = -2;
"@MMK_R_KO_t" = -15;
"@MMK_R_KO_three" = 2;
"@MMK_R_KO_two" = 15;
"@MMK_R_KO_u" = -26;
"@MMK_R_KO_underscore" = -87;
"@MMK_R_KO_x" = -5;
"@MMK_R_KO_y" = -2;
"@MMK_R_KO_zero" = -6;
};
"@MMK_L_KO_a" = {
"@MMK_R_KO_E" = -5;
"@MMK_R_KO_Eacute" = -5;
"@MMK_R_KO_H" = -5;
"@MMK_R_KO_J" = -16;
"@MMK_R_KO_O" = -9;
"@MMK_R_KO_S" = -9;
"@MMK_R_KO_T" = -58;
"@MMK_R_KO_U" = -16;
"@MMK_R_KO_V" = -40;
"@MMK_R_KO_W" = -12;
"@MMK_R_KO_X" = -22;
"@MMK_R_KO_Y" = -61;
"@MMK_R_KO_Yacute" = -61;
"@MMK_R_KO_Z" = -17;
"@MMK_R_KO_a" = -6;
"@MMK_R_KO_aacute" = -8;
"@MMK_R_KO_ampersand" = -7;
"@MMK_R_KO_asterisk" = -25;
"@MMK_R_KO_backslash" = -6;
"@MMK_R_KO_braceright" = -6;
"@MMK_R_KO_bracketright" = -12;
"@MMK_R_KO_colon" = 10;
"@MMK_R_KO_d" = -8;
"@MMK_R_KO_dollar" = -13;
"@MMK_R_KO_e" = -9;
"@MMK_R_KO_eight" = -8;
"@MMK_R_KO_ellipsis" = -42;
"@MMK_R_KO_endash" = -11;
"@MMK_R_KO_f" = -9;
"@MMK_R_KO_four" = -9;
"@MMK_R_KO_g" = -9;
"@MMK_R_KO_guillemotright" = -19;
"@MMK_R_KO_j" = -58;
"@MMK_R_KO_l" = -2;
"@MMK_R_KO_n" = -14;
"@MMK_R_KO_nine" = -10;
"@MMK_R_KO_o" = -10;
"@MMK_R_KO_one" = -18;
"@MMK_R_KO_parenright" = 10;
"@MMK_R_KO_period" = -10;
"@MMK_R_KO_plus" = -46;
"@MMK_R_KO_q" = -8;
"@MMK_R_KO_question" = -18;
"@MMK_R_KO_quotedbl" = -20;
"@MMK_R_KO_quotedblleft" = -41;
"@MMK_R_KO_quotedblright" = -34;
"@MMK_R_KO_quoteleft" = -39;
"@MMK_R_KO_quoteright" = -36;
"@MMK_R_KO_quotesingle" = -20;
"@MMK_R_KO_semicolon" = 20;
"@MMK_R_KO_seven" = -37;
"@MMK_R_KO_t" = -9;
"@MMK_R_KO_three" = -14;
"@MMK_R_KO_u" = -13;
"@MMK_R_KO_underscore" = -69;
"@MMK_R_KO_zero" = -3;
};
"@MMK_L_KO_ampersand" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_E" = -35;
"@MMK_R_KO_H" = -35;
"@MMK_R_KO_J" = -25;
"@MMK_R_KO_O" = -65;
"@MMK_R_KO_S" = -75;
"@MMK_R_KO_T" = -125;
"@MMK_R_KO_U" = -77;
"@MMK_R_KO_V" = -113;
"@MMK_R_KO_W" = -89;
"@MMK_R_KO_X" = -47;
"@MMK_R_KO_Y" = -138;
"@MMK_R_KO_Z" = -28;
"@MMK_R_KO_a" = -59;
"@MMK_R_KO_bracketright" = -44;
"@MMK_R_KO_d" = -59;
"@MMK_R_KO_e" = -59;
"@MMK_R_KO_eight" = -69;
"@MMK_R_KO_f" = -68;
"@MMK_R_KO_four" = -61;
"@MMK_R_KO_g" = -28;
"@MMK_R_KO_guillemotright" = -60;
"@MMK_R_KO_h" = -28;
"@MMK_R_KO_i" = -26;
"@MMK_R_KO_j" = -53;
"@MMK_R_KO_l" = -62;
"@MMK_R_KO_n" = -26;
"@MMK_R_KO_nine" = -70;
"@MMK_R_KO_o" = -60;
"@MMK_R_KO_one" = -83;
"@MMK_R_KO_p" = -26;
"@MMK_R_KO_parenright" = -22;
"@MMK_R_KO_q" = -59;
"@MMK_R_KO_quotedbl" = -100;
"@MMK_R_KO_quotedblleft" = -117;
"@MMK_R_KO_quotedblright" = -110;
"@MMK_R_KO_quoteleft" = -108;
"@MMK_R_KO_quoteright" = -110;
"@MMK_R_KO_quotesingle" = -100;
"@MMK_R_KO_s" = -36;
"@MMK_R_KO_seven" = -79;
"@MMK_R_KO_six" = -57;
"@MMK_R_KO_t" = -71;
"@MMK_R_KO_three" = -66;
"@MMK_R_KO_two" = -14;
"@MMK_R_KO_u" = -73;
"@MMK_R_KO_v" = -77;
"@MMK_R_KO_w" = -71;
"@MMK_R_KO_x" = -32;
"@MMK_R_KO_y" = -79;
"@MMK_R_KO_z" = -21;
"@MMK_R_KO_zero" = -61;
};
"@MMK_L_KO_asterisk" = {
"@MMK_R_KO_A" = -96;
"@MMK_R_KO_E" = -28;
"@MMK_R_KO_H" = -30;
"@MMK_R_KO_J" = -128;
"@MMK_R_KO_O" = -23;
"@MMK_R_KO_S" = -15;
"@MMK_R_KO_T" = -33;
"@MMK_R_KO_U" = -22;
"@MMK_R_KO_V" = -32;
"@MMK_R_KO_W" = -18;
"@MMK_R_KO_X" = -69;
"@MMK_R_KO_Y" = -31;
"@MMK_R_KO_Z" = -50;
"@MMK_R_KO_a" = -42;
"@MMK_R_KO_asterisk" = -66;
"@MMK_R_KO_braceright" = -38;
"@MMK_R_KO_bracketright" = -43;
"@MMK_R_KO_colon" = -36;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -42;
"@MMK_R_KO_e" = -43;
"@MMK_R_KO_eight" = -20;
"@MMK_R_KO_endash" = -50;
"@MMK_R_KO_f" = -16;
"@MMK_R_KO_four" = -47;
"@MMK_R_KO_g" = -40;
"@MMK_R_KO_guillemotright" = -83;
"@MMK_R_KO_h" = -22;
"@MMK_R_KO_hyphen" = -38;
"@MMK_R_KO_i" = -23;
"@MMK_R_KO_j" = -73;
"@MMK_R_KO_l" = -22;
"@MMK_R_KO_n" = -52;
"@MMK_R_KO_nine" = -11;
"@MMK_R_KO_o" = -44;
"@MMK_R_KO_one" = -17;
"@MMK_R_KO_p" = -25;
"@MMK_R_KO_parenright" = -18;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_q" = -43;
"@MMK_R_KO_question" = -34;
"@MMK_R_KO_quotedbl" = -60;
"@MMK_R_KO_quotedblleft" = -67;
"@MMK_R_KO_quotedblright" = -86;
"@MMK_R_KO_quoteleft" = -66;
"@MMK_R_KO_quoteright" = -86;
"@MMK_R_KO_quotesingle" = -60;
"@MMK_R_KO_s" = -20;
"@MMK_R_KO_semicolon" = -29;
"@MMK_R_KO_seven" = -39;
"@MMK_R_KO_six" = -17;
"@MMK_R_KO_slash" = -92;
"@MMK_R_KO_t" = -16;
"@MMK_R_KO_three" = -20;
"@MMK_R_KO_two" = -15;
"@MMK_R_KO_u" = -22;
"@MMK_R_KO_v" = -9;
"@MMK_R_KO_w" = -6;
"@MMK_R_KO_x" = -35;
"@MMK_R_KO_y" = -12;
"@MMK_R_KO_z" = -26;
"@MMK_R_KO_zero" = -20;
};
"@MMK_L_KO_b" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_E" = -7;
"@MMK_R_KO_H" = -7;
"@MMK_R_KO_J" = -17;
"@MMK_R_KO_S" = -3;
"@MMK_R_KO_T" = -92;
"@MMK_R_KO_U" = -6;
"@MMK_R_KO_V" = -70;
"@MMK_R_KO_W" = -28;
"@MMK_R_KO_X" = -60;
"@MMK_R_KO_Y" = -98;
"@MMK_R_KO_Z" = -14;
"@MMK_R_KO_a" = 5;
"@MMK_R_KO_aacute" = 5;
"@MMK_R_KO_ampersand" = -6;
"@MMK_R_KO_asterisk" = -42;
"@MMK_R_KO_backslash" = -19;
"@MMK_R_KO_braceright" = -31;
"@MMK_R_KO_bracketright" = -28;
"@MMK_R_KO_d" = 5;
"@MMK_R_KO_dollar" = -6;
"@MMK_R_KO_e" = 5;
"@MMK_R_KO_ellipsis" = -46;
"@MMK_R_KO_f" = -11;
"@MMK_R_KO_four" = 2;
"@MMK_R_KO_g" = 4;
"@MMK_R_KO_guillemotright" = -31;
"@MMK_R_KO_h" = -5;
"@MMK_R_KO_hyphen" = 16;
"@MMK_R_KO_iacute" = -5;
"@MMK_R_KO_idotless" = -7;
"@MMK_R_KO_igrave" = -5;
"@MMK_R_KO_itilde" = -5;
"@MMK_R_KO_j" = -59;
"@MMK_R_KO_l" = -8;
"@MMK_R_KO_n" = -4;
"@MMK_R_KO_o" = 5;
"@MMK_R_KO_one" = -28;
"@MMK_R_KO_p" = -5;
"@MMK_R_KO_parenright" = -14;
"@MMK_R_KO_period" = -16;
"@MMK_R_KO_plus" = -34;
"@MMK_R_KO_q" = 5;
"@MMK_R_KO_question" = -49;
"@MMK_R_KO_quotedbl" = -47;
"@MMK_R_KO_quotedblleft" = -53;
"@MMK_R_KO_quotedblright" = -62;
"@MMK_R_KO_quoteleft" = -49;
"@MMK_R_KO_quoteright" = -62;
"@MMK_R_KO_quotesingle" = -47;
"@MMK_R_KO_s" = 10;
"@MMK_R_KO_seven" = -85;
"@MMK_R_KO_slash" = -16;
"@MMK_R_KO_t" = -14;
"@MMK_R_KO_u" = -4;
"@MMK_R_KO_underscore" = -144;
"@MMK_R_KO_v" = -19;
"@MMK_R_KO_w" = -13;
"@MMK_R_KO_x" = -35;
"@MMK_R_KO_y" = -21;
"@MMK_R_KO_z" = -5;
};
"@MMK_L_KO_backslash" = {
"@MMK_R_KO_A" = 51;
"@MMK_R_KO_E" = 10;
"@MMK_R_KO_H" = 10;
"@MMK_R_KO_J" = 14;
"@MMK_R_KO_T" = -62;
"@MMK_R_KO_V" = -69;
"@MMK_R_KO_W" = -29;
"@MMK_R_KO_Y" = -79;
"@MMK_R_KO_Z" = 27;
"@MMK_R_KO_a" = 13;
"@MMK_R_KO_asterisk" = -81;
"@MMK_R_KO_backslash" = -96;
"@MMK_R_KO_d" = 13;
"@MMK_R_KO_e" = 13;
"@MMK_R_KO_eight" = 4;
"@MMK_R_KO_f" = -10;
"@MMK_R_KO_g" = 10;
"@MMK_R_KO_h" = 23;
"@MMK_R_KO_i" = 27;
"@MMK_R_KO_l" = 5;
"@MMK_R_KO_n" = 29;
"@MMK_R_KO_o" = 11;
"@MMK_R_KO_one" = -44;
"@MMK_R_KO_p" = 24;
"@MMK_R_KO_parenright" = 11;
"@MMK_R_KO_q" = 15;
"@MMK_R_KO_quotedbl" = -66;
"@MMK_R_KO_quotedblleft" = -83;
"@MMK_R_KO_quotedblright" = -81;
"@MMK_R_KO_quoteleft" = -79;
"@MMK_R_KO_quoteright" = -81;
"@MMK_R_KO_quotesingle" = -66;
"@MMK_R_KO_s" = 29;
"@MMK_R_KO_seven" = -16;
"@MMK_R_KO_t" = -21;
"@MMK_R_KO_two" = 41;
"@MMK_R_KO_underscore" = -54;
"@MMK_R_KO_v" = -31;
"@MMK_R_KO_w" = -18;
"@MMK_R_KO_y" = -34;
"@MMK_R_KO_z" = 43;
};
"@MMK_L_KO_braceleft" = {
"@MMK_R_KO_H" = -9;
"@MMK_R_KO_J" = -16;
"@MMK_R_KO_O" = -17;
"@MMK_R_KO_W" = 12;
"@MMK_R_KO_a" = -31;
"@MMK_R_KO_asterisk" = -38;
"@MMK_R_KO_braceright" = -41;
"@MMK_R_KO_comma" = 32;
"@MMK_R_KO_d" = -31;
"@MMK_R_KO_e" = -31;
"@MMK_R_KO_ellipsis" = -64;
"@MMK_R_KO_f" = -23;
"@MMK_R_KO_four" = -28;
"@MMK_R_KO_guillemotright" = -46;
"@MMK_R_KO_hyphen" = -37;
"@MMK_R_KO_n" = -13;
"@MMK_R_KO_o" = -32;
"@MMK_R_KO_period" = -35;
"@MMK_R_KO_plus" = -82;
"@MMK_R_KO_q" = -31;
"@MMK_R_KO_quotedblleft" = -22;
"@MMK_R_KO_quotedblright" = -6;
"@MMK_R_KO_quoteright" = -6;
"@MMK_R_KO_s" = -8;
"@MMK_R_KO_six" = -7;
"@MMK_R_KO_t" = -23;
"@MMK_R_KO_two" = 8;
"@MMK_R_KO_u" = -23;
"@MMK_R_KO_v" = -19;
"@MMK_R_KO_w" = -17;
"@MMK_R_KO_x" = -6;
"@MMK_R_KO_y" = -8;
"@MMK_R_KO_zero" = -14;
};
"@MMK_L_KO_bracketleft" = {
"@MMK_R_KO_H" = -2;
"@MMK_R_KO_J" = -17;
"@MMK_R_KO_O" = -20;
"@MMK_R_KO_S" = -2;
"@MMK_R_KO_a" = -29;
"@MMK_R_KO_aacute" = -30;
"@MMK_R_KO_ampersand" = -33;
"@MMK_R_KO_asterisk" = -43;
"@MMK_R_KO_bracketright" = -43;
"@MMK_R_KO_colon" = -35;
"@MMK_R_KO_comma" = 23;
"@MMK_R_KO_d" = -30;
"@MMK_R_KO_dollar" = -7;
"@MMK_R_KO_e" = -30;
"@MMK_R_KO_eight" = -6;
"@MMK_R_KO_ellipsis" = -64;
"@MMK_R_KO_endash" = -57;
"@MMK_R_KO_f" = -28;
"@MMK_R_KO_four" = -29;
"@MMK_R_KO_guillemotright" = -49;
"@MMK_R_KO_hyphen" = -24;
"@MMK_R_KO_iacute" = -9;
"@MMK_R_KO_idotless" = -17;
"@MMK_R_KO_n" = -14;
"@MMK_R_KO_o" = -31;
"@MMK_R_KO_one" = -12;
"@MMK_R_KO_period" = -35;
"@MMK_R_KO_plus" = -79;
"@MMK_R_KO_q" = -29;
"@MMK_R_KO_quotedblleft" = -25;
"@MMK_R_KO_quotedblright" = -13;
"@MMK_R_KO_quoteleft" = -29;
"@MMK_R_KO_quoteright" = -13;
"@MMK_R_KO_s" = -11;
"@MMK_R_KO_six" = -10;
"@MMK_R_KO_t" = -27;
"@MMK_R_KO_u" = -27;
"@MMK_R_KO_underscore" = -41;
"@MMK_R_KO_v" = -25;
"@MMK_R_KO_w" = -22;
"@MMK_R_KO_x" = -6;
"@MMK_R_KO_y" = -14;
"@MMK_R_KO_zero" = -17;
};
"@MMK_L_KO_c" = {
"@MMK_R_KO_A" = -14;
"@MMK_R_KO_E" = -11;
"@MMK_R_KO_Eacute" = -10;
"@MMK_R_KO_H" = -11;
"@MMK_R_KO_J" = -4;
"@MMK_R_KO_O" = -4;
"@MMK_R_KO_T" = -74;
"@MMK_R_KO_U" = -13;
"@MMK_R_KO_V" = -54;
"@MMK_R_KO_W" = -23;
"@MMK_R_KO_X" = -43;
"@MMK_R_KO_Y" = -83;
"@MMK_R_KO_asterisk" = -28;
"@MMK_R_KO_backslash" = -13;
"@MMK_R_KO_braceright" = -23;
"@MMK_R_KO_bracketright" = -24;
"@MMK_R_KO_colon" = 10;
"@MMK_R_KO_ellipsis" = -27;
"@MMK_R_KO_f" = -4;
"@MMK_R_KO_four" = 6;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -4;
"@MMK_R_KO_hyphen" = 32;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -4;
"@MMK_R_KO_idotless" = -4;
"@MMK_R_KO_igrave" = -4;
"@MMK_R_KO_itilde" = -3;
"@MMK_R_KO_j" = -48;
"@MMK_R_KO_n" = -2;
"@MMK_R_KO_one" = -16;
"@MMK_R_KO_p" = -4;
"@MMK_R_KO_period" = -2;
"@MMK_R_KO_plus" = -48;
"@MMK_R_KO_question" = -34;
"@MMK_R_KO_quotedbl" = -37;
"@MMK_R_KO_quotedblleft" = -45;
"@MMK_R_KO_quotedblright" = -55;
"@MMK_R_KO_quoteleft" = -41;
"@MMK_R_KO_quoteright" = -55;
"@MMK_R_KO_quotesingle" = -37;
"@MMK_R_KO_s" = 12;
"@MMK_R_KO_semicolon" = 21;
"@MMK_R_KO_seven" = -70;
"@MMK_R_KO_slash" = -11;
"@MMK_R_KO_t" = -5;
"@MMK_R_KO_u" = -6;
"@MMK_R_KO_underscore" = -134;
"@MMK_R_KO_v" = -14;
"@MMK_R_KO_w" = -9;
"@MMK_R_KO_x" = -23;
"@MMK_R_KO_y" = -16;
};
"@MMK_L_KO_colon" = {
"@MMK_R_KO_S" = 9;
"@MMK_R_KO_T" = -33;
"@MMK_R_KO_V" = -19;
"@MMK_R_KO_Y" = -33;
"@MMK_R_KO_asterisk" = -36;
"@MMK_R_KO_braceright" = -27;
"@MMK_R_KO_bracketright" = -34;
"@MMK_R_KO_endash" = -27;
"@MMK_R_KO_four" = -3;
"@MMK_R_KO_guillemotright" = -11;
"@MMK_R_KO_h" = 11;
"@MMK_R_KO_i" = 14;
"@MMK_R_KO_j" = -24;
"@MMK_R_KO_l" = 6;
"@MMK_R_KO_nine" = 14;
"@MMK_R_KO_p" = 11;
"@MMK_R_KO_quotedbl" = -26;
"@MMK_R_KO_quotedblleft" = -33;
"@MMK_R_KO_quotedblright" = -45;
"@MMK_R_KO_quoteleft" = -31;
"@MMK_R_KO_quoteright" = -45;
"@MMK_R_KO_quotesingle" = -26;
"@MMK_R_KO_s" = 24;
"@MMK_R_KO_seven" = -25;
"@MMK_R_KO_six" = 2;
"@MMK_R_KO_two" = 20;
"@MMK_R_KO_v" = 5;
"@MMK_R_KO_w" = 13;
"@MMK_R_KO_x" = 10;
"@MMK_R_KO_z" = 37;
};
"@MMK_L_KO_copyright" = {
"@MMK_R_KO_A" = -54;
"@MMK_R_KO_E" = -18;
"@MMK_R_KO_H" = -18;
"@MMK_R_KO_J" = -50;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_S" = -7;
"@MMK_R_KO_T" = -42;
"@MMK_R_KO_U" = -8;
"@MMK_R_KO_V" = -52;
"@MMK_R_KO_W" = -21;
"@MMK_R_KO_X" = -96;
"@MMK_R_KO_Y" = -73;
"@MMK_R_KO_Z" = -31;
};
"@MMK_L_KO_d" = {
"@MMK_R_KO_E" = -2;
"@MMK_R_KO_Eacute" = -2;
"@MMK_R_KO_H" = -2;
"@MMK_R_KO_J" = -15;
"@MMK_R_KO_O" = -5;
"@MMK_R_KO_U" = 2;
"@MMK_R_KO_W" = 3;
"@MMK_R_KO_X" = -13;
"@MMK_R_KO_a" = -7;
"@MMK_R_KO_aacute" = -7;
"@MMK_R_KO_ampersand" = -7;
"@MMK_R_KO_asterisk" = -22;
"@MMK_R_KO_backslash" = 19;
"@MMK_R_KO_colon" = 10;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_dollar" = -6;
"@MMK_R_KO_e" = -9;
"@MMK_R_KO_eight" = -2;
"@MMK_R_KO_ellipsis" = -42;
"@MMK_R_KO_f" = -2;
"@MMK_R_KO_g" = -6;
"@MMK_R_KO_guillemotright" = -19;
"@MMK_R_KO_j" = -56;
"@MMK_R_KO_n" = -13;
"@MMK_R_KO_o" = -10;
"@MMK_R_KO_one" = -16;
"@MMK_R_KO_parenright" = 44;
"@MMK_R_KO_period" = -10;
"@MMK_R_KO_plus" = -45;
"@MMK_R_KO_q" = -7;
"@MMK_R_KO_quotedbl" = -10;
"@MMK_R_KO_quotedblleft" = -25;
"@MMK_R_KO_quotedblright" = -25;
"@MMK_R_KO_quoteleft" = -22;
"@MMK_R_KO_quoteright" = -25;
"@MMK_R_KO_quotesingle" = -10;
"@MMK_R_KO_semicolon" = 20;
"@MMK_R_KO_seven" = -12;
"@MMK_R_KO_t" = -2;
"@MMK_R_KO_u" = -14;
"@MMK_R_KO_underscore" = -92;
"@MMK_R_KO_zero" = -2;
};
"@MMK_L_KO_dcroat" = {
"@MMK_R_KO_a" = -2;
"@MMK_R_KO_aacute" = -7;
"@MMK_R_KO_colon" = 13;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_e" = -2;
"@MMK_R_KO_f" = -2;
"@MMK_R_KO_g" = -7;
"@MMK_R_KO_itilde" = 40;
"@MMK_R_KO_j" = -48;
"@MMK_R_KO_n" = -14;
"@MMK_R_KO_o" = -11;
"@MMK_R_KO_parenright" = 59;
"@MMK_R_KO_period" = -11;
"@MMK_R_KO_quotedbl" = 10;
"@MMK_R_KO_quotesingle" = 10;
"@MMK_R_KO_semicolon" = 20;
"@MMK_R_KO_t" = -2;
"@MMK_R_KO_u" = -14;
};
"@MMK_L_KO_degree" = {
"@MMK_R_KO_A" = -86;
"@MMK_R_KO_E" = -6;
"@MMK_R_KO_H" = -8;
"@MMK_R_KO_J" = -114;
"@MMK_R_KO_O" = -8;
"@MMK_R_KO_W" = 3;
"@MMK_R_KO_X" = -43;
"@MMK_R_KO_Y" = -13;
"@MMK_R_KO_Z" = -30;
"@MMK_R_KO_a" = -32;
"@MMK_R_KO_asterisk" = -17;
"@MMK_R_KO_bracketright" = -8;
"@MMK_R_KO_colon" = -16;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -32;
"@MMK_R_KO_e" = -34;
"@MMK_R_KO_eight" = -2;
"@MMK_R_KO_endash" = -43;
"@MMK_R_KO_four" = -44;
"@MMK_R_KO_g" = -29;
"@MMK_R_KO_guillemotright" = -46;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_hyphen" = -28;
"@MMK_R_KO_i" = -10;
"@MMK_R_KO_j" = -55;
"@MMK_R_KO_l" = -2;
"@MMK_R_KO_n" = -39;
"@MMK_R_KO_nine" = 4;
"@MMK_R_KO_o" = -36;
"@MMK_R_KO_p" = -20;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_quotedbl" = -10;
"@MMK_R_KO_quotedblleft" = -17;
"@MMK_R_KO_quotedblright" = -24;
"@MMK_R_KO_quoteright" = -24;
"@MMK_R_KO_quotesingle" = -10;
"@MMK_R_KO_s" = -10;
"@MMK_R_KO_semicolon" = -15;
"@MMK_R_KO_seven" = -13;
"@MMK_R_KO_slash" = -80;
"@MMK_R_KO_three" = -2;
"@MMK_R_KO_two" = -2;
"@MMK_R_KO_u" = -17;
"@MMK_R_KO_zero" = -4;
};
"@MMK_L_KO_e" = {
"@MMK_R_KO_A" = -21;
"@MMK_R_KO_E" = -11;
"@MMK_R_KO_Eacute" = -11;
"@MMK_R_KO_H" = -11;
"@MMK_R_KO_J" = -11;
"@MMK_R_KO_T" = -91;
"@MMK_R_KO_U" = -8;
"@MMK_R_KO_V" = -68;
"@MMK_R_KO_W" = -26;
"@MMK_R_KO_X" = -50;
"@MMK_R_KO_Y" = -97;
"@MMK_R_KO_Yacute" = -97;
"@MMK_R_KO_Z" = -7;
"@MMK_R_KO_ampersand" = -6;
"@MMK_R_KO_asterisk" = -39;
"@MMK_R_KO_backslash" = -17;
"@MMK_R_KO_braceright" = -25;
"@MMK_R_KO_bracketright" = -24;
"@MMK_R_KO_comma" = -6;
"@MMK_R_KO_dollar" = -2;
"@MMK_R_KO_ellipsis" = -36;
"@MMK_R_KO_f" = -15;
"@MMK_R_KO_four" = 6;
"@MMK_R_KO_guillemotright" = -25;
"@MMK_R_KO_h" = -6;
"@MMK_R_KO_hyphen" = 21;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -6;
"@MMK_R_KO_idotless" = -6;
"@MMK_R_KO_igrave" = -6;
"@MMK_R_KO_itilde" = -6;
"@MMK_R_KO_j" = -56;
"@MMK_R_KO_l" = -7;
"@MMK_R_KO_n" = -2;
"@MMK_R_KO_nine" = -9;
"@MMK_R_KO_one" = -27;
"@MMK_R_KO_p" = -6;
"@MMK_R_KO_parenright" = -5;
"@MMK_R_KO_period" = -10;
"@MMK_R_KO_plus" = -30;
"@MMK_R_KO_question" = -46;
"@MMK_R_KO_quotedbl" = -22;
"@MMK_R_KO_quotedblleft" = -42;
"@MMK_R_KO_quotedblright" = -49;
"@MMK_R_KO_quoteleft" = -47;
"@MMK_R_KO_quoteright" = -45;
"@MMK_R_KO_quotesingle" = -22;
"@MMK_R_KO_s" = 15;
"@MMK_R_KO_semicolon" = 5;
"@MMK_R_KO_seven" = -83;
"@MMK_R_KO_slash" = -16;
"@MMK_R_KO_t" = -16;
"@MMK_R_KO_two" = -10;
"@MMK_R_KO_u" = -2;
"@MMK_R_KO_underscore" = -139;
"@MMK_R_KO_v" = -18;
"@MMK_R_KO_w" = -14;
"@MMK_R_KO_x" = -35;
"@MMK_R_KO_y" = -20;
"@MMK_R_KO_z" = -2;
};
"@MMK_L_KO_eight" = {
"@MMK_R_KO_J" = -8;
"@MMK_R_KO_S" = 19;
"@MMK_R_KO_V" = -3;
"@MMK_R_KO_W" = 5;
"@MMK_R_KO_X" = -19;
"@MMK_R_KO_Y" = -17;
"@MMK_R_KO_Yacute" = -17;
"@MMK_R_KO_Z" = 13;
"@MMK_R_KO_asterisk" = -19;
"@MMK_R_KO_bracketright" = -5;
"@MMK_R_KO_dollar" = 9;
"@MMK_R_KO_eight" = 15;
"@MMK_R_KO_ellipsis" = -42;
"@MMK_R_KO_four" = 17;
"@MMK_R_KO_guillemotright" = -18;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_hyphen" = 12;
"@MMK_R_KO_idotless" = -7;
"@MMK_R_KO_j" = -65;
"@MMK_R_KO_l" = -4;
"@MMK_R_KO_n" = -7;
"@MMK_R_KO_nine" = 12;
"@MMK_R_KO_p" = -6;
"@MMK_R_KO_parenright" = 29;
"@MMK_R_KO_period" = -13;
"@MMK_R_KO_plus" = -43;
"@MMK_R_KO_quotedbl" = -13;
"@MMK_R_KO_quotedblleft" = -19;
"@MMK_R_KO_quotedblright" = -29;
"@MMK_R_KO_quoteleft" = -19;
"@MMK_R_KO_quoteright" = -29;
"@MMK_R_KO_quotesingle" = -13;
"@MMK_R_KO_semicolon" = 9;
"@MMK_R_KO_six" = 12;
"@MMK_R_KO_slash" = -2;
"@MMK_R_KO_three" = 17;
"@MMK_R_KO_two" = 17;
"@MMK_R_KO_u" = -10;
"@MMK_R_KO_underscore" = -144;
"@MMK_R_KO_zero" = 3;
};
"@MMK_L_KO_ellipsis" = {
"@MMK_R_KO_A" = -17;
"@MMK_R_KO_E" = -48;
"@MMK_R_KO_Eacute" = -48;
"@MMK_R_KO_H" = -48;
"@MMK_R_KO_J" = -20;
"@MMK_R_KO_O" = -69;
"@MMK_R_KO_S" = -43;
"@MMK_R_KO_T" = -147;
"@MMK_R_KO_U" = -67;
"@MMK_R_KO_V" = -143;
"@MMK_R_KO_W" = -95;
"@MMK_R_KO_X" = -38;
"@MMK_R_KO_Y" = -159;
"@MMK_R_KO_Yacute" = -159;
"@MMK_R_KO_Z" = -18;
"@MMK_R_KO_a" = -48;
"@MMK_R_KO_asterisk" = -240;
"@MMK_R_KO_braceright" = -64;
"@MMK_R_KO_bracketright" = -64;
"@MMK_R_KO_colon" = -22;
"@MMK_R_KO_comma" = -9;
"@MMK_R_KO_d" = -49;
"@MMK_R_KO_e" = -48;
"@MMK_R_KO_eight" = -42;
"@MMK_R_KO_ellipsis" = -38;
"@MMK_R_KO_endash" = -50;
"@MMK_R_KO_f" = -86;
"@MMK_R_KO_four" = -62;
"@MMK_R_KO_g" = -48;
"@MMK_R_KO_guillemotright" = -56;
"@MMK_R_KO_h" = -42;
"@MMK_R_KO_i" = -39;
"@MMK_R_KO_j" = -66;
"@MMK_R_KO_l" = -47;
"@MMK_R_KO_n" = -38;
"@MMK_R_KO_nine" = -45;
"@MMK_R_KO_o" = -49;
"@MMK_R_KO_one" = -144;
"@MMK_R_KO_p" = -42;
"@MMK_R_KO_parenright" = -43;
"@MMK_R_KO_period" = -11;
"@MMK_R_KO_q" = -47;
"@MMK_R_KO_question" = -77;
"@MMK_R_KO_quotedbl" = -231;
"@MMK_R_KO_quotedblleft" = -274;
"@MMK_R_KO_quotedblright" = -274;
"@MMK_R_KO_quoteleft" = -168;
"@MMK_R_KO_quoteright" = -168;
"@MMK_R_KO_quotesingle" = -132;
"@MMK_R_KO_s" = -22;
"@MMK_R_KO_semicolon" = -14;
"@MMK_R_KO_seven" = -88;
"@MMK_R_KO_six" = -58;
"@MMK_R_KO_slash" = -19;
"@MMK_R_KO_t" = -91;
"@MMK_R_KO_three" = -39;
"@MMK_R_KO_two" = -22;
"@MMK_R_KO_u" = -56;
"@MMK_R_KO_v" = -108;
"@MMK_R_KO_w" = -94;
"@MMK_R_KO_x" = -39;
"@MMK_R_KO_y" = -117;
"@MMK_R_KO_z" = -16;
};
"@MMK_L_KO_endash" = {
"@MMK_R_KO_A" = -30;
"@MMK_R_KO_J" = -13;
"@MMK_R_KO_O" = -4;
"@MMK_R_KO_T" = -101;
"@MMK_R_KO_U" = -11;
"@MMK_R_KO_V" = -56;
"@MMK_R_KO_W" = -27;
"@MMK_R_KO_X" = -67;
"@MMK_R_KO_Y" = -91;
"@MMK_R_KO_Yacute" = -87;
"@MMK_R_KO_Z" = -11;
"@MMK_R_KO_bracketright" = -57;
"@MMK_R_KO_colon" = -28;
"@MMK_R_KO_comma" = -33;
"@MMK_R_KO_dollar" = -4;
"@MMK_R_KO_endash" = -59;
"@MMK_R_KO_f" = -17;
"@MMK_R_KO_g" = -2;
"@MMK_R_KO_guillemotright" = -42;
"@MMK_R_KO_i" = -9;
"@MMK_R_KO_iacute" = -11;
"@MMK_R_KO_idotless" = -11;
"@MMK_R_KO_j" = -41;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_n" = -12;
"@MMK_R_KO_nine" = -4;
"@MMK_R_KO_one" = -19;
"@MMK_R_KO_p" = -8;
"@MMK_R_KO_parenright" = -32;
"@MMK_R_KO_period" = -38;
"@MMK_R_KO_question" = -83;
"@MMK_R_KO_quotedbl" = -58;
"@MMK_R_KO_quotedblleft" = -72;
"@MMK_R_KO_quotedblright" = -71;
"@MMK_R_KO_quoteleft" = -61;
"@MMK_R_KO_quoteright" = -71;
"@MMK_R_KO_quotesingle" = -58;
"@MMK_R_KO_semicolon" = -22;
"@MMK_R_KO_seven" = -98;
"@MMK_R_KO_slash" = -29;
"@MMK_R_KO_t" = -18;
"@MMK_R_KO_two" = -10;
"@MMK_R_KO_u" = -13;
"@MMK_R_KO_v" = -26;
"@MMK_R_KO_w" = -19;
"@MMK_R_KO_x" = -46;
"@MMK_R_KO_y" = -29;
"@MMK_R_KO_z" = -2;
"@MMK_R_KO_zero" = -2;
};
"@MMK_L_KO_f" = {
"@MMK_R_KO_A" = -73;
"@MMK_R_KO_J" = -77;
"@MMK_R_KO_T" = 20;
"@MMK_R_KO_V" = 28;
"@MMK_R_KO_W" = 31;
"@MMK_R_KO_Y" = 31;
"@MMK_R_KO_a" = -16;
"@MMK_R_KO_ampersand" = -64;
"@MMK_R_KO_asterisk" = -12;
"@MMK_R_KO_backslash" = 57;
"@MMK_R_KO_braceright" = 14;
"@MMK_R_KO_comma" = -54;
"@MMK_R_KO_d" = -17;
"@MMK_R_KO_e" = -19;
"@MMK_R_KO_ellipsis" = -102;
"@MMK_R_KO_endash" = -17;
"@MMK_R_KO_four" = -32;
"@MMK_R_KO_guillemotright" = -23;
"@MMK_R_KO_i" = 5;
"@MMK_R_KO_idotless" = -17;
"@MMK_R_KO_igrave" = 4;
"@MMK_R_KO_itilde" = 6;
"@MMK_R_KO_j" = -49;
"@MMK_R_KO_n" = -30;
"@MMK_R_KO_o" = -21;
"@MMK_R_KO_one" = -2;
"@MMK_R_KO_p" = -12;
"@MMK_R_KO_parenright" = 65;
"@MMK_R_KO_period" = -58;
"@MMK_R_KO_plus" = -80;
"@MMK_R_KO_q" = -19;
"@MMK_R_KO_quotedbl" = 20;
"@MMK_R_KO_quotedblleft" = -5;
"@MMK_R_KO_quoteleft" = -8;
"@MMK_R_KO_quotesingle" = 20;
"@MMK_R_KO_slash" = -68;
"@MMK_R_KO_u" = -13;
"@MMK_R_KO_underscore" = -146;
"@MMK_R_KO_v" = 2;
"@MMK_R_KO_w" = 2;
};
"@MMK_L_KO_five" = {
"@MMK_R_KO_J" = -10;
"@MMK_R_KO_O" = 13;
"@MMK_R_KO_S" = 12;
"@MMK_R_KO_T" = -4;
"@MMK_R_KO_U" = 4;
"@MMK_R_KO_W" = 10;
"@MMK_R_KO_X" = -10;
"@MMK_R_KO_Y" = -11;
"@MMK_R_KO_Yacute" = -11;
"@MMK_R_KO_Z" = 13;
"@MMK_R_KO_ampersand" = 4;
"@MMK_R_KO_asterisk" = -36;
"@MMK_R_KO_backslash" = 11;
"@MMK_R_KO_comma" = -3;
"@MMK_R_KO_eight" = 15;
"@MMK_R_KO_ellipsis" = -45;
"@MMK_R_KO_f" = -17;
"@MMK_R_KO_four" = 25;
"@MMK_R_KO_guillemotright" = -26;
"@MMK_R_KO_hyphen" = 17;
"@MMK_R_KO_idotless" = -11;
"@MMK_R_KO_j" = -62;
"@MMK_R_KO_n" = -5;
"@MMK_R_KO_one" = -15;
"@MMK_R_KO_p" = -11;
"@MMK_R_KO_parenright" = 39;
"@MMK_R_KO_period" = -15;
"@MMK_R_KO_plus" = -38;
"@MMK_R_KO_quotedbl" = -14;
"@MMK_R_KO_quotedblleft" = -28;
"@MMK_R_KO_quotedblright" = -25;
"@MMK_R_KO_quoteleft" = -31;
"@MMK_R_KO_quoteright" = -25;
"@MMK_R_KO_quotesingle" = -14;
"@MMK_R_KO_seven" = -5;
"@MMK_R_KO_six" = 21;
"@MMK_R_KO_slash" = -9;
"@MMK_R_KO_t" = -18;
"@MMK_R_KO_three" = 13;
"@MMK_R_KO_two" = 14;
"@MMK_R_KO_u" = -5;
"@MMK_R_KO_underscore" = -148;
"@MMK_R_KO_v" = -14;
"@MMK_R_KO_w" = -5;
"@MMK_R_KO_x" = -15;
"@MMK_R_KO_y" = -14;
"@MMK_R_KO_z" = -10;
"@MMK_R_KO_zero" = 16;
};
"@MMK_L_KO_four" = {
"@MMK_R_KO_T" = -78;
"@MMK_R_KO_V" = -55;
"@MMK_R_KO_W" = -20;
"@MMK_R_KO_X" = -33;
"@MMK_R_KO_Y" = -67;
"@MMK_R_KO_Yacute" = -67;
"@MMK_R_KO_asterisk" = -74;
"@MMK_R_KO_backslash" = -40;
"@MMK_R_KO_braceright" = -30;
"@MMK_R_KO_bracketright" = -30;
"@MMK_R_KO_eight" = 7;
"@MMK_R_KO_ellipsis" = -35;
"@MMK_R_KO_f" = -51;
"@MMK_R_KO_four" = 11;
"@MMK_R_KO_guillemotright" = -30;
"@MMK_R_KO_hyphen" = 27;
"@MMK_R_KO_j" = -56;
"@MMK_R_KO_l" = -9;
"@MMK_R_KO_one" = -47;
"@MMK_R_KO_parenright" = -4;
"@MMK_R_KO_plus" = -39;
"@MMK_R_KO_question" = -52;
"@MMK_R_KO_quotedbl" = -78;
"@MMK_R_KO_quotedblleft" = -87;
"@MMK_R_KO_quotedblright" = -97;
"@MMK_R_KO_quoteleft" = -80;
"@MMK_R_KO_quoteright" = -97;
"@MMK_R_KO_quotesingle" = -78;
"@MMK_R_KO_s" = 7;
"@MMK_R_KO_seven" = -64;
"@MMK_R_KO_six" = 7;
"@MMK_R_KO_slash" = -11;
"@MMK_R_KO_t" = -52;
"@MMK_R_KO_two" = 4;
"@MMK_R_KO_u" = -12;
"@MMK_R_KO_underscore" = -125;
"@MMK_R_KO_v" = -43;
"@MMK_R_KO_w" = -33;
"@MMK_R_KO_x" = -49;
"@MMK_R_KO_y" = -54;
};
"@MMK_L_KO_guillemotleft" = {
"@MMK_R_KO_A" = -22;
"@MMK_R_KO_E" = -21;
"@MMK_R_KO_Eacute" = -21;
"@MMK_R_KO_H" = -21;
"@MMK_R_KO_J" = -37;
"@MMK_R_KO_O" = -22;
"@MMK_R_KO_S" = -15;
"@MMK_R_KO_T" = -64;
"@MMK_R_KO_U" = -23;
"@MMK_R_KO_V" = -47;
"@MMK_R_KO_W" = -21;
"@MMK_R_KO_X" = -49;
"@MMK_R_KO_Y" = -70;
"@MMK_R_KO_Yacute" = -70;
"@MMK_R_KO_Z" = -14;
"@MMK_R_KO_a" = -32;
"@MMK_R_KO_aacute" = -33;
"@MMK_R_KO_ampersand" = -37;
"@MMK_R_KO_asterisk" = -83;
"@MMK_R_KO_backslash" = -29;
"@MMK_R_KO_braceright" = -46;
"@MMK_R_KO_bracketright" = -49;
"@MMK_R_KO_colon" = -11;
"@MMK_R_KO_comma" = -19;
"@MMK_R_KO_d" = -33;
"@MMK_R_KO_dollar" = -17;
"@MMK_R_KO_e" = -32;
"@MMK_R_KO_eight" = -19;
"@MMK_R_KO_ellipsis" = -56;
"@MMK_R_KO_endash" = -42;
"@MMK_R_KO_f" = -16;
"@MMK_R_KO_four" = -39;
"@MMK_R_KO_g" = -27;
"@MMK_R_KO_guillemotright" = -66;
"@MMK_R_KO_h" = -19;
"@MMK_R_KO_hyphen" = -28;
"@MMK_R_KO_i" = -17;
"@MMK_R_KO_iacute" = -19;
"@MMK_R_KO_idotless" = -19;
"@MMK_R_KO_j" = -54;
"@MMK_R_KO_l" = -19;
"@MMK_R_KO_n" = -22;
"@MMK_R_KO_nine" = -12;
"@MMK_R_KO_o" = -34;
"@MMK_R_KO_one" = -36;
"@MMK_R_KO_p" = -19;
"@MMK_R_KO_parenright" = -28;
"@MMK_R_KO_period" = -23;
"@MMK_R_KO_plus" = -96;
"@MMK_R_KO_q" = -32;
"@MMK_R_KO_question" = -53;
"@MMK_R_KO_quotedbl" = -66;
"@MMK_R_KO_quotedblleft" = -77;
"@MMK_R_KO_quotedblright" = -95;
"@MMK_R_KO_quoteleft" = -74;
"@MMK_R_KO_quoteright" = -95;
"@MMK_R_KO_quotesingle" = -66;
"@MMK_R_KO_s" = -13;
"@MMK_R_KO_semicolon" = -4;
"@MMK_R_KO_seven" = -62;
"@MMK_R_KO_six" = -15;
"@MMK_R_KO_slash" = -18;
"@MMK_R_KO_t" = -18;
"@MMK_R_KO_three" = -14;
"@MMK_R_KO_two" = -8;
"@MMK_R_KO_u" = -21;
"@MMK_R_KO_v" = -14;
"@MMK_R_KO_x" = -7;
"@MMK_R_KO_y" = -20;
"@MMK_R_KO_zero" = -19;
};
"@MMK_L_KO_h" = {
"@MMK_R_KO_A" = -2;
"@MMK_R_KO_E" = -16;
"@MMK_R_KO_Eacute" = -16;
"@MMK_R_KO_H" = -16;
"@MMK_R_KO_J" = -14;
"@MMK_R_KO_O" = -13;
"@MMK_R_KO_S" = -5;
"@MMK_R_KO_T" = -91;
"@MMK_R_KO_U" = -22;
"@MMK_R_KO_V" = -76;
"@MMK_R_KO_W" = -41;
"@MMK_R_KO_X" = -22;
"@MMK_R_KO_Y" = -98;
"@MMK_R_KO_Z" = -15;
"@MMK_R_KO_a" = -7;
"@MMK_R_KO_aacute" = -7;
"@MMK_R_KO_ampersand" = -13;
"@MMK_R_KO_asterisk" = -48;
"@MMK_R_KO_backslash" = -21;
"@MMK_R_KO_braceright" = -14;
"@MMK_R_KO_bracketright" = -16;
"@MMK_R_KO_d" = -7;
"@MMK_R_KO_e" = -6;
"@MMK_R_KO_eight" = -3;
"@MMK_R_KO_ellipsis" = -40;
"@MMK_R_KO_endash" = -14;
"@MMK_R_KO_f" = -13;
"@MMK_R_KO_four" = -8;
"@MMK_R_KO_g" = -8;
"@MMK_R_KO_guillemotright" = -23;
"@MMK_R_KO_h" = -9;
"@MMK_R_KO_i" = -2;
"@MMK_R_KO_iacute" = -9;
"@MMK_R_KO_idotless" = -9;
"@MMK_R_KO_igrave" = -9;
"@MMK_R_KO_itilde" = -9;
"@MMK_R_KO_j" = -58;
"@MMK_R_KO_l" = -19;
"@MMK_R_KO_n" = -12;
"@MMK_R_KO_nine" = -13;
"@MMK_R_KO_o" = -8;
"@MMK_R_KO_one" = -32;
"@MMK_R_KO_p" = -9;
"@MMK_R_KO_period" = -7;
"@MMK_R_KO_plus" = -49;
"@MMK_R_KO_q" = -7;
"@MMK_R_KO_question" = -48;
"@MMK_R_KO_quotedbl" = -45;
"@MMK_R_KO_quotedblleft" = -52;
"@MMK_R_KO_quotedblright" = -62;
"@MMK_R_KO_quoteleft" = -49;
"@MMK_R_KO_quoteright" = -62;
"@MMK_R_KO_semicolon" = 11;
"@MMK_R_KO_seven" = -79;
"@MMK_R_KO_t" = -13;
"@MMK_R_KO_three" = -16;
"@MMK_R_KO_u" = -20;
"@MMK_R_KO_underscore" = -91;
"@MMK_R_KO_v" = -20;
"@MMK_R_KO_w" = -16;
"@MMK_R_KO_x" = -14;
"@MMK_R_KO_y" = -22;
"@MMK_R_KO_z" = -3;
"@MMK_R_KO_zero" = -9;
};
"@MMK_L_KO_hyphen" = {
"@MMK_R_KO_O" = 11;
"@MMK_R_KO_S" = 20;
"@MMK_R_KO_T" = -60;
"@MMK_R_KO_V" = -13;
"@MMK_R_KO_X" = -42;
"@MMK_R_KO_Y" = -60;
"@MMK_R_KO_Yacute" = -60;
"@MMK_R_KO_Z" = 4;
"@MMK_R_KO_a" = 16;
"@MMK_R_KO_aacute" = 16;
"@MMK_R_KO_asterisk" = -38;
"@MMK_R_KO_braceright" = -37;
"@MMK_R_KO_bracketright" = -24;
"@MMK_R_KO_colon" = -12;
"@MMK_R_KO_d" = 16;
"@MMK_R_KO_dollar" = 11;
"@MMK_R_KO_e" = 16;
"@MMK_R_KO_eight" = 11;
"@MMK_R_KO_four" = 39;
"@MMK_R_KO_g" = 15;
"@MMK_R_KO_guillemotright" = -28;
"@MMK_R_KO_hyphen" = -59;
"@MMK_R_KO_nine" = 7;
"@MMK_R_KO_o" = 16;
"@MMK_R_KO_one" = -7;
"@MMK_R_KO_parenright" = -7;
"@MMK_R_KO_q" = 16;
"@MMK_R_KO_question" = -43;
"@MMK_R_KO_quotedbl" = -30;
"@MMK_R_KO_quotedblleft" = -51;
"@MMK_R_KO_quotedblright" = -40;
"@MMK_R_KO_quoteleft" = -42;
"@MMK_R_KO_quoteright" = -40;
"@MMK_R_KO_quotesingle" = -30;
"@MMK_R_KO_s" = 28;
"@MMK_R_KO_semicolon" = -9;
"@MMK_R_KO_seven" = -58;
"@MMK_R_KO_six" = 18;
"@MMK_R_KO_three" = 26;
"@MMK_R_KO_two" = 5;
"@MMK_R_KO_x" = -5;
"@MMK_R_KO_z" = 2;
"@MMK_R_KO_zero" = 14;
};
"@MMK_L_KO_i" = {
"@MMK_R_KO_E" = 3;
"@MMK_R_KO_Eacute" = 3;
"@MMK_R_KO_H" = 2;
"@MMK_R_KO_J" = -12;
"@MMK_R_KO_O" = -2;
"@MMK_R_KO_W" = 3;
"@MMK_R_KO_X" = -10;
"@MMK_R_KO_a" = -2;
"@MMK_R_KO_aacute" = -4;
"@MMK_R_KO_ampersand" = -3;
"@MMK_R_KO_asterisk" = -23;
"@MMK_R_KO_backslash" = 18;
"@MMK_R_KO_colon" = 14;
"@MMK_R_KO_comma" = 115;
"@MMK_R_KO_d" = -4;
"@MMK_R_KO_dollar" = -2;
"@MMK_R_KO_e" = -5;
"@MMK_R_KO_eight" = -2;
"@MMK_R_KO_ellipsis" = -39;
"@MMK_R_KO_endash" = -9;
"@MMK_R_KO_four" = -5;
"@MMK_R_KO_g" = -5;
"@MMK_R_KO_guillemotright" = -17;
"@MMK_R_KO_i" = 4;
"@MMK_R_KO_igrave" = 2;
"@MMK_R_KO_itilde" = 3;
"@MMK_R_KO_j" = -33;
"@MMK_R_KO_n" = -8;
"@MMK_R_KO_o" = -6;
"@MMK_R_KO_one" = -15;
"@MMK_R_KO_parenright" = 63;
"@MMK_R_KO_period" = -6;
"@MMK_R_KO_plus" = -43;
"@MMK_R_KO_q" = -4;
"@MMK_R_KO_quotedbl" = -8;
"@MMK_R_KO_quotedblleft" = -23;
"@MMK_R_KO_quotedblright" = -19;
"@MMK_R_KO_quoteleft" = -23;
"@MMK_R_KO_quoteright" = -19;
"@MMK_R_KO_quotesingle" = -8;
"@MMK_R_KO_semicolon" = 24;
"@MMK_R_KO_seven" = -3;
"@MMK_R_KO_t" = -5;
"@MMK_R_KO_three" = -2;
"@MMK_R_KO_u" = -6;
"@MMK_R_KO_underscore" = -56;
};
"@MMK_L_KO_iacute" = {
"@MMK_R_KO_E" = 22;
"@MMK_R_KO_Eacute" = 25;
"@MMK_R_KO_H" = 7;
"@MMK_R_KO_J" = -8;
"@MMK_R_KO_T" = 43;
"@MMK_R_KO_Y" = 47;
"@MMK_R_KO_asterisk" = -19;
"@MMK_R_KO_bracketright" = 15;
"@MMK_R_KO_colon" = 18;
"@MMK_R_KO_e" = -2;
"@MMK_R_KO_ellipsis" = -36;
"@MMK_R_KO_guillemotright" = -14;
"@MMK_R_KO_h" = 5;
"@MMK_R_KO_i" = 8;
"@MMK_R_KO_iacute" = 3;
"@MMK_R_KO_igrave" = 32;
"@MMK_R_KO_itilde" = 42;
"@MMK_R_KO_j" = -30;
"@MMK_R_KO_n" = -2;
"@MMK_R_KO_o" = -3;
"@MMK_R_KO_one" = -13;
"@MMK_R_KO_parenright" = 86;
"@MMK_R_KO_quotedbl" = 27;
"@MMK_R_KO_quotedblleft" = -8;
"@MMK_R_KO_quotedblright" = 3;
"@MMK_R_KO_quoteleft" = -15;
"@MMK_R_KO_quoteright" = 3;
"@MMK_R_KO_quotesingle" = 27;
"@MMK_R_KO_s" = 2;
"@MMK_R_KO_semicolon" = 27;
"@MMK_R_KO_slash" = 5;
"@MMK_R_KO_u" = -2;
"@MMK_R_KO_w" = 3;
"@MMK_R_KO_z" = 5;
};
"@MMK_L_KO_idotless" = {
"@MMK_R_KO_J" = -11;
"@MMK_R_KO_T" = -55;
"@MMK_R_KO_W" = -5;
"@MMK_R_KO_Y" = -53;
"@MMK_R_KO_asterisk" = -21;
"@MMK_R_KO_bracketright" = -8;
"@MMK_R_KO_colon" = 18;
"@MMK_R_KO_e" = -2;
"@MMK_R_KO_ellipsis" = -36;
"@MMK_R_KO_f" = -2;
"@MMK_R_KO_four" = -2;
"@MMK_R_KO_guillemotright" = -15;
"@MMK_R_KO_i" = 4;
"@MMK_R_KO_j" = -50;
"@MMK_R_KO_n" = -2;
"@MMK_R_KO_o" = -3;
"@MMK_R_KO_one" = -14;
"@MMK_R_KO_parenright" = 10;
"@MMK_R_KO_question" = -3;
"@MMK_R_KO_quotedbl" = -30;
"@MMK_R_KO_quotedblleft" = -37;
"@MMK_R_KO_quotedblright" = -48;
"@MMK_R_KO_quoteleft" = -35;
"@MMK_R_KO_quoteright" = -48;
"@MMK_R_KO_quotesingle" = -30;
"@MMK_R_KO_s" = 2;
"@MMK_R_KO_semicolon" = 27;
"@MMK_R_KO_seven" = -33;
"@MMK_R_KO_slash" = 2;
"@MMK_R_KO_t" = -5;
"@MMK_R_KO_u" = -3;
"@MMK_R_KO_underscore" = -89;
"@MMK_R_KO_w" = 3;
"@MMK_R_KO_z" = 5;
};
"@MMK_L_KO_igrave" = {
"@MMK_R_KO_H" = 10;
"@MMK_R_KO_colon" = 19;
"@MMK_R_KO_e" = -2;
"@MMK_R_KO_ellipsis" = -36;
"@MMK_R_KO_guillemotright" = -14;
"@MMK_R_KO_h" = 6;
"@MMK_R_KO_i" = 9;
"@MMK_R_KO_igrave" = 3;
"@MMK_R_KO_itilde" = 44;
"@MMK_R_KO_j" = -50;
"@MMK_R_KO_n" = -2;
"@MMK_R_KO_o" = -3;
"@MMK_R_KO_parenright" = 24;
"@MMK_R_KO_quotedbl" = -15;
"@MMK_R_KO_quotedblleft" = -21;
"@MMK_R_KO_quotedblright" = -25;
"@MMK_R_KO_quoteleft" = -21;
"@MMK_R_KO_quotesingle" = -15;
"@MMK_R_KO_s" = 2;
"@MMK_R_KO_semicolon" = 27;
"@MMK_R_KO_slash" = 5;
"@MMK_R_KO_u" = -2;
"@MMK_R_KO_w" = 3;
"@MMK_R_KO_z" = 5;
};
"@MMK_L_KO_k" = {
"@MMK_R_KO_A" = 9;
"@MMK_R_KO_O" = -15;
"@MMK_R_KO_S" = -2;
"@MMK_R_KO_T" = -53;
"@MMK_R_KO_U" = -14;
"@MMK_R_KO_V" = -32;
"@MMK_R_KO_W" = -6;
"@MMK_R_KO_X" = -11;
"@MMK_R_KO_Y" = -45;
"@MMK_R_KO_a" = -31;
"@MMK_R_KO_aacute" = -32;
"@MMK_R_KO_ampersand" = -27;
"@MMK_R_KO_asterisk" = -45;
"@MMK_R_KO_backslash" = -4;
"@MMK_R_KO_colon" = 14;
"@MMK_R_KO_d" = -32;
"@MMK_R_KO_dollar" = -5;
"@MMK_R_KO_e" = -31;
"@MMK_R_KO_eight" = -10;
"@MMK_R_KO_ellipsis" = -21;
"@MMK_R_KO_endash" = -45;
"@MMK_R_KO_four" = -38;
"@MMK_R_KO_g" = -2;
"@MMK_R_KO_guillemotright" = -8;
"@MMK_R_KO_j" = -34;
"@MMK_R_KO_l" = -3;
"@MMK_R_KO_o" = -33;
"@MMK_R_KO_one" = -14;
"@MMK_R_KO_parenright" = 16;
"@MMK_R_KO_plus" = -89;
"@MMK_R_KO_q" = -30;
"@MMK_R_KO_quotedbl" = -31;
"@MMK_R_KO_quotedblleft" = -37;
"@MMK_R_KO_quotedblright" = -56;
"@MMK_R_KO_quoteleft" = -38;
"@MMK_R_KO_quoteright" = -56;
"@MMK_R_KO_quotesingle" = -31;
"@MMK_R_KO_s" = -13;
"@MMK_R_KO_semicolon" = 25;
"@MMK_R_KO_seven" = -35;
"@MMK_R_KO_slash" = 11;
"@MMK_R_KO_two" = 4;
"@MMK_R_KO_underscore" = -77;
"@MMK_R_KO_z" = 4;
"@MMK_R_KO_zero" = -7;
};
"@MMK_L_KO_l" = {
"@MMK_R_KO_A" = -6;
"@MMK_R_KO_E" = -32;
"@MMK_R_KO_Eacute" = -32;
"@MMK_R_KO_H" = -32;
"@MMK_R_KO_J" = -20;
"@MMK_R_KO_O" = -58;
"@MMK_R_KO_S" = -23;
"@MMK_R_KO_T" = -50;
"@MMK_R_KO_U" = -52;
"@MMK_R_KO_V" = -57;
"@MMK_R_KO_W" = -49;
"@MMK_R_KO_X" = -25;
"@MMK_R_KO_Y" = -43;
"@MMK_R_KO_Z" = -18;
"@MMK_R_KO_a" = -25;
"@MMK_R_KO_aacute" = -26;
"@MMK_R_KO_ampersand" = -24;
"@MMK_R_KO_asterisk" = -74;
"@MMK_R_KO_backslash" = -20;
"@MMK_R_KO_braceright" = -17;
"@MMK_R_KO_bracketright" = -23;
"@MMK_R_KO_colon" = -4;
"@MMK_R_KO_comma" = -9;
"@MMK_R_KO_d" = -28;
"@MMK_R_KO_dollar" = -23;
"@MMK_R_KO_e" = -25;
"@MMK_R_KO_eight" = -21;
"@MMK_R_KO_ellipsis" = -42;
"@MMK_R_KO_endash" = -37;
"@MMK_R_KO_f" = -63;
"@MMK_R_KO_four" = -34;
"@MMK_R_KO_g" = -27;
"@MMK_R_KO_guillemotright" = -33;
"@MMK_R_KO_h" = -27;
"@MMK_R_KO_i" = -25;
"@MMK_R_KO_iacute" = -27;
"@MMK_R_KO_idotless" = -27;
"@MMK_R_KO_igrave" = -23;
"@MMK_R_KO_itilde" = -15;
"@MMK_R_KO_j" = -70;
"@MMK_R_KO_l" = -27;
"@MMK_R_KO_n" = -25;
"@MMK_R_KO_nine" = -24;
"@MMK_R_KO_o" = -29;
"@MMK_R_KO_one" = -63;
"@MMK_R_KO_p" = -27;
"@MMK_R_KO_period" = -12;
"@MMK_R_KO_plus" = -89;
"@MMK_R_KO_q" = -28;
"@MMK_R_KO_question" = -40;
"@MMK_R_KO_quotedbl" = -58;
"@MMK_R_KO_quotedblleft" = -73;
"@MMK_R_KO_quotedblright" = -75;
"@MMK_R_KO_quoteleft" = -73;
"@MMK_R_KO_quoteright" = -75;
"@MMK_R_KO_quotesingle" = -58;
"@MMK_R_KO_s" = -11;
"@MMK_R_KO_seven" = -56;
"@MMK_R_KO_six" = -43;
"@MMK_R_KO_slash" = -4;
"@MMK_R_KO_t" = -63;
"@MMK_R_KO_three" = -28;
"@MMK_R_KO_two" = -2;
"@MMK_R_KO_u" = -36;
"@MMK_R_KO_underscore" = -93;
"@MMK_R_KO_v" = -48;
"@MMK_R_KO_w" = -44;
"@MMK_R_KO_x" = -22;
"@MMK_R_KO_y" = -50;
"@MMK_R_KO_z" = -12;
"@MMK_R_KO_zero" = -52;
};
"@MMK_L_KO_n" = {
"@MMK_R_KO_E" = -16;
"@MMK_R_KO_Eacute" = -16;
"@MMK_R_KO_H" = -16;
"@MMK_R_KO_J" = -12;
"@MMK_R_KO_O" = -11;
"@MMK_R_KO_S" = -9;
"@MMK_R_KO_T" = -100;
"@MMK_R_KO_U" = -21;
"@MMK_R_KO_V" = -78;
"@MMK_R_KO_W" = -44;
"@MMK_R_KO_X" = -20;
"@MMK_R_KO_Y" = -103;
"@MMK_R_KO_Z" = -14;
"@MMK_R_KO_a" = -4;
"@MMK_R_KO_aacute" = -5;
"@MMK_R_KO_ampersand" = -11;
"@MMK_R_KO_asterisk" = -52;
"@MMK_R_KO_backslash" = -22;
"@MMK_R_KO_braceright" = -13;
"@MMK_R_KO_bracketright" = -14;
"@MMK_R_KO_d" = -5;
"@MMK_R_KO_dollar" = -10;
"@MMK_R_KO_e" = -4;
"@MMK_R_KO_eight" = -7;
"@MMK_R_KO_ellipsis" = -38;
"@MMK_R_KO_endash" = -13;
"@MMK_R_KO_f" = -18;
"@MMK_R_KO_four" = -6;
"@MMK_R_KO_g" = -6;
"@MMK_R_KO_guillemotright" = -22;
"@MMK_R_KO_h" = -13;
"@MMK_R_KO_i" = -8;
"@MMK_R_KO_iacute" = -14;
"@MMK_R_KO_idotless" = -14;
"@MMK_R_KO_igrave" = -14;
"@MMK_R_KO_itilde" = -13;
"@MMK_R_KO_j" = -56;
"@MMK_R_KO_l" = -19;
"@MMK_R_KO_n" = -11;
"@MMK_R_KO_nine" = -11;
"@MMK_R_KO_o" = -5;
"@MMK_R_KO_one" = -36;
"@MMK_R_KO_p" = -14;
"@MMK_R_KO_period" = -4;
"@MMK_R_KO_plus" = -47;
"@MMK_R_KO_q" = -5;
"@MMK_R_KO_question" = -50;
"@MMK_R_KO_quotedbl" = -50;
"@MMK_R_KO_quotedblleft" = -60;
"@MMK_R_KO_quotedblright" = -67;
"@MMK_R_KO_quoteleft" = -56;
"@MMK_R_KO_quoteright" = -67;
"@MMK_R_KO_quotesingle" = -51;
"@MMK_R_KO_semicolon" = 7;
"@MMK_R_KO_seven" = -80;
"@MMK_R_KO_six" = -3;
"@MMK_R_KO_t" = -20;
"@MMK_R_KO_three" = -15;
"@MMK_R_KO_two" = -2;
"@MMK_R_KO_u" = -18;
"@MMK_R_KO_underscore" = -90;
"@MMK_R_KO_v" = -24;
"@MMK_R_KO_w" = -21;
"@MMK_R_KO_x" = -13;
"@MMK_R_KO_y" = -26;
"@MMK_R_KO_z" = -4;
"@MMK_R_KO_zero" = -8;
};
"@MMK_L_KO_nine" = {
"@MMK_R_KO_A" = -11;
"@MMK_R_KO_E" = 4;
"@MMK_R_KO_H" = 4;
"@MMK_R_KO_J" = -24;
"@MMK_R_KO_O" = 21;
"@MMK_R_KO_S" = 16;
"@MMK_R_KO_T" = -12;
"@MMK_R_KO_U" = 14;
"@MMK_R_KO_V" = -7;
"@MMK_R_KO_X" = -36;
"@MMK_R_KO_Y" = -14;
"@MMK_R_KO_Yacute" = -14;
"@MMK_R_KO_ampersand" = 3;
"@MMK_R_KO_asterisk" = -17;
"@MMK_R_KO_braceright" = -6;
"@MMK_R_KO_bracketright" = -9;
"@MMK_R_KO_comma" = -16;
"@MMK_R_KO_dollar" = 9;
"@MMK_R_KO_eight" = 10;
"@MMK_R_KO_ellipsis" = -59;
"@MMK_R_KO_four" = 29;
"@MMK_R_KO_guillemotright" = -15;
"@MMK_R_KO_hyphen" = 18;
"@MMK_R_KO_j" = -56;
"@MMK_R_KO_n" = -9;
"@MMK_R_KO_nine" = 20;
"@MMK_R_KO_one" = 3;
"@MMK_R_KO_parenright" = 22;
"@MMK_R_KO_period" = -28;
"@MMK_R_KO_plus" = -35;
"@MMK_R_KO_quotedbl" = -9;
"@MMK_R_KO_quotedblleft" = -18;
"@MMK_R_KO_quotedblright" = -19;
"@MMK_R_KO_quoteleft" = -17;
"@MMK_R_KO_quoteright" = -19;
"@MMK_R_KO_quotesingle" = -9;
"@MMK_R_KO_s" = 12;
"@MMK_R_KO_semicolon" = 12;
"@MMK_R_KO_seven" = -18;
"@MMK_R_KO_six" = 29;
"@MMK_R_KO_slash" = -23;
"@MMK_R_KO_three" = 9;
"@MMK_R_KO_two" = 15;
"@MMK_R_KO_underscore" = -161;
"@MMK_R_KO_z" = 2;
"@MMK_R_KO_zero" = 24;
};
"@MMK_L_KO_numbersign" = {
"@MMK_R_KO_A" = -81;
"@MMK_R_KO_E" = -24;
"@MMK_R_KO_H" = -24;
"@MMK_R_KO_J" = -80;
"@MMK_R_KO_O" = -14;
"@MMK_R_KO_S" = -16;
"@MMK_R_KO_T" = -21;
"@MMK_R_KO_U" = -18;
"@MMK_R_KO_V" = -24;
"@MMK_R_KO_W" = -16;
"@MMK_R_KO_X" = -52;
"@MMK_R_KO_Y" = -20;
"@MMK_R_KO_Z" = -35;
"@MMK_R_KO_a" = -25;
"@MMK_R_KO_asterisk" = -22;
"@MMK_R_KO_bracketright" = -23;
"@MMK_R_KO_comma" = -58;
"@MMK_R_KO_d" = -26;
"@MMK_R_KO_e" = -27;
"@MMK_R_KO_eight" = -21;
"@MMK_R_KO_f" = -9;
"@MMK_R_KO_four" = -38;
"@MMK_R_KO_g" = -23;
"@MMK_R_KO_guillemotright" = -34;
"@MMK_R_KO_h" = -20;
"@MMK_R_KO_i" = -16;
"@MMK_R_KO_j" = -70;
"@MMK_R_KO_l" = -20;
"@MMK_R_KO_n" = -33;
"@MMK_R_KO_nine" = -13;
"@MMK_R_KO_o" = -29;
"@MMK_R_KO_one" = -11;
"@MMK_R_KO_p" = -24;
"@MMK_R_KO_parenright" = 13;
"@MMK_R_KO_period" = -60;
"@MMK_R_KO_q" = -28;
"@MMK_R_KO_quotedbl" = -11;
"@MMK_R_KO_quotedblleft" = -16;
"@MMK_R_KO_quotedblright" = -21;
"@MMK_R_KO_quoteleft" = -16;
"@MMK_R_KO_quoteright" = -21;
"@MMK_R_KO_quotesingle" = -11;
"@MMK_R_KO_s" = -5;
"@MMK_R_KO_seven" = -27;
"@MMK_R_KO_six" = -2;
"@MMK_R_KO_slash" = -76;
"@MMK_R_KO_t" = -9;
"@MMK_R_KO_three" = -13;
"@MMK_R_KO_two" = -13;
"@MMK_R_KO_u" = -21;
"@MMK_R_KO_v" = -3;
"@MMK_R_KO_w" = -2;
"@MMK_R_KO_x" = -12;
"@MMK_R_KO_y" = -3;
"@MMK_R_KO_z" = -4;
"@MMK_R_KO_zero" = -9;
};
"@MMK_L_KO_o" = {
"@MMK_R_KO_A" = -23;
"@MMK_R_KO_E" = -14;
"@MMK_R_KO_H" = -14;
"@MMK_R_KO_J" = -21;
"@MMK_R_KO_S" = -4;
"@MMK_R_KO_T" = -97;
"@MMK_R_KO_U" = -7;
"@MMK_R_KO_V" = -74;
"@MMK_R_KO_W" = -31;
"@MMK_R_KO_X" = -67;
"@MMK_R_KO_Y" = -104;
"@MMK_R_KO_Z" = -17;
"@MMK_R_KO_a" = 5;
"@MMK_R_KO_aacute" = 5;
"@MMK_R_KO_ampersand" = -7;
"@MMK_R_KO_asterisk" = -44;
"@MMK_R_KO_backslash" = -22;
"@MMK_R_KO_braceright" = -32;
"@MMK_R_KO_bracketright" = -32;
"@MMK_R_KO_comma" = -5;
"@MMK_R_KO_d" = 5;
"@MMK_R_KO_dollar" = -6;
"@MMK_R_KO_e" = 5;
"@MMK_R_KO_ellipsis" = -49;
"@MMK_R_KO_f" = -20;
"@MMK_R_KO_g" = 2;
"@MMK_R_KO_guillemotright" = -34;
"@MMK_R_KO_h" = -10;
"@MMK_R_KO_hyphen" = 16;
"@MMK_R_KO_i" = -6;
"@MMK_R_KO_iacute" = -10;
"@MMK_R_KO_idotless" = -10;
"@MMK_R_KO_igrave" = -10;
"@MMK_R_KO_itilde" = -10;
"@MMK_R_KO_j" = -60;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_n" = -5;
"@MMK_R_KO_nine" = -12;
"@MMK_R_KO_o" = 4;
"@MMK_R_KO_one" = -34;
"@MMK_R_KO_p" = -10;
"@MMK_R_KO_parenright" = -16;
"@MMK_R_KO_period" = -19;
"@MMK_R_KO_plus" = -34;
"@MMK_R_KO_q" = 5;
"@MMK_R_KO_question" = -51;
"@MMK_R_KO_quotedbl" = -52;
"@MMK_R_KO_quotedblleft" = -60;
"@MMK_R_KO_quotedblright" = -67;
"@MMK_R_KO_quoteleft" = -55;
"@MMK_R_KO_quoteright" = -67;
"@MMK_R_KO_quotesingle" = -52;
"@MMK_R_KO_s" = 8;
"@MMK_R_KO_seven" = -90;
"@MMK_R_KO_slash" = -19;
"@MMK_R_KO_t" = -20;
"@MMK_R_KO_two" = -10;
"@MMK_R_KO_u" = -6;
"@MMK_R_KO_underscore" = -153;
"@MMK_R_KO_v" = -21;
"@MMK_R_KO_w" = -15;
"@MMK_R_KO_y" = -25;
"@MMK_R_KO_z" = -8;
};
"@MMK_L_KO_oacute" = {
"@MMK_R_KO_E" = -7;
"@MMK_R_KO_Eacute" = -10;
"@MMK_R_KO_H" = -11;
"@MMK_R_KO_T" = -97;
"@MMK_R_KO_Y" = -55;
"@MMK_R_KO_a" = 5;
"@MMK_R_KO_aacute" = 5;
"@MMK_R_KO_asterisk" = -44;
"@MMK_R_KO_bracketright" = -26;
"@MMK_R_KO_comma" = -5;
"@MMK_R_KO_d" = 5;
"@MMK_R_KO_e" = 5;
"@MMK_R_KO_ellipsis" = -49;
"@MMK_R_KO_f" = -16;
"@MMK_R_KO_g" = 2;
"@MMK_R_KO_guillemotright" = -34;
"@MMK_R_KO_h" = -10;
"@MMK_R_KO_hyphen" = 16;
"@MMK_R_KO_i" = -6;
"@MMK_R_KO_iacute" = -10;
"@MMK_R_KO_igrave" = -10;
"@MMK_R_KO_itilde" = -10;
"@MMK_R_KO_j" = -60;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_n" = -6;
"@MMK_R_KO_o" = 4;
"@MMK_R_KO_one" = -34;
"@MMK_R_KO_p" = -10;
"@MMK_R_KO_period" = -19;
"@MMK_R_KO_q" = 5;
"@MMK_R_KO_question" = -51;
"@MMK_R_KO_quotedbl" = -29;
"@MMK_R_KO_quotedblleft" = -52;
"@MMK_R_KO_quotedblright" = -61;
"@MMK_R_KO_quoteleft" = -47;
"@MMK_R_KO_quoteright" = -61;
"@MMK_R_KO_quotesingle" = -29;
"@MMK_R_KO_s" = 8;
"@MMK_R_KO_seven" = -77;
"@MMK_R_KO_slash" = -16;
"@MMK_R_KO_t" = -16;
"@MMK_R_KO_u" = -6;
"@MMK_R_KO_underscore" = -153;
"@MMK_R_KO_v" = -21;
"@MMK_R_KO_w" = -15;
"@MMK_R_KO_x" = -45;
"@MMK_R_KO_y" = -25;
"@MMK_R_KO_z" = -8;
};
"@MMK_L_KO_ocircumflex" = {
"@MMK_R_KO_E" = -7;
"@MMK_R_KO_T" = -72;
"@MMK_R_KO_W" = -31;
"@MMK_R_KO_a" = 5;
"@MMK_R_KO_aacute" = 5;
"@MMK_R_KO_bracketright" = -29;
"@MMK_R_KO_comma" = -5;
"@MMK_R_KO_d" = 5;
"@MMK_R_KO_e" = 5;
"@MMK_R_KO_ellipsis" = -49;
"@MMK_R_KO_f" = -15;
"@MMK_R_KO_g" = 2;
"@MMK_R_KO_guillemotright" = -34;
"@MMK_R_KO_h" = -7;
"@MMK_R_KO_hyphen" = 16;
"@MMK_R_KO_i" = -6;
"@MMK_R_KO_iacute" = -10;
"@MMK_R_KO_j" = -60;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_n" = -5;
"@MMK_R_KO_o" = 4;
"@MMK_R_KO_one" = -34;
"@MMK_R_KO_p" = -10;
"@MMK_R_KO_parenright" = -9;
"@MMK_R_KO_period" = -19;
"@MMK_R_KO_q" = 5;
"@MMK_R_KO_question" = -49;
"@MMK_R_KO_quotedbl" = -29;
"@MMK_R_KO_quotedblleft" = -49;
"@MMK_R_KO_quotedblright" = -57;
"@MMK_R_KO_quoteleft" = -42;
"@MMK_R_KO_quoteright" = -57;
"@MMK_R_KO_quotesingle" = -29;
"@MMK_R_KO_s" = 8;
"@MMK_R_KO_slash" = -16;
"@MMK_R_KO_t" = -16;
"@MMK_R_KO_u" = -6;
"@MMK_R_KO_v" = -21;
"@MMK_R_KO_w" = -15;
"@MMK_R_KO_x" = -45;
"@MMK_R_KO_y" = -25;
"@MMK_R_KO_z" = -8;
};
"@MMK_L_KO_parenleft" = {
"@MMK_R_KO_E" = 46;
"@MMK_R_KO_Eacute" = 61;
"@MMK_R_KO_H" = 28;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_S" = 29;
"@MMK_R_KO_T" = 13;
"@MMK_R_KO_U" = 46;
"@MMK_R_KO_V" = 39;
"@MMK_R_KO_W" = 59;
"@MMK_R_KO_X" = 35;
"@MMK_R_KO_Y" = 22;
"@MMK_R_KO_Yacute" = 23;
"@MMK_R_KO_Z" = 56;
"@MMK_R_KO_a" = -15;
"@MMK_R_KO_aacute" = -15;
"@MMK_R_KO_ampersand" = -7;
"@MMK_R_KO_asterisk" = -18;
"@MMK_R_KO_backslash" = 46;
"@MMK_R_KO_comma" = 78;
"@MMK_R_KO_d" = -15;
"@MMK_R_KO_dollar" = 20;
"@MMK_R_KO_e" = -15;
"@MMK_R_KO_eight" = 27;
"@MMK_R_KO_ellipsis" = -43;
"@MMK_R_KO_endash" = -32;
"@MMK_R_KO_four" = -6;
"@MMK_R_KO_g" = 23;
"@MMK_R_KO_guillemotright" = -28;
"@MMK_R_KO_h" = 44;
"@MMK_R_KO_hyphen" = -7;
"@MMK_R_KO_i" = 64;
"@MMK_R_KO_iacute" = 18;
"@MMK_R_KO_j" = 44;
"@MMK_R_KO_l" = 39;
"@MMK_R_KO_nine" = 31;
"@MMK_R_KO_o" = -16;
"@MMK_R_KO_p" = 60;
"@MMK_R_KO_parenright" = 82;
"@MMK_R_KO_period" = -23;
"@MMK_R_KO_plus" = -68;
"@MMK_R_KO_q" = -14;
"@MMK_R_KO_quotedbl" = 42;
"@MMK_R_KO_quotesingle" = 42;
"@MMK_R_KO_s" = 11;
"@MMK_R_KO_semicolon" = 47;
"@MMK_R_KO_seven" = 26;
"@MMK_R_KO_six" = 21;
"@MMK_R_KO_slash" = 11;
"@MMK_R_KO_three" = 32;
"@MMK_R_KO_two" = 40;
"@MMK_R_KO_u" = -2;
"@MMK_R_KO_zero" = 15;
};
"@MMK_L_KO_period" = {
"@MMK_R_KO_A" = 5;
"@MMK_R_KO_E" = -13;
"@MMK_R_KO_H" = -13;
"@MMK_R_KO_J" = 7;
"@MMK_R_KO_O" = -38;
"@MMK_R_KO_S" = -14;
"@MMK_R_KO_T" = -89;
"@MMK_R_KO_U" = -36;
"@MMK_R_KO_V" = -86;
"@MMK_R_KO_W" = -54;
"@MMK_R_KO_X" = -5;
"@MMK_R_KO_Y" = -102;
"@MMK_R_KO_Z" = 5;
"@MMK_R_KO_a" = -18;
"@MMK_R_KO_asterisk" = -136;
"@MMK_R_KO_braceright" = -35;
"@MMK_R_KO_bracketright" = -35;
"@MMK_R_KO_d" = -19;
"@MMK_R_KO_e" = -18;
"@MMK_R_KO_eight" = -14;
"@MMK_R_KO_endash" = -38;
"@MMK_R_KO_f" = -47;
"@MMK_R_KO_four" = -15;
"@MMK_R_KO_g" = -8;
"@MMK_R_KO_guillemotright" = -23;
"@MMK_R_KO_h" = -10;
"@MMK_R_KO_i" = -6;
"@MMK_R_KO_j" = -19;
"@MMK_R_KO_l" = -18;
"@MMK_R_KO_n" = -3;
"@MMK_R_KO_nine" = -15;
"@MMK_R_KO_o" = -19;
"@MMK_R_KO_one" = -87;
"@MMK_R_KO_p" = 10;
"@MMK_R_KO_parenright" = -22;
"@MMK_R_KO_period" = 5;
"@MMK_R_KO_q" = -17;
"@MMK_R_KO_question" = -65;
"@MMK_R_KO_quotedbl" = -136;
"@MMK_R_KO_quotedblleft" = -136;
"@MMK_R_KO_quotedblright" = -136;
"@MMK_R_KO_quoteleft" = -136;
"@MMK_R_KO_quoteright" = -136;
"@MMK_R_KO_quotesingle" = -132;
"@MMK_R_KO_semicolon" = 6;
"@MMK_R_KO_seven" = -57;
"@MMK_R_KO_six" = -27;
"@MMK_R_KO_slash" = 12;
"@MMK_R_KO_t" = -53;
"@MMK_R_KO_three" = -11;
"@MMK_R_KO_two" = 2;
"@MMK_R_KO_u" = -24;
"@MMK_R_KO_v" = -63;
"@MMK_R_KO_w" = -48;
"@MMK_R_KO_x" = -9;
"@MMK_R_KO_y" = -61;
"@MMK_R_KO_z" = 18;
"@MMK_R_KO_zero" = -34;
};
"@MMK_L_KO_plus" = {
"@MMK_R_KO_A" = -72;
"@MMK_R_KO_E" = -51;
"@MMK_R_KO_H" = -51;
"@MMK_R_KO_J" = -105;
"@MMK_R_KO_O" = -43;
"@MMK_R_KO_S" = -54;
"@MMK_R_KO_T" = -152;
"@MMK_R_KO_U" = -46;
"@MMK_R_KO_V" = -99;
"@MMK_R_KO_W" = -71;
"@MMK_R_KO_X" = -115;
"@MMK_R_KO_Y" = -138;
"@MMK_R_KO_Z" = -62;
"@MMK_R_KO_a" = -34;
"@MMK_R_KO_asterisk" = -91;
"@MMK_R_KO_braceright" = -82;
"@MMK_R_KO_bracketright" = -79;
"@MMK_R_KO_colon" = -69;
"@MMK_R_KO_comma" = -61;
"@MMK_R_KO_d" = -34;
"@MMK_R_KO_dollar" = -54;
"@MMK_R_KO_e" = -34;
"@MMK_R_KO_eight" = -44;
"@MMK_R_KO_f" = -74;
"@MMK_R_KO_four" = -23;
"@MMK_R_KO_g" = -34;
"@MMK_R_KO_guillemotright" = -96;
"@MMK_R_KO_h" = -45;
"@MMK_R_KO_i" = -43;
"@MMK_R_KO_j" = -89;
"@MMK_R_KO_l" = -46;
"@MMK_R_KO_n" = -47;
"@MMK_R_KO_nine" = -54;
"@MMK_R_KO_o" = -34;
"@MMK_R_KO_one" = -108;
"@MMK_R_KO_p" = -46;
"@MMK_R_KO_parenright" = -68;
"@MMK_R_KO_period" = -64;
"@MMK_R_KO_plus" = -59;
"@MMK_R_KO_q" = -34;
"@MMK_R_KO_question" = -101;
"@MMK_R_KO_quotedbl" = -148;
"@MMK_R_KO_quotedblleft" = -157;
"@MMK_R_KO_quotedblright" = -159;
"@MMK_R_KO_quoteleft" = -140;
"@MMK_R_KO_quoteright" = -159;
"@MMK_R_KO_quotesingle" = -132;
"@MMK_R_KO_s" = -27;
"@MMK_R_KO_semicolon" = -66;
"@MMK_R_KO_seven" = -142;
"@MMK_R_KO_six" = -35;
"@MMK_R_KO_slash" = -64;
"@MMK_R_KO_t" = -76;
"@MMK_R_KO_three" = -57;
"@MMK_R_KO_two" = -55;
"@MMK_R_KO_u" = -47;
"@MMK_R_KO_v" = -65;
"@MMK_R_KO_w" = -57;
"@MMK_R_KO_x" = -102;
"@MMK_R_KO_y" = -69;
"@MMK_R_KO_z" = -60;
"@MMK_R_KO_zero" = -39;
};
"@MMK_L_KO_question" = {
"@MMK_R_KO_A" = -107;
"@MMK_R_KO_E" = -19;
"@MMK_R_KO_H" = -20;
"@MMK_R_KO_J" = -109;
"@MMK_R_KO_O" = -25;
"@MMK_R_KO_S" = -14;
"@MMK_R_KO_T" = -3;
"@MMK_R_KO_U" = -16;
"@MMK_R_KO_V" = -17;
"@MMK_R_KO_W" = -9;
"@MMK_R_KO_X" = -46;
"@MMK_R_KO_Y" = -16;
"@MMK_R_KO_Z" = -21;
"@MMK_R_KO_a" = -47;
"@MMK_R_KO_asterisk" = -16;
"@MMK_R_KO_bracketright" = -2;
"@MMK_R_KO_colon" = -2;
"@MMK_R_KO_comma" = -83;
"@MMK_R_KO_d" = -46;
"@MMK_R_KO_e" = -49;
"@MMK_R_KO_endash" = -53;
"@MMK_R_KO_f" = -8;
"@MMK_R_KO_g" = -44;
"@MMK_R_KO_guillemotright" = -39;
"@MMK_R_KO_h" = -14;
"@MMK_R_KO_hyphen" = -37;
"@MMK_R_KO_i" = -14;
"@MMK_R_KO_j" = -71;
"@MMK_R_KO_l" = -14;
"@MMK_R_KO_n" = -55;
"@MMK_R_KO_o" = -54;
"@MMK_R_KO_p" = -23;
"@MMK_R_KO_period" = -87;
"@MMK_R_KO_q" = -50;
"@MMK_R_KO_quotedbl" = -6;
"@MMK_R_KO_quotedblleft" = -13;
"@MMK_R_KO_quotedblright" = -17;
"@MMK_R_KO_quoteleft" = -13;
"@MMK_R_KO_quoteright" = -17;
"@MMK_R_KO_quotesingle" = -6;
"@MMK_R_KO_s" = -21;
"@MMK_R_KO_slash" = -97;
"@MMK_R_KO_t" = -11;
"@MMK_R_KO_u" = -22;
"@MMK_R_KO_x" = -11;
"@MMK_R_KO_z" = -4;
};
"@MMK_L_KO_questiondown" = {
"@MMK_R_KO_A" = -13;
"@MMK_R_KO_E" = -28;
"@MMK_R_KO_H" = -28;
"@MMK_R_KO_J" = -20;
"@MMK_R_KO_O" = -53;
"@MMK_R_KO_S" = -47;
"@MMK_R_KO_T" = -88;
"@MMK_R_KO_U" = -58;
"@MMK_R_KO_V" = -82;
"@MMK_R_KO_W" = -65;
"@MMK_R_KO_X" = -36;
"@MMK_R_KO_Y" = -98;
"@MMK_R_KO_Z" = -23;
"@MMK_R_KO_a" = -50;
"@MMK_R_KO_d" = -50;
"@MMK_R_KO_e" = -50;
"@MMK_R_KO_eight" = -52;
"@MMK_R_KO_f" = -45;
"@MMK_R_KO_four" = -56;
"@MMK_R_KO_guillemotright" = -60;
"@MMK_R_KO_h" = -18;
"@MMK_R_KO_i" = -15;
"@MMK_R_KO_j" = -4;
"@MMK_R_KO_l" = -46;
"@MMK_R_KO_n" = -20;
"@MMK_R_KO_nine" = -43;
"@MMK_R_KO_o" = -51;
"@MMK_R_KO_one" = -60;
"@MMK_R_KO_p" = -2;
"@MMK_R_KO_q" = -49;
"@MMK_R_KO_quotedbl" = -81;
"@MMK_R_KO_quotedblleft" = -90;
"@MMK_R_KO_quoteright" = -99;
"@MMK_R_KO_quotesingle" = -81;
"@MMK_R_KO_s" = -22;
"@MMK_R_KO_seven" = -70;
"@MMK_R_KO_six" = -47;
"@MMK_R_KO_t" = -56;
"@MMK_R_KO_three" = -43;
"@MMK_R_KO_two" = -2;
"@MMK_R_KO_u" = -51;
"@MMK_R_KO_v" = -51;
"@MMK_R_KO_w" = -45;
"@MMK_R_KO_x" = -22;
"@MMK_R_KO_y" = -43;
"@MMK_R_KO_zero" = -51;
};
"@MMK_L_KO_quotedbl" = {
"@MMK_R_KO_A" = -86;
"@MMK_R_KO_H" = -6;
"@MMK_R_KO_J" = -114;
"@MMK_R_KO_O" = -16;
"@MMK_R_KO_S" = -8;
"@MMK_R_KO_U" = 9;
"@MMK_R_KO_V" = 17;
"@MMK_R_KO_W" = 21;
"@MMK_R_KO_X" = -10;
"@MMK_R_KO_Y" = 24;
"@MMK_R_KO_Yacute" = 24;
"@MMK_R_KO_Z" = -19;
"@MMK_R_KO_a" = -24;
"@MMK_R_KO_aacute" = -47;
"@MMK_R_KO_ampersand" = -68;
"@MMK_R_KO_asterisk" = -61;
"@MMK_R_KO_backslash" = 25;
"@MMK_R_KO_colon" = -26;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -47;
"@MMK_R_KO_dollar" = -11;
"@MMK_R_KO_e" = -50;
"@MMK_R_KO_eight" = -14;
"@MMK_R_KO_ellipsis" = -231;
"@MMK_R_KO_endash" = -59;
"@MMK_R_KO_f" = -5;
"@MMK_R_KO_four" = -45;
"@MMK_R_KO_g" = -45;
"@MMK_R_KO_guillemotright" = -67;
"@MMK_R_KO_h" = -10;
"@MMK_R_KO_hyphen" = -31;
"@MMK_R_KO_i" = -8;
"@MMK_R_KO_iacute" = -18;
"@MMK_R_KO_idotless" = -34;
"@MMK_R_KO_j" = -54;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_n" = -51;
"@MMK_R_KO_nine" = -5;
"@MMK_R_KO_o" = -30;
"@MMK_R_KO_p" = -34;
"@MMK_R_KO_parenright" = 41;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_plus" = -149;
"@MMK_R_KO_q" = -50;
"@MMK_R_KO_question" = -7;
"@MMK_R_KO_quotedbl" = -34;
"@MMK_R_KO_quotedblleft" = -51;
"@MMK_R_KO_quotedblright" = -52;
"@MMK_R_KO_quoteleft" = -52;
"@MMK_R_KO_quoteright" = -52;
"@MMK_R_KO_quotesingle" = -34;
"@MMK_R_KO_s" = -24;
"@MMK_R_KO_semicolon" = -24;
"@MMK_R_KO_six" = -9;
"@MMK_R_KO_slash" = -81;
"@MMK_R_KO_t" = -5;
"@MMK_R_KO_three" = -5;
"@MMK_R_KO_two" = -4;
"@MMK_R_KO_u" = -31;
"@MMK_R_KO_underscore" = -231;
"@MMK_R_KO_v" = -7;
"@MMK_R_KO_w" = -4;
"@MMK_R_KO_x" = -22;
"@MMK_R_KO_y" = -9;
"@MMK_R_KO_z" = -4;
"@MMK_R_KO_zero" = -13;
};
"@MMK_L_KO_quotedblbase" = {
"@MMK_R_KO_A" = -15;
"@MMK_R_KO_E" = -31;
"@MMK_R_KO_Eacute" = -31;
"@MMK_R_KO_H" = -31;
"@MMK_R_KO_J" = -16;
"@MMK_R_KO_O" = -56;
"@MMK_R_KO_S" = -39;
"@MMK_R_KO_T" = -130;
"@MMK_R_KO_U" = -53;
"@MMK_R_KO_V" = -126;
"@MMK_R_KO_W" = -79;
"@MMK_R_KO_X" = -38;
"@MMK_R_KO_Y" = -143;
"@MMK_R_KO_Yacute" = -143;
"@MMK_R_KO_Z" = -15;
"@MMK_R_KO_a" = -29;
"@MMK_R_KO_aacute" = -30;
"@MMK_R_KO_ampersand" = -25;
"@MMK_R_KO_asterisk" = -251;
"@MMK_R_KO_colon" = -29;
"@MMK_R_KO_comma" = 2;
"@MMK_R_KO_d" = -30;
"@MMK_R_KO_dollar" = -39;
"@MMK_R_KO_e" = -29;
"@MMK_R_KO_eight" = -26;
"@MMK_R_KO_ellipsis" = -35;
"@MMK_R_KO_endash" = -53;
"@MMK_R_KO_f" = -68;
"@MMK_R_KO_four" = -56;
"@MMK_R_KO_g" = -22;
"@MMK_R_KO_guillemotright" = -72;
"@MMK_R_KO_h" = -24;
"@MMK_R_KO_hyphen" = -33;
"@MMK_R_KO_i" = -22;
"@MMK_R_KO_iacute" = -24;
"@MMK_R_KO_idotless" = -24;
"@MMK_R_KO_j" = -34;
"@MMK_R_KO_l" = -29;
"@MMK_R_KO_n" = -21;
"@MMK_R_KO_nine" = -40;
"@MMK_R_KO_o" = -30;
"@MMK_R_KO_one" = -128;
"@MMK_R_KO_p" = -19;
"@MMK_R_KO_period" = -13;
"@MMK_R_KO_plus" = -116;
"@MMK_R_KO_q" = -28;
"@MMK_R_KO_question" = -84;
"@MMK_R_KO_quotedblleft" = -274;
"@MMK_R_KO_quotedblright" = -274;
"@MMK_R_KO_quoteleft" = -168;
"@MMK_R_KO_quoteright" = -168;
"@MMK_R_KO_s" = -18;
"@MMK_R_KO_seven" = -74;
"@MMK_R_KO_six" = -42;
"@MMK_R_KO_slash" = -13;
"@MMK_R_KO_t" = -78;
"@MMK_R_KO_three" = -32;
"@MMK_R_KO_two" = -13;
"@MMK_R_KO_u" = -38;
"@MMK_R_KO_v" = -92;
"@MMK_R_KO_w" = -78;
"@MMK_R_KO_x" = -35;
"@MMK_R_KO_y" = -98;
"@MMK_R_KO_z" = -12;
"@MMK_R_KO_zero" = -49;
};
"@MMK_L_KO_quotedblleft" = {
"@MMK_R_KO_A" = -102;
"@MMK_R_KO_E" = -28;
"@MMK_R_KO_Eacute" = -28;
"@MMK_R_KO_H" = -31;
"@MMK_R_KO_J" = -129;
"@MMK_R_KO_O" = -23;
"@MMK_R_KO_S" = -15;
"@MMK_R_KO_T" = -14;
"@MMK_R_KO_U" = -21;
"@MMK_R_KO_X" = -46;
"@MMK_R_KO_Z" = -44;
"@MMK_R_KO_a" = -52;
"@MMK_R_KO_aacute" = -54;
"@MMK_R_KO_ampersand" = -77;
"@MMK_R_KO_asterisk" = -66;
"@MMK_R_KO_braceright" = -17;
"@MMK_R_KO_bracketright" = -21;
"@MMK_R_KO_colon" = -33;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -54;
"@MMK_R_KO_dollar" = -17;
"@MMK_R_KO_e" = -57;
"@MMK_R_KO_eight" = -20;
"@MMK_R_KO_ellipsis" = -274;
"@MMK_R_KO_endash" = -72;
"@MMK_R_KO_f" = -16;
"@MMK_R_KO_four" = -63;
"@MMK_R_KO_g" = -53;
"@MMK_R_KO_guillemotright" = -77;
"@MMK_R_KO_h" = -25;
"@MMK_R_KO_hyphen" = -49;
"@MMK_R_KO_i" = -23;
"@MMK_R_KO_iacute" = -25;
"@MMK_R_KO_idotless" = -41;
"@MMK_R_KO_j" = -70;
"@MMK_R_KO_l" = -25;
"@MMK_R_KO_n" = -59;
"@MMK_R_KO_nine" = -11;
"@MMK_R_KO_o" = -59;
"@MMK_R_KO_one" = -17;
"@MMK_R_KO_p" = -41;
"@MMK_R_KO_parenright" = 6;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_plus" = -157;
"@MMK_R_KO_q" = -57;
"@MMK_R_KO_question" = -28;
"@MMK_R_KO_quotedbl" = -52;
"@MMK_R_KO_quotedblleft" = -64;
"@MMK_R_KO_quotedblright" = -81;
"@MMK_R_KO_quoteleft" = -64;
"@MMK_R_KO_quoteright" = -81;
"@MMK_R_KO_quotesingle" = -52;
"@MMK_R_KO_s" = -39;
"@MMK_R_KO_semicolon" = -30;
"@MMK_R_KO_seven" = -18;
"@MMK_R_KO_six" = -18;
"@MMK_R_KO_slash" = -94;
"@MMK_R_KO_t" = -15;
"@MMK_R_KO_three" = -14;
"@MMK_R_KO_two" = -11;
"@MMK_R_KO_u" = -39;
"@MMK_R_KO_underscore" = -274;
"@MMK_R_KO_v" = -20;
"@MMK_R_KO_w" = -19;
"@MMK_R_KO_x" = -31;
"@MMK_R_KO_y" = -21;
"@MMK_R_KO_z" = -19;
"@MMK_R_KO_zero" = -20;
};
"@MMK_L_KO_quotedblright" = {
"@MMK_R_KO_A" = -120;
"@MMK_R_KO_E" = -29;
"@MMK_R_KO_Eacute" = -29;
"@MMK_R_KO_H" = -31;
"@MMK_R_KO_J" = -130;
"@MMK_R_KO_O" = -46;
"@MMK_R_KO_S" = -24;
"@MMK_R_KO_T" = -3;
"@MMK_R_KO_U" = -21;
"@MMK_R_KO_V" = -4;
"@MMK_R_KO_W" = -2;
"@MMK_R_KO_X" = -35;
"@MMK_R_KO_Z" = -33;
"@MMK_R_KO_a" = -75;
"@MMK_R_KO_aacute" = -76;
"@MMK_R_KO_asterisk" = -83;
"@MMK_R_KO_braceright" = -6;
"@MMK_R_KO_bracketright" = -11;
"@MMK_R_KO_colon" = -52;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -76;
"@MMK_R_KO_e" = -79;
"@MMK_R_KO_eight" = -28;
"@MMK_R_KO_ellipsis" = -274;
"@MMK_R_KO_endash" = -93;
"@MMK_R_KO_f" = -18;
"@MMK_R_KO_four" = -90;
"@MMK_R_KO_g" = -71;
"@MMK_R_KO_guillemotright" = -94;
"@MMK_R_KO_h" = -25;
"@MMK_R_KO_hyphen" = -77;
"@MMK_R_KO_i" = -19;
"@MMK_R_KO_iacute" = -34;
"@MMK_R_KO_idotless" = -53;
"@MMK_R_KO_j" = -69;
"@MMK_R_KO_l" = -25;
"@MMK_R_KO_n" = -85;
"@MMK_R_KO_nine" = -21;
"@MMK_R_KO_o" = -84;
"@MMK_R_KO_one" = -21;
"@MMK_R_KO_p" = -53;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_plus" = -170;
"@MMK_R_KO_q" = -81;
"@MMK_R_KO_question" = -21;
"@MMK_R_KO_quotedbl" = -51;
"@MMK_R_KO_quotedblleft" = -72;
"@MMK_R_KO_quotedblright" = -64;
"@MMK_R_KO_quoteleft" = -78;
"@MMK_R_KO_quoteright" = -64;
"@MMK_R_KO_quotesingle" = -51;
"@MMK_R_KO_s" = -55;
"@MMK_R_KO_semicolon" = -49;
"@MMK_R_KO_seven" = -8;
"@MMK_R_KO_six" = -36;
"@MMK_R_KO_slash" = -113;
"@MMK_R_KO_t" = -18;
"@MMK_R_KO_three" = -19;
"@MMK_R_KO_two" = -20;
"@MMK_R_KO_u" = -50;
"@MMK_R_KO_v" = -38;
"@MMK_R_KO_w" = -37;
"@MMK_R_KO_x" = -42;
"@MMK_R_KO_y" = -38;
"@MMK_R_KO_z" = -35;
"@MMK_R_KO_zero" = -42;
};
"@MMK_L_KO_quoteleft" = {
"@MMK_R_KO_A" = -97;
"@MMK_R_KO_E" = -28;
"@MMK_R_KO_Eacute" = -28;
"@MMK_R_KO_H" = -30;
"@MMK_R_KO_J" = -128;
"@MMK_R_KO_O" = -20;
"@MMK_R_KO_S" = -15;
"@MMK_R_KO_T" = -21;
"@MMK_R_KO_U" = -21;
"@MMK_R_KO_V" = -2;
"@MMK_R_KO_X" = -49;
"@MMK_R_KO_Z" = -46;
"@MMK_R_KO_a" = -48;
"@MMK_R_KO_aacute" = -48;
"@MMK_R_KO_ampersand" = -78;
"@MMK_R_KO_asterisk" = -66;
"@MMK_R_KO_braceright" = -19;
"@MMK_R_KO_bracketright" = -24;
"@MMK_R_KO_colon" = -31;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -48;
"@MMK_R_KO_dollar" = -17;
"@MMK_R_KO_e" = -52;
"@MMK_R_KO_eight" = -20;
"@MMK_R_KO_ellipsis" = -168;
"@MMK_R_KO_endash" = -60;
"@MMK_R_KO_f" = -15;
"@MMK_R_KO_four" = -58;
"@MMK_R_KO_g" = -49;
"@MMK_R_KO_guillemotright" = -75;
"@MMK_R_KO_h" = -22;
"@MMK_R_KO_hyphen" = -40;
"@MMK_R_KO_i" = -22;
"@MMK_R_KO_iacute" = -25;
"@MMK_R_KO_idotless" = -39;
"@MMK_R_KO_j" = -69;
"@MMK_R_KO_l" = -22;
"@MMK_R_KO_n" = -55;
"@MMK_R_KO_nine" = -11;
"@MMK_R_KO_o" = -52;
"@MMK_R_KO_one" = -17;
"@MMK_R_KO_p" = -39;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_plus" = -126;
"@MMK_R_KO_q" = -53;
"@MMK_R_KO_question" = -29;
"@MMK_R_KO_quotedbl" = -53;
"@MMK_R_KO_quotedblleft" = -65;
"@MMK_R_KO_quotedblright" = -77;
"@MMK_R_KO_quoteleft" = -64;
"@MMK_R_KO_quoteright" = -77;
"@MMK_R_KO_quotesingle" = -53;
"@MMK_R_KO_s" = -33;
"@MMK_R_KO_semicolon" = -29;
"@MMK_R_KO_seven" = -27;
"@MMK_R_KO_six" = -16;
"@MMK_R_KO_slash" = -91;
"@MMK_R_KO_t" = -14;
"@MMK_R_KO_three" = -15;
"@MMK_R_KO_two" = -11;
"@MMK_R_KO_u" = -36;
"@MMK_R_KO_v" = -19;
"@MMK_R_KO_w" = -18;
"@MMK_R_KO_x" = -33;
"@MMK_R_KO_y" = -20;
"@MMK_R_KO_z" = -16;
"@MMK_R_KO_zero" = -19;
};
"@MMK_L_KO_quoteright" = {
"@MMK_R_KO_A" = -120;
"@MMK_R_KO_E" = -29;
"@MMK_R_KO_Eacute" = -29;
"@MMK_R_KO_H" = -31;
"@MMK_R_KO_J" = -130;
"@MMK_R_KO_O" = -46;
"@MMK_R_KO_S" = -24;
"@MMK_R_KO_T" = -3;
"@MMK_R_KO_U" = -21;
"@MMK_R_KO_V" = -4;
"@MMK_R_KO_W" = -2;
"@MMK_R_KO_X" = -35;
"@MMK_R_KO_Z" = -33;
"@MMK_R_KO_a" = -75;
"@MMK_R_KO_asterisk" = -83;
"@MMK_R_KO_braceright" = -6;
"@MMK_R_KO_bracketright" = -11;
"@MMK_R_KO_colon" = -52;
"@MMK_R_KO_comma" = -138;
"@MMK_R_KO_d" = -76;
"@MMK_R_KO_e" = -79;
"@MMK_R_KO_eight" = -28;
"@MMK_R_KO_ellipsis" = -168;
"@MMK_R_KO_endash" = -93;
"@MMK_R_KO_f" = -18;
"@MMK_R_KO_four" = -90;
"@MMK_R_KO_g" = -71;
"@MMK_R_KO_guillemotright" = -94;
"@MMK_R_KO_h" = -25;
"@MMK_R_KO_hyphen" = -77;
"@MMK_R_KO_i" = -19;
"@MMK_R_KO_iacute" = -34;
"@MMK_R_KO_idotless" = -53;
"@MMK_R_KO_j" = -69;
"@MMK_R_KO_l" = -25;
"@MMK_R_KO_n" = -85;
"@MMK_R_KO_nine" = -21;
"@MMK_R_KO_o" = -84;
"@MMK_R_KO_one" = -21;
"@MMK_R_KO_p" = -53;
"@MMK_R_KO_period" = -136;
"@MMK_R_KO_plus" = -168;
"@MMK_R_KO_q" = -81;
"@MMK_R_KO_question" = -21;
"@MMK_R_KO_quotedbl" = -51;
"@MMK_R_KO_quotedblleft" = -72;
"@MMK_R_KO_quotedblright" = -64;
"@MMK_R_KO_quoteleft" = -78;
"@MMK_R_KO_quoteright" = -64;
"@MMK_R_KO_quotesingle" = -51;
"@MMK_R_KO_s" = -55;
"@MMK_R_KO_semicolon" = -49;
"@MMK_R_KO_seven" = -8;
"@MMK_R_KO_six" = -36;
"@MMK_R_KO_slash" = -113;
"@MMK_R_KO_t" = -18;
"@MMK_R_KO_three" = -19;
"@MMK_R_KO_two" = -20;
"@MMK_R_KO_u" = -31;
"@MMK_R_KO_v" = -38;
"@MMK_R_KO_w" = -37;
"@MMK_R_KO_x" = -42;
"@MMK_R_KO_y" = -38;
"@MMK_R_KO_z" = -35;
"@MMK_R_KO_zero" = -42;
};
"@MMK_L_KO_quotesinglbase" = {
"@MMK_R_KO_A" = -2;
"@MMK_R_KO_E" = -17;
"@MMK_R_KO_Eacute" = -17;
"@MMK_R_KO_H" = -17;
"@MMK_R_KO_O" = -41;
"@MMK_R_KO_S" = -26;
"@MMK_R_KO_T" = -117;
"@MMK_R_KO_U" = -37;
"@MMK_R_KO_V" = -112;
"@MMK_R_KO_W" = -65;
"@MMK_R_KO_X" = -21;
"@MMK_R_KO_Y" = -129;
"@MMK_R_KO_Z" = -2;
"@MMK_R_KO_a" = -17;
"@MMK_R_KO_ampersand" = -15;
"@MMK_R_KO_asterisk" = -143;
"@MMK_R_KO_colon" = -16;
"@MMK_R_KO_comma" = 24;
"@MMK_R_KO_d" = -18;
"@MMK_R_KO_dollar" = -26;
"@MMK_R_KO_e" = -17;
"@MMK_R_KO_eight" = -14;
"@MMK_R_KO_ellipsis" = -21;
"@MMK_R_KO_endash" = -44;
"@MMK_R_KO_f" = -55;
"@MMK_R_KO_four" = -44;
"@MMK_R_KO_g" = -11;
"@MMK_R_KO_guillemotright" = -58;
"@MMK_R_KO_h" = -13;
"@MMK_R_KO_hyphen" = -21;
"@MMK_R_KO_i" = -11;
"@MMK_R_KO_iacute" = -13;
"@MMK_R_KO_j" = -17;
"@MMK_R_KO_l" = -17;
"@MMK_R_KO_n" = -10;
"@MMK_R_KO_nine" = -27;
"@MMK_R_KO_o" = -18;
"@MMK_R_KO_one" = -114;
"@MMK_R_KO_plus" = -103;
"@MMK_R_KO_q" = -16;
"@MMK_R_KO_question" = -74;
"@MMK_R_KO_quotedblleft" = -143;
"@MMK_R_KO_quoteleft" = -143;
"@MMK_R_KO_quoteright" = -143;
"@MMK_R_KO_s" = -5;
"@MMK_R_KO_seven" = -64;
"@MMK_R_KO_six" = -26;
"@MMK_R_KO_t" = -60;
"@MMK_R_KO_three" = -19;
"@MMK_R_KO_u" = -23;
"@MMK_R_KO_v" = -79;
"@MMK_R_KO_w" = -63;
"@MMK_R_KO_x" = -17;
"@MMK_R_KO_y" = -84;
"@MMK_R_KO_zero" = -33;
};
"@MMK_L_KO_quotesingle" = {
"@MMK_R_KO_A" = -86;
"@MMK_R_KO_H" = -6;
"@MMK_R_KO_J" = -114;
"@MMK_R_KO_O" = -16;
"@MMK_R_KO_S" = -8;
"@MMK_R_KO_U" = 9;
"@MMK_R_KO_V" = 17;
"@MMK_R_KO_W" = 21;
"@MMK_R_KO_X" = -10;
"@MMK_R_KO_Y" = 24;
"@MMK_R_KO_Yacute" = 24;
"@MMK_R_KO_Z" = -19;
"@MMK_R_KO_a" = -24;
"@MMK_R_KO_aacute" = -47;
"@MMK_R_KO_ampersand" = -68;
"@MMK_R_KO_asterisk" = -61;
"@MMK_R_KO_backslash" = 25;
"@MMK_R_KO_colon" = -26;
"@MMK_R_KO_comma" = -132;
"@MMK_R_KO_d" = -47;
"@MMK_R_KO_dollar" = -11;
"@MMK_R_KO_e" = -25;
"@MMK_R_KO_eight" = -14;
"@MMK_R_KO_ellipsis" = -132;
"@MMK_R_KO_endash" = -59;
"@MMK_R_KO_f" = -5;
"@MMK_R_KO_four" = -45;
"@MMK_R_KO_g" = -45;
"@MMK_R_KO_guillemotright" = -67;
"@MMK_R_KO_h" = -10;
"@MMK_R_KO_hyphen" = -31;
"@MMK_R_KO_i" = -8;
"@MMK_R_KO_iacute" = -18;
"@MMK_R_KO_idotless" = -34;
"@MMK_R_KO_j" = -54;
"@MMK_R_KO_l" = -10;
"@MMK_R_KO_n" = -51;
"@MMK_R_KO_nine" = -5;
"@MMK_R_KO_o" = -29;
"@MMK_R_KO_p" = -34;
"@MMK_R_KO_parenright" = 41;
"@MMK_R_KO_period" = -132;
"@MMK_R_KO_plus" = -132;
"@MMK_R_KO_q" = -50;
"@MMK_R_KO_question" = -7;
"@MMK_R_KO_quotedbl" = -34;
"@MMK_R_KO_quotedblleft" = -51;
"@MMK_R_KO_quotedblright" = -52;
"@MMK_R_KO_quoteleft" = -52;
"@MMK_R_KO_quoteright" = -52;
"@MMK_R_KO_quotesingle" = -34;
"@MMK_R_KO_s" = -24;
"@MMK_R_KO_semicolon" = -24;
"@MMK_R_KO_six" = -9;
"@MMK_R_KO_slash" = -81;
"@MMK_R_KO_t" = -5;
"@MMK_R_KO_three" = -5;
"@MMK_R_KO_two" = -4;
"@MMK_R_KO_u" = -16;
"@MMK_R_KO_underscore" = -132;
"@MMK_R_KO_v" = -7;
"@MMK_R_KO_w" = -4;
"@MMK_R_KO_x" = -22;
"@MMK_R_KO_y" = -10;
"@MMK_R_KO_z" = -4;
"@MMK_R_KO_zero" = -13;
};
"@MMK_L_KO_r" = {
"@MMK_R_KO_A" = -81;
"@MMK_R_KO_E" = -17;
"@MMK_R_KO_Eacute" = -17;
"@MMK_R_KO_H" = -17;
"@MMK_R_KO_J" = -111;
"@MMK_R_KO_T" = -47;
"@MMK_R_KO_U" = -10;
"@MMK_R_KO_V" = -18;
"@MMK_R_KO_W" = -7;
"@MMK_R_KO_X" = -74;
"@MMK_R_KO_Y" = -32;
"@MMK_R_KO_Yacute" = -32;
"@MMK_R_KO_Z" = -40;
"@MMK_R_KO_a" = -20;
"@MMK_R_KO_aacute" = -20;
"@MMK_R_KO_ampersand" = -59;
"@MMK_R_KO_asterisk" = -21;
"@MMK_R_KO_braceright" = -15;
"@MMK_R_KO_bracketright" = -17;
"@MMK_R_KO_comma" = -78;
"@MMK_R_KO_d" = -20;
"@MMK_R_KO_dollar" = -2;
"@MMK_R_KO_e" = -21;
"@MMK_R_KO_eight" = -9;
"@MMK_R_KO_ellipsis" = -133;
"@MMK_R_KO_endash" = -6;
"@MMK_R_KO_four" = -28;
"@MMK_R_KO_g" = -16;
"@MMK_R_KO_guillemotright" = -29;
"@MMK_R_KO_h" = -6;
"@MMK_R_KO_i" = -3;
"@MMK_R_KO_iacute" = -7;
"@MMK_R_KO_idotless" = -13;
"@MMK_R_KO_igrave" = -7;
"@MMK_R_KO_itilde" = -5;
"@MMK_R_KO_j" = -52;
"@MMK_R_KO_l" = -6;
"@MMK_R_KO_o" = -23;
"@MMK_R_KO_p" = -7;
"@MMK_R_KO_period" = -82;
"@MMK_R_KO_plus" = -92;
"@MMK_R_KO_q" = -22;
"@MMK_R_KO_question" = -17;
"@MMK_R_KO_quotedblleft" = -20;
"@MMK_R_KO_quotedblright" = -35;
"@MMK_R_KO_quoteleft" = -16;
"@MMK_R_KO_quoteright" = -35;
"@MMK_R_KO_seven" = -54;
"@MMK_R_KO_slash" = -71;
"@MMK_R_KO_three" = -4;
"@MMK_R_KO_underscore" = -179;
"@MMK_R_KO_v" = 15;
"@MMK_R_KO_w" = 14;
"@MMK_R_KO_y" = 13;
"@MMK_R_KO_z" = 6;
};
"@MMK_L_KO_s" = {
"@MMK_R_KO_A" = -13;
"@MMK_R_KO_E" = -12;
"@MMK_R_KO_Eacute" = -12;
"@MMK_R_KO_H" = -12;
"@MMK_R_KO_J" = -3;
"@MMK_R_KO_S" = -3;
"@MMK_R_KO_T" = -79;
"@MMK_R_KO_U" = -13;
"@MMK_R_KO_V" = -58;
"@MMK_R_KO_W" = -22;
"@MMK_R_KO_X" = -36;
"@MMK_R_KO_Y" = -85;
"@MMK_R_KO_a" = -4;
"@MMK_R_KO_ampersand" = -5;
"@MMK_R_KO_asterisk" = -36;
"@MMK_R_KO_backslash" = -18;
"@MMK_R_KO_braceright" = -18;
"@MMK_R_KO_bracketright" = -20;
"@MMK_R_KO_colon" = 8;
"@MMK_R_KO_d" = -4;
"@MMK_R_KO_dollar" = -5;
"@MMK_R_KO_e" = -4;
"@MMK_R_KO_ellipsis" = -27;
"@MMK_R_KO_f" = -10;
"@MMK_R_KO_g" = -2;
"@MMK_R_KO_guillemotright" = -19;
"@MMK_R_KO_h" = -8;
"@MMK_R_KO_hyphen" = 17;
"@MMK_R_KO_i" = -4;
"@MMK_R_KO_iacute" = -8;
"@MMK_R_KO_idotless" = -8;
"@MMK_R_KO_igrave" = -8;
"@MMK_R_KO_itilde" = -8;
"@MMK_R_KO_j" = -58;
"@MMK_R_KO_l" = -8;
"@MMK_R_KO_n" = -2;
"@MMK_R_KO_nine" = -9;
"@MMK_R_KO_o" = -5;
"@MMK_R_KO_one" = -23;
"@MMK_R_KO_p" = -8;
"@MMK_R_KO_plus" = -42;
"@MMK_R_KO_q" = -4;
"@MMK_R_KO_question" = -36;
"@MMK_R_KO_quotedbl" = -43;
"@MMK_R_KO_quotedblleft" = -49;
"@MMK_R_KO_quotedblright" = -60;
"@MMK_R_KO_quoteleft" = -43;
"@MMK_R_KO_quoteright" = -60;
"@MMK_R_KO_quotesingle" = -43;
"@MMK_R_KO_s" = 11;
"@MMK_R_KO_semicolon" = 19;
"@MMK_R_KO_seven" = -71;
"@MMK_R_KO_slash" = -10;
"@MMK_R_KO_t" = -10;
"@MMK_R_KO_u" = -6;
"@MMK_R_KO_underscore" = -123;
"@MMK_R_KO_v" = -17;
"@MMK_R_KO_w" = -13;
"@MMK_R_KO_x" = -23;
"@MMK_R_KO_y" = -18;
"@MMK_R_KO_z" = 10;
};
"@MMK_L_KO_seven" = {
"@MMK_R_KO_A" = -81;
"@MMK_R_KO_J" = -80;
"@MMK_R_KO_O" = -2;
"@MMK_R_KO_S" = 2;
"@MMK_R_KO_T" = 8;
"@MMK_R_KO_U" = 9;
"@MMK_R_KO_V" = 14;
"@MMK_R_KO_W" = 27;
"@MMK_R_KO_X" = -17;
"@MMK_R_KO_a" = -43;
"@MMK_R_KO_ampersand" = -71;
"@MMK_R_KO_asterisk" = -16;
"@MMK_R_KO_backslash" = 31;
"@MMK_R_KO_comma" = -69;
"@MMK_R_KO_d" = -44;
"@MMK_R_KO_e" = -45;
"@MMK_R_KO_ellipsis" = -132;
"@MMK_R_KO_endash" = -40;
"@MMK_R_KO_f" = -6;
"@MMK_R_KO_four" = -25;
"@MMK_R_KO_g" = -39;
"@MMK_R_KO_guillemotright" = -27;
"@MMK_R_KO_idotless" = -23;
"@MMK_R_KO_j" = -68;
"@MMK_R_KO_n" = -55;
"@MMK_R_KO_nine" = 11;
"@MMK_R_KO_o" = -48;
"@MMK_R_KO_p" = -16;
"@MMK_R_KO_parenright" = 31;
"@MMK_R_KO_period" = -77;
"@MMK_R_KO_plus" = -84;
"@MMK_R_KO_q" = -46;
"@MMK_R_KO_quotedbl" = 4;
"@MMK_R_KO_quotedblleft" = -9;
"@MMK_R_KO_quotedblright" = -7;
"@MMK_R_KO_quoteleft" = -11;
"@MMK_R_KO_quoteright" = -7;
"@MMK_R_KO_quotesingle" = 4;
"@MMK_R_KO_s" = -21;
"@MMK_R_KO_six" = 2;
"@MMK_R_KO_slash" = -89;
"@MMK_R_KO_t" = -6;
"@MMK_R_KO_three" = 3;
"@MMK_R_KO_two" = 3;
"@MMK_R_KO_u" = -19;
"@MMK_R_KO_underscore" = -200;
};
"@MMK_L_KO_six" = {
"@MMK_R_KO_J" = -10;
"@MMK_R_KO_O" = 10;
"@MMK_R_KO_S" = 14;
"@MMK_R_KO_T" = -16;
"@MMK_R_KO_X" = -21;
"@MMK_R_KO_Y" = -18;
"@MMK_R_KO_Yacute" = -18;
"@MMK_R_KO_Z" = 15;
"@MMK_R_KO_ampersand" = 2;
"@MMK_R_KO_asterisk" = -16;
"@MMK_R_KO_comma" = -2;
"@MMK_R_KO_dollar" = 8;
"@MMK_R_KO_eight" = 18;
"@MMK_R_KO_ellipsis" = -44;
"@MMK_R_KO_f" = -10;
"@MMK_R_KO_four" = 25;
"@MMK_R_KO_guillemotright" = -17;
"@MMK_R_KO_hyphen" = 17;
"@MMK_R_KO_idotless" = -10;
"@MMK_R_KO_j" = -64;
"@MMK_R_KO_n" = -5;
"@MMK_R_KO_nine" = 9;
"@MMK_R_KO_p" = -10;
"@MMK_R_KO_parenright" = 27;
"@MMK_R_KO_period" = -15;
"@MMK_R_KO_plus" = -39;
"@MMK_R_KO_quotedbl" = -9;
"@MMK_R_KO_quotedblleft" = -15;
"@MMK_R_KO_quotedblright" = -26;
"@MMK_R_KO_quoteleft" = -15;
"@MMK_R_KO_quoteright" = -26;
"@MMK_R_KO_quotesingle" = -9;
"@MMK_R_KO_six" = 20;
"@MMK_R_KO_slash" = -11;
"@MMK_R_KO_t" = -11;
"@MMK_R_KO_three" = 16;
"@MMK_R_KO_two" = 18;
"@MMK_R_KO_u" = -5;
"@MMK_R_KO_underscore" = -147;
"@MMK_R_KO_zero" = 14;
};
"@MMK_L_KO_slash" = {
"@MMK_R_KO_A" = -103;
"@MMK_R_KO_H" = -6;
"@MMK_R_KO_J" = -108;
"@MMK_R_KO_O" = -36;
"@MMK_R_KO_S" = -12;
"@MMK_R_KO_T" = 21;
"@MMK_R_KO_U" = 6;
"@MMK_R_KO_V" = 22;
"@MMK_R_KO_W" = 27;
"@MMK_R_KO_Y" = 27;
"@MMK_R_KO_Yacute" = 27;
"@MMK_R_KO_a" = -60;
"@MMK_R_KO_aacute" = -59;
"@MMK_R_KO_asterisk" = -28;
"@MMK_R_KO_backslash" = 63;
"@MMK_R_KO_colon" = -16;
"@MMK_R_KO_comma" = -71;
"@MMK_R_KO_d" = -60;
"@MMK_R_KO_dollar" = -15;
"@MMK_R_KO_e" = -61;
"@MMK_R_KO_eight" = -9;
"@MMK_R_KO_ellipsis" = -133;
"@MMK_R_KO_endash" = -54;
"@MMK_R_KO_f" = -19;
"@MMK_R_KO_four" = -71;
"@MMK_R_KO_g" = -55;
"@MMK_R_KO_guillemotright" = -43;
"@MMK_R_KO_iacute" = -25;
"@MMK_R_KO_idotless" = -32;
"@MMK_R_KO_j" = -42;
"@MMK_R_KO_n" = -71;
"@MMK_R_KO_o" = -64;
"@MMK_R_KO_one" = -13;
"@MMK_R_KO_p" = -31;
"@MMK_R_KO_parenright" = 46;
"@MMK_R_KO_period" = -79;
"@MMK_R_KO_plus" = -91;
"@MMK_R_KO_q" = -62;
"@MMK_R_KO_quotedbl" = 22;
"@MMK_R_KO_quotedblleft" = -20;
"@MMK_R_KO_quotedblright" = -4;
"@MMK_R_KO_quoteleft" = -22;
"@MMK_R_KO_quoteright" = -4;
"@MMK_R_KO_quotesingle" = 22;
"@MMK_R_KO_s" = -31;
"@MMK_R_KO_seven" = 13;
"@MMK_R_KO_six" = -21;
"@MMK_R_KO_slash" = -96;
"@MMK_R_KO_t" = -19;
"@MMK_R_KO_three" = -19;
"@MMK_R_KO_u" = -32;
"@MMK_R_KO_underscore" = -196;
"@MMK_R_KO_v" = -5;
"@MMK_R_KO_x" = -21;
"@MMK_R_KO_y" = -11;
"@MMK_R_KO_z" = -9;
"@MMK_R_KO_zero" = -30;
};
"@MMK_L_KO_t" = {
"@MMK_R_KO_A" = 19;
"@MMK_R_KO_T" = -26;
"@MMK_R_KO_V" = -19;
"@MMK_R_KO_Y" = -33;
"@MMK_R_KO_Yacute" = -33;
"@MMK_R_KO_Z" = 8;
"@MMK_R_KO_asterisk" = -24;
"@MMK_R_KO_colon" = 35;
"@MMK_R_KO_comma" = 22;
"@MMK_R_KO_ellipsis" = -13;
"@MMK_R_KO_endash" = -9;
"@MMK_R_KO_j" = -26;
"@MMK_R_KO_one" = -2;
"@MMK_R_KO_parenright" = 18;
"@MMK_R_KO_period" = 17;
"@MMK_R_KO_plus" = -75;
"@MMK_R_KO_quotedbl" = -3;
"@MMK_R_KO_quotedblleft" = -17;
"@MMK_R_KO_quotedblright" = -17;
"@MMK_R_KO_quoteleft" = -15;
"@MMK_R_KO_quoteright" = -17;
"@MMK_R_KO_quotesingle" = -3;
"@MMK_R_KO_s" = 22;
"@MMK_R_KO_semicolon" = 42;
"@MMK_R_KO_seven" = -13;
"@MMK_R_KO_slash" = 21;
"@MMK_R_KO_two" = 9;
"@MMK_R_KO_underscore" = -75;
"@MMK_R_KO_w" = 10;
"@MMK_R_KO_x" = 2;
"@MMK_R_KO_y" = 6;
"@MMK_R_KO_z" = 19;
};
"@MMK_L_KO_three" = {
"@MMK_R_KO_J" = -10;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_S" = 16;
"@MMK_R_KO_T" = -7;
"@MMK_R_KO_V" = -5;
"@MMK_R_KO_X" = -21;
"@MMK_R_KO_Y" = -18;
"@MMK_R_KO_Yacute" = -18;
"@MMK_R_KO_Z" = 10;
"@MMK_R_KO_ampersand" = 3;
"@MMK_R_KO_asterisk" = -23;
"@MMK_R_KO_braceright" = -2;
"@MMK_R_KO_bracketright" = -5;
"@MMK_R_KO_comma" = -2;
"@MMK_R_KO_dollar" = 5;
"@MMK_R_KO_eight" = 14;
"@MMK_R_KO_ellipsis" = -44;
"@MMK_R_KO_endash" = -2;
"@MMK_R_KO_four" = 20;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -3;
"@MMK_R_KO_hyphen" = 12;
"@MMK_R_KO_idotless" = -7;
"@MMK_R_KO_j" = -67;
"@MMK_R_KO_l" = -4;
"@MMK_R_KO_n" = -13;
"@MMK_R_KO_nine" = 8;
"@MMK_R_KO_one" = -3;
"@MMK_R_KO_p" = -7;
"@MMK_R_KO_parenright" = 26;
"@MMK_R_KO_period" = -15;
"@MMK_R_KO_plus" = -42;
"@MMK_R_KO_quotedbl" = -16;
"@MMK_R_KO_quotedblleft" = -22;
"@MMK_R_KO_quotedblright" = -32;
"@MMK_R_KO_quoteleft" = -22;
"@MMK_R_KO_quoteright" = -32;
"@MMK_R_KO_quotesingle" = -16;
"@MMK_R_KO_seven" = -2;
"@MMK_R_KO_six" = 12;
"@MMK_R_KO_slash" = -3;
"@MMK_R_KO_three" = 13;
"@MMK_R_KO_two" = 14;
"@MMK_R_KO_u" = -10;
"@MMK_R_KO_underscore" = -147;
"@MMK_R_KO_x" = -4;
"@MMK_R_KO_zero" = 6;
};
"@MMK_L_KO_two" = {
"@MMK_R_KO_J" = -7;
"@MMK_R_KO_O" = 2;
"@MMK_R_KO_S" = 16;
"@MMK_R_KO_W" = 14;
"@MMK_R_KO_X" = -7;
"@MMK_R_KO_Y" = -3;
"@MMK_R_KO_Yacute" = -3;
"@MMK_R_KO_a" = -23;
"@MMK_R_KO_ampersand" = -20;
"@MMK_R_KO_asterisk" = -14;
"@MMK_R_KO_backslash" = 8;
"@MMK_R_KO_colon" = 17;
"@MMK_R_KO_d" = -18;
"@MMK_R_KO_e" = -24;
"@MMK_R_KO_eight" = 5;
"@MMK_R_KO_ellipsis" = -39;
"@MMK_R_KO_endash" = -31;
"@MMK_R_KO_four" = -8;
"@MMK_R_KO_g" = -17;
"@MMK_R_KO_guillemotright" = -13;
"@MMK_R_KO_h" = -3;
"@MMK_R_KO_idotless" = -13;
"@MMK_R_KO_j" = -37;
"@MMK_R_KO_l" = -3;
"@MMK_R_KO_n" = -20;
"@MMK_R_KO_nine" = 21;
"@MMK_R_KO_o" = -26;
"@MMK_R_KO_p" = -5;
"@MMK_R_KO_parenright" = 33;
"@MMK_R_KO_period" = -2;
"@MMK_R_KO_plus" = -77;
"@MMK_R_KO_q" = -20;
"@MMK_R_KO_quotedbl" = -6;
"@MMK_R_KO_quotedblleft" = -13;
"@MMK_R_KO_quotedblright" = -20;
"@MMK_R_KO_quoteleft" = -13;
"@MMK_R_KO_quoteright" = -20;
"@MMK_R_KO_quotesingle" = -6;
"@MMK_R_KO_semicolon" = 25;
"@MMK_R_KO_six" = 13;
"@MMK_R_KO_three" = 6;
"@MMK_R_KO_two" = 21;
"@MMK_R_KO_u" = -13;
"@MMK_R_KO_underscore" = -89;
"@MMK_R_KO_zero" = 7;
};
"@MMK_L_KO_u" = {
"@MMK_R_KO_A" = -26;
"@MMK_R_KO_E" = -17;
"@MMK_R_KO_Eacute" = -16;
"@MMK_R_KO_H" = -17;
"@MMK_R_KO_J" = -25;
"@MMK_R_KO_S" = -10;
"@MMK_R_KO_T" = -55;
"@MMK_R_KO_U" = -14;
"@MMK_R_KO_V" = -37;
"@MMK_R_KO_W" = -14;
"@MMK_R_KO_X" = -72;
"@MMK_R_KO_Y" = -55;
"@MMK_R_KO_Z" = -24;
"@MMK_R_KO_a" = -4;
"@MMK_R_KO_aacute" = -5;
"@MMK_R_KO_ampersand" = -11;
"@MMK_R_KO_asterisk" = -22;
"@MMK_R_KO_backslash" = -2;
"@MMK_R_KO_braceright" = -23;
"@MMK_R_KO_bracketright" = -27;
"@MMK_R_KO_comma" = -10;
"@MMK_R_KO_d" = -5;
"@MMK_R_KO_dollar" = -10;
"@MMK_R_KO_e" = -5;
"@MMK_R_KO_eight" = -11;
"@MMK_R_KO_ellipsis" = -56;
"@MMK_R_KO_endash" = -13;
"@MMK_R_KO_f" = -11;
"@MMK_R_KO_four" = -6;
"@MMK_R_KO_g" = -6;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -14;
"@MMK_R_KO_i" = -10;
"@MMK_R_KO_iacute" = -14;
"@MMK_R_KO_idotless" = -14;
"@MMK_R_KO_igrave" = -14;
"@MMK_R_KO_itilde" = -11;
"@MMK_R_KO_j" = -66;
"@MMK_R_KO_l" = -14;
"@MMK_R_KO_n" = -18;
"@MMK_R_KO_nine" = -8;
"@MMK_R_KO_o" = -6;
"@MMK_R_KO_one" = -15;
"@MMK_R_KO_p" = -13;
"@MMK_R_KO_parenright" = -3;
"@MMK_R_KO_period" = -25;
"@MMK_R_KO_plus" = -47;
"@MMK_R_KO_q" = -5;
"@MMK_R_KO_question" = -18;
"@MMK_R_KO_quotedbl" = -31;
"@MMK_R_KO_quotedblleft" = -38;
"@MMK_R_KO_quotedblright" = -49;
"@MMK_R_KO_quoteleft" = -36;
"@MMK_R_KO_quoteright" = -49;
"@MMK_R_KO_quotesingle" = -31;
"@MMK_R_KO_semicolon" = 11;
"@MMK_R_KO_seven" = -42;
"@MMK_R_KO_slash" = -25;
"@MMK_R_KO_t" = -11;
"@MMK_R_KO_three" = -15;
"@MMK_R_KO_two" = -7;
"@MMK_R_KO_u" = -11;
"@MMK_R_KO_underscore" = -152;
"@MMK_R_KO_x" = -5;
};
"@MMK_L_KO_uacute" = {
"@MMK_R_KO_A" = -26;
"@MMK_R_KO_E" = -11;
"@MMK_R_KO_Eacute" = -10;
"@MMK_R_KO_H" = -15;
"@MMK_R_KO_S" = -6;
"@MMK_R_KO_T" = -36;
"@MMK_R_KO_U" = -13;
"@MMK_R_KO_V" = -33;
"@MMK_R_KO_W" = -5;
"@MMK_R_KO_Z" = -20;
"@MMK_R_KO_a" = -4;
"@MMK_R_KO_aacute" = -5;
"@MMK_R_KO_bracketright" = -23;
"@MMK_R_KO_comma" = -10;
"@MMK_R_KO_d" = -5;
"@MMK_R_KO_e" = -5;
"@MMK_R_KO_ellipsis" = -56;
"@MMK_R_KO_endash" = -12;
"@MMK_R_KO_f" = -3;
"@MMK_R_KO_g" = -6;
"@MMK_R_KO_guillemotright" = -21;
"@MMK_R_KO_h" = -12;
"@MMK_R_KO_i" = -8;
"@MMK_R_KO_iacute" = -14;
"@MMK_R_KO_igrave" = -6;
"@MMK_R_KO_itilde" = -3;
"@MMK_R_KO_j" = -66;
"@MMK_R_KO_l" = -14;
"@MMK_R_KO_n" = -18;
"@MMK_R_KO_o" = -6;
"@MMK_R_KO_one" = -15;
"@MMK_R_KO_p" = -13;
"@MMK_R_KO_period" = -25;
"@MMK_R_KO_q" = -5;
"@MMK_R_KO_question" = -9;
"@MMK_R_KO_quotedbl" = -18;
"@MMK_R_KO_quotedblleft" = -31;
"@MMK_R_KO_quotedblright" = -27;
"@MMK_R_KO_quoteleft" = -30;
"@MMK_R_KO_quoteright" = -27;
"@MMK_R_KO_quotesingle" = -18;
"@MMK_R_KO_semicolon" = 11;
"@MMK_R_KO_seven" = -39;
"@MMK_R_KO_slash" = -24;
"@MMK_R_KO_t" = -4;
"@MMK_R_KO_u" = -11;
"@MMK_R_KO_x" = -5;
};
"@MMK_L_KO_uhorn" = {
"@MMK_R_KO_E" = 43;
"@MMK_R_KO_bracketright" = 29;
"@MMK_R_KO_colon" = 40;
"@MMK_R_KO_comma" = -10;
"@MMK_R_KO_ellipsis" = -56;
"@MMK_R_KO_endash" = -2;
"@MMK_R_KO_h" = 35;
"@MMK_R_KO_i" = 26;
"@MMK_R_KO_l" = 35;
"@MMK_R_KO_n" = -13;
"@MMK_R_KO_o" = -5;
"@MMK_R_KO_p" = 19;
"@MMK_R_KO_parenright" = 71;
"@MMK_R_KO_period" = -25;
"@MMK_R_KO_question" = 40;
"@MMK_R_KO_quotedbl" = 66;
"@MMK_R_KO_quotedblright" = 24;
"@MMK_R_KO_quoteright" = 24;
"@MMK_R_KO_quotesingle" = 66;
"@MMK_R_KO_semicolon" = 46;
"@MMK_R_KO_slash" = -23;
"@MMK_R_KO_t" = 26;
"@MMK_R_KO_u" = 21;
"@MMK_R_KO_v" = 47;
"@MMK_R_KO_x" = 33;
"@MMK_R_KO_y" = 47;
"@MMK_R_KO_z" = 43;
};
"@MMK_L_KO_underscore" = {
"@MMK_R_KO_A" = -72;
"@MMK_R_KO_E" = -98;
"@MMK_R_KO_H" = -98;
"@MMK_R_KO_J" = -73;
"@MMK_R_KO_O" = -179;
"@MMK_R_KO_S" = -153;
"@MMK_R_KO_T" = -192;
"@MMK_R_KO_U" = -173;
"@MMK_R_KO_V" = -215;
"@MMK_R_KO_W" = -168;
"@MMK_R_KO_X" = -84;
"@MMK_R_KO_Y" = -203;
"@MMK_R_KO_Z" = -104;
"@MMK_R_KO_a" = -147;
"@MMK_R_KO_asterisk" = -306;
"@MMK_R_KO_bracketright" = -41;
"@MMK_R_KO_colon" = -88;
"@MMK_R_KO_comma" = -28;
"@MMK_R_KO_d" = -149;
"@MMK_R_KO_e" = -149;
"@MMK_R_KO_eight" = -145;
"@MMK_R_KO_f" = -129;
"@MMK_R_KO_four" = -263;
"@MMK_R_KO_g" = -59;
"@MMK_R_KO_h" = -92;
"@MMK_R_KO_i" = -91;
"@MMK_R_KO_j" = -47;
"@MMK_R_KO_l" = -134;
"@MMK_R_KO_n" = -90;
"@MMK_R_KO_nine" = -147;
"@MMK_R_KO_o" = -153;
"@MMK_R_KO_one" = -189;
"@MMK_R_KO_p" = -54;
"@MMK_R_KO_period" = -47;
"@MMK_R_KO_q" = -145;
"@MMK_R_KO_quotedbl" = -231;
"@MMK_R_KO_quotedblright" = -274;
"@MMK_R_KO_quotesingle" = -132;
"@MMK_R_KO_s" = -122;
"@MMK_R_KO_semicolon" = -44;
"@MMK_R_KO_seven" = -126;
"@MMK_R_KO_six" = -159;
"@MMK_R_KO_slash" = -75;
"@MMK_R_KO_t" = -167;
"@MMK_R_KO_three" = -142;
"@MMK_R_KO_two" = -79;
"@MMK_R_KO_u" = -152;
"@MMK_R_KO_underscore" = -59;
"@MMK_R_KO_v" = -180;
"@MMK_R_KO_w" = -160;
"@MMK_R_KO_x" = -85;
"@MMK_R_KO_y" = -107;
"@MMK_R_KO_z" = -92;
"@MMK_R_KO_zero" = -169;
};
"@MMK_L_KO_v" = {
"@MMK_R_KO_A" = -78;
"@MMK_R_KO_J" = -80;
"@MMK_R_KO_O" = -11;
"@MMK_R_KO_T" = -54;
"@MMK_R_KO_V" = -7;
"@MMK_R_KO_X" = -66;
"@MMK_R_KO_Y" = -32;
"@MMK_R_KO_Z" = -21;
"@MMK_R_KO_a" = -18;
"@MMK_R_KO_aacute" = -18;
"@MMK_R_KO_ampersand" = -45;
"@MMK_R_KO_asterisk" = -9;
"@MMK_R_KO_backslash" = 18;
"@MMK_R_KO_braceright" = -19;
"@MMK_R_KO_bracketright" = -25;
"@MMK_R_KO_colon" = 6;
"@MMK_R_KO_comma" = -39;
"@MMK_R_KO_d" = -18;
"@MMK_R_KO_e" = -19;
"@MMK_R_KO_ellipsis" = -106;
"@MMK_R_KO_endash" = -26;
"@MMK_R_KO_four" = -27;
"@MMK_R_KO_g" = -15;
"@MMK_R_KO_guillemotright" = -13;
"@MMK_R_KO_j" = -45;
"@MMK_R_KO_n" = -24;
"@MMK_R_KO_o" = -20;
"@MMK_R_KO_period" = -61;
"@MMK_R_KO_plus" = -64;
"@MMK_R_KO_q" = -19;
"@MMK_R_KO_question" = -15;
"@MMK_R_KO_quotedbl" = -6;
"@MMK_R_KO_quotedblleft" = -19;
"@MMK_R_KO_quotedblright" = -38;
"@MMK_R_KO_quoteleft" = -14;
"@MMK_R_KO_quoteright" = -38;
"@MMK_R_KO_quotesingle" = -6;
"@MMK_R_KO_semicolon" = 11;
"@MMK_R_KO_seven" = -67;
"@MMK_R_KO_slash" = -69;
"@MMK_R_KO_underscore" = -177;
"@MMK_R_KO_v" = 21;
"@MMK_R_KO_w" = 23;
"@MMK_R_KO_x" = 7;
"@MMK_R_KO_y" = 20;
"@MMK_R_KO_z" = 21;
"@MMK_R_KO_zero" = -7;
};
"@MMK_L_KO_w" = {
"@MMK_R_KO_A" = -66;
"@MMK_R_KO_J" = -65;
"@MMK_R_KO_O" = -2;
"@MMK_R_KO_T" = -51;
"@MMK_R_KO_V" = -7;
"@MMK_R_KO_X" = -66;
"@MMK_R_KO_Y" = -29;
"@MMK_R_KO_Z" = -5;
"@MMK_R_KO_a" = -13;
"@MMK_R_KO_aacute" = -13;
"@MMK_R_KO_ampersand" = -36;
"@MMK_R_KO_asterisk" = -7;
"@MMK_R_KO_backslash" = 18;
"@MMK_R_KO_braceright" = -17;
"@MMK_R_KO_bracketright" = -21;
"@MMK_R_KO_colon" = 13;
"@MMK_R_KO_comma" = -23;
"@MMK_R_KO_d" = -13;
"@MMK_R_KO_e" = -14;
"@MMK_R_KO_ellipsis" = -93;
"@MMK_R_KO_endash" = -19;
"@MMK_R_KO_four" = -18;
"@MMK_R_KO_g" = -11;
"@MMK_R_KO_j" = -45;
"@MMK_R_KO_n" = -20;
"@MMK_R_KO_nine" = 3;
"@MMK_R_KO_o" = -15;
"@MMK_R_KO_period" = -47;
"@MMK_R_KO_plus" = -56;
"@MMK_R_KO_q" = -15;
"@MMK_R_KO_question" = -14;
"@MMK_R_KO_quotedbl" = -2;
"@MMK_R_KO_quotedblleft" = -19;
"@MMK_R_KO_quotedblright" = -37;
"@MMK_R_KO_quoteleft" = -11;
"@MMK_R_KO_quoteright" = -37;
"@MMK_R_KO_quotesingle" = -2;
"@MMK_R_KO_semicolon" = 19;
"@MMK_R_KO_seven" = -62;
"@MMK_R_KO_slash" = -55;
"@MMK_R_KO_underscore" = -158;
"@MMK_R_KO_v" = 23;
"@MMK_R_KO_w" = 25;
"@MMK_R_KO_x" = 9;
"@MMK_R_KO_y" = 21;
"@MMK_R_KO_z" = 20;
};
"@MMK_L_KO_x" = {
"@MMK_R_KO_J" = -7;
"@MMK_R_KO_O" = -8;
"@MMK_R_KO_T" = -55;
"@MMK_R_KO_V" = -21;
"@MMK_R_KO_X" = -19;
"@MMK_R_KO_Y" = -42;
"@MMK_R_KO_Z" = -11;
"@MMK_R_KO_a" = -35;
"@MMK_R_KO_ampersand" = -40;
"@MMK_R_KO_asterisk" = -33;
"@MMK_R_KO_colon" = 10;
"@MMK_R_KO_d" = -36;
"@MMK_R_KO_e" = -38;
"@MMK_R_KO_ellipsis" = -27;
"@MMK_R_KO_endash" = -41;
"@MMK_R_KO_four" = -58;
"@MMK_R_KO_g" = -10;
"@MMK_R_KO_guillemotright" = -6;
"@MMK_R_KO_hyphen" = -2;
"@MMK_R_KO_j" = -37;
"@MMK_R_KO_n" = -6;
"@MMK_R_KO_o" = -44;
"@MMK_R_KO_one" = -4;
"@MMK_R_KO_parenright" = 6;
"@MMK_R_KO_plus" = -99;
"@MMK_R_KO_q" = -38;
"@MMK_R_KO_question" = -12;
"@MMK_R_KO_quotedbl" = -22;
"@MMK_R_KO_quotedblleft" = -31;
"@MMK_R_KO_quotedblright" = -49;
"@MMK_R_KO_quoteleft" = -29;
"@MMK_R_KO_quoteright" = -49;
"@MMK_R_KO_quotesingle" = -22;
"@MMK_R_KO_s" = -13;
"@MMK_R_KO_semicolon" = 18;
"@MMK_R_KO_seven" = -42;
"@MMK_R_KO_slash" = 2;
"@MMK_R_KO_underscore" = -81;
"@MMK_R_KO_v" = 9;
"@MMK_R_KO_w" = 8;
"@MMK_R_KO_x" = 5;
"@MMK_R_KO_y" = 6;
"@MMK_R_KO_z" = 10;
};
"@MMK_L_KO_y" = {
"@MMK_R_KO_A" = -84;
"@MMK_R_KO_J" = -89;
"@MMK_R_KO_O" = -11;
"@MMK_R_KO_T" = -56;
"@MMK_R_KO_V" = -13;
"@MMK_R_KO_X" = -67;
"@MMK_R_KO_Y" = -35;
"@MMK_R_KO_Yacute" = -35;
"@MMK_R_KO_Z" = -27;
"@MMK_R_KO_a" = -21;
"@MMK_R_KO_aacute" = -21;
"@MMK_R_KO_ampersand" = -49;
"@MMK_R_KO_asterisk" = -13;
"@MMK_R_KO_backslash" = 14;
"@MMK_R_KO_braceright" = -21;
"@MMK_R_KO_bracketright" = -15;
"@MMK_R_KO_d" = -21;
"@MMK_R_KO_e" = -22;
"@MMK_R_KO_ellipsis" = -116;
"@MMK_R_KO_endash" = -29;
"@MMK_R_KO_four" = -33;
"@MMK_R_KO_g" = -18;
"@MMK_R_KO_guillemotright" = -19;
"@MMK_R_KO_j" = -46;
"@MMK_R_KO_n" = -26;
"@MMK_R_KO_o" = -25;
"@MMK_R_KO_period" = -67;
"@MMK_R_KO_plus" = -69;
"@MMK_R_KO_q" = -23;
"@MMK_R_KO_question" = -16;
"@MMK_R_KO_quotedbl" = -6;
"@MMK_R_KO_quotedblleft" = -21;
"@MMK_R_KO_quotedblright" = -39;
"@MMK_R_KO_quoteleft" = -16;
"@MMK_R_KO_quoteright" = -39;
"@MMK_R_KO_quotesingle" = -9;
"@MMK_R_KO_s" = -7;
"@MMK_R_KO_semicolon" = 7;
"@MMK_R_KO_seven" = -67;
"@MMK_R_KO_slash" = -74;
"@MMK_R_KO_underscore" = -167;
"@MMK_R_KO_v" = 20;
"@MMK_R_KO_w" = 21;
"@MMK_R_KO_y" = 19;
"@MMK_R_KO_z" = 21;
"@MMK_R_KO_zero" = -7;
};
"@MMK_L_KO_z" = {
"@MMK_R_KO_A" = 3;
"@MMK_R_KO_O" = -6;
"@MMK_R_KO_T" = -43;
"@MMK_R_KO_U" = -11;
"@MMK_R_KO_V" = -29;
"@MMK_R_KO_W" = -12;
"@MMK_R_KO_X" = -5;
"@MMK_R_KO_Y" = -46;
"@MMK_R_KO_a" = -11;
"@MMK_R_KO_aacute" = -11;
"@MMK_R_KO_ampersand" = -9;
"@MMK_R_KO_asterisk" = -11;
"@MMK_R_KO_colon" = 28;
"@MMK_R_KO_d" = -11;
"@MMK_R_KO_dollar" = -2;
"@MMK_R_KO_e" = -11;
"@MMK_R_KO_eight" = -8;
"@MMK_R_KO_ellipsis" = -19;
"@MMK_R_KO_endash" = -13;
"@MMK_R_KO_four" = -16;
"@MMK_R_KO_guillemotright" = -6;
"@MMK_R_KO_j" = -36;
"@MMK_R_KO_l" = -6;
"@MMK_R_KO_n" = -4;
"@MMK_R_KO_o" = -13;
"@MMK_R_KO_one" = -2;
"@MMK_R_KO_plus" = -59;
"@MMK_R_KO_q" = -11;
"@MMK_R_KO_quotedbl" = -18;
"@MMK_R_KO_quotedblleft" = -27;
"@MMK_R_KO_quotedblright" = -42;
"@MMK_R_KO_quoteleft" = -22;
"@MMK_R_KO_quoteright" = -42;
"@MMK_R_KO_quotesingle" = -18;
"@MMK_R_KO_s" = 15;
"@MMK_R_KO_semicolon" = 35;
"@MMK_R_KO_seven" = -34;
"@MMK_R_KO_slash" = 7;
"@MMK_R_KO_u" = -7;
"@MMK_R_KO_underscore" = -79;
"@MMK_R_KO_w" = 9;
"@MMK_R_KO_z" = 10;
};
"@MMK_L_KO_zero" = {
"@MMK_R_KO_A" = -14;
"@MMK_R_KO_J" = -30;
"@MMK_R_KO_O" = 17;
"@MMK_R_KO_S" = 9;
"@MMK_R_KO_T" = -23;
"@MMK_R_KO_U" = 8;
"@MMK_R_KO_V" = -13;
"@MMK_R_KO_X" = -42;
"@MMK_R_KO_Y" = -20;
"@MMK_R_KO_Yacute" = -20;
"@MMK_R_KO_Z" = -2;
"@MMK_R_KO_ampersand" = -2;
"@MMK_R_KO_asterisk" = -20;
"@MMK_R_KO_braceright" = -15;
"@MMK_R_KO_bracketright" = -17;
"@MMK_R_KO_comma" = -22;
"@MMK_R_KO_dollar" = 3;
"@MMK_R_KO_eight" = 2;
"@MMK_R_KO_ellipsis" = -64;
"@MMK_R_KO_endash" = -2;
"@MMK_R_KO_four" = 23;
"@MMK_R_KO_guillemotright" = -19;
"@MMK_R_KO_h" = -2;
"@MMK_R_KO_hyphen" = 14;
"@MMK_R_KO_idotless" = -3;
"@MMK_R_KO_j" = -63;
"@MMK_R_KO_l" = -2;
"@MMK_R_KO_n" = -8;
"@MMK_R_KO_nine" = 14;
"@MMK_R_KO_p" = -3;
"@MMK_R_KO_parenright" = 15;
"@MMK_R_KO_period" = -34;
"@MMK_R_KO_plus" = -39;
"@MMK_R_KO_quotedbl" = -13;
"@MMK_R_KO_quotedblleft" = -22;
"@MMK_R_KO_quotedblright" = -23;
"@MMK_R_KO_quoteleft" = -20;
"@MMK_R_KO_quoteright" = -23;
"@MMK_R_KO_quotesingle" = -13;
"@MMK_R_KO_s" = 7;
"@MMK_R_KO_semicolon" = 2;
"@MMK_R_KO_seven" = -24;
"@MMK_R_KO_six" = 24;
"@MMK_R_KO_slash" = -31;
"@MMK_R_KO_two" = 6;
"@MMK_R_KO_underscore" = -170;
"@MMK_R_KO_v" = -8;
"@MMK_R_KO_y" = -7;
"@MMK_R_KO_zero" = 20;
};
A = {
Cacute = -16;
Ccaron = -16;
Ccedilla = -16;
Cdotaccent = -16;
Gbreve = -16;
Gcommaaccent = -16;
Gdotaccent = -16;
Tcaron = -81;
Tcommaaccent = -81;
Thorn = 12;
Udieresis = -17;
Wcircumflex = -39;
Ycircumflex = -94;
Ydieresis = -94;
Ydotbelow = -94;
Zacute = 12;
Zcaron = 12;
Zdotaccent = 12;
bulletoperator = -93;
ccaron = -17;
ccedilla = -17;
edieresis = -17;
eth = -15;
ordmasculine = -99;
r = -6;
scaron = -5;
scedilla = -3;
scommaaccent = -5;
tcaron = -73;
tcommaaccent = -73;
trademark = -116;
udieresis = -25;
ycircumflex = -81;
ydieresis = -81;
};
AE = {
Eth = 26;
T = 9;
d = -24;
eth = -11;
f = -21;
g = -24;
l = -8;
n = -21;
o = -24;
parenright = 65;
r = -24;
t = -21;
};
Aacute = {
Ccaron = -16;
Tcaron = -81;
Zcaron = 12;
ae = -18;
eth = -15;
r = -6;
};
Abreve = {
Tcommaaccent = -81;
};
Acircumflex = {
Tcommaaccent = -81;
Ydotbelow = -92;
};
Adieresis = {
A = 17;
Adieresis = 17;
C = -16;
Ccaron = -16;
G = -16;
O = -16;
Q = -16;
T = -81;
Tcaron = -81;
U = -17;
V = -100;
W = -39;
Y = -92;
Yacute = -92;
Z = 12;
adieresis = -18;
c = -20;
comma = 15;
d = -18;
e = -20;
f = -47;
j = -18;
l = -10;
o = -22;
q = -17;
quotedbl = -83;
quotedblleft = -100;
quotedblright = -94;
quoteright = -94;
quotesingle = -83;
r = -6;
s = -6;
t = -73;
u = -25;
v = -77;
w = -65;
y = -81;
};
Agrave = {
r = -6;
};
Amacron = {
C = -16;
G = -16;
T = -81;
V = -102;
W = -39;
Y = -93;
Z = 12;
c = -21;
comma = 15;
d = -18;
f = -47;
l = -10;
quotedbl = -83;
quotedblleft = -100;
quotedblright = -96;
quoteleft = -96;
quoteright = -96;
quotesingle = -83;
r = -6;
t = -73;
v = -77;
w = -65;
y = -81;
};
Aogonek = {
C = -15;
Cacute = -15;
G = -16;
T = -81;
V = -103;
W = -39;
Y = -94;
Z = 17;
Zcaron = 17;
Zdotaccent = 17;
aogonek = -18;
comma = 144;
parenright = 69;
period = 15;
quotedbl = -83;
quotedblleft = -100;
quotedblright = -97;
quoteleft = -96;
v = -77;
};
Aring = {
G = -16;
T = -81;
Tcaron = -81;
V = -103;
W = -39;
Y = -94;
aring = -18;
comma = 15;
d = -18;
f = -47;
l = -10;
quotedbl = -83;
quotedblleft = -100;
quotedblright = -96;
quoteleft = -96;
quoteright = -96;
quotesingle = -83;
r = -6;
s = -6;
t = -73;
v = -77;
y = -81;
};
B = {
AE = -11;
Hbar = 36;
Lslash = 18;
Scaron = 16;
Scedilla = 16;
Tcommaaccent = -17;
hbar = 19;
idieresis = 30;
ihookabove = -5;
lslash = 26;
trademark = -27;
};
C = {
AE = -33;
Aogonek = -13;
Tcaron = -27;
Tcommaaccent = -27;
adieresis = -11;
ae = -14;
emacron = -11;
odieresis = -11;
oe = -11;
trademark = -34;
ucircumflex = -21;
udieresis = -21;
umacron = -21;
};
Cacute = {
A = -13;
a = -11;
comma = -20;
e = -11;
ecaron = -11;
hyphen = 11;
i = -13;
m = -24;
o = -11;
period = -26;
quotedblright = -27;
u = -23;
};
Ccaron = {
A = -13;
E = -4;
J = -26;
T = -27;
V = -13;
Y = -30;
a = -11;
aacute = -11;
amacron = -11;
comma = -20;
e = -11;
ecaron = -11;
hyphen = 11;
i = -13;
iacute = -15;
j = -76;
l = -15;
o = -11;
period = -26;
r = -28;
t = -16;
u = -23;
};
Ccedilla = {
A = -13;
Atilde = -13;
T = -27;
X = -39;
Y = -30;
Yacute = -30;
a = -11;
c = -11;
d = -11;
e = -11;
ecircumflex = -11;
edieresis = -11;
f = -16;
h = -15;
i = -13;
idotless = -20;
j = -76;
l = -15;
m = -24;
o = -11;
odieresis = -11;
ograve = -11;
p = -18;
period = -26;
t = -16;
u = -23;
ucircumflex = -21;
udieresis = -19;
};
Cdotaccent = {
A = -13;
Hbar = 34;
J = -26;
a = -11;
e = -11;
i = -13;
r = -28;
};
D = {
AE = -32;
Adieresis = -18;
Amacron = -18;
Aogonek = -18;
Aring = -18;
Ccaron = 15;
Hbar = 29;
Lslash = 46;
Odieresis = 15;
Ohungarumlaut = 15;
Oslash = 15;
Ycircumflex = -27;
Zacute = -7;
Zcaron = -7;
ae = -15;
lslash = 53;
parenright = -2;
r = -15;
trademark = -46;
ycircumflex = -12;
};
Dcaron = {
A = -18;
O = 15;
T = -29;
hyphen = 12;
j = -68;
period = -40;
};
Dcroat = {
Dcroat = 34;
ihookabove = -6;
};
E = {
Dcroat = 26;
Eth = 26;
Hbar = 32;
Lslash = 29;
Tcaron = 9;
Tcommaaccent = 9;
X = 0;
Zcaron = 8;
ccedilla = -23;
gbreve = -18;
gdotaccent = -22;
germandbls = -25;
idieresis = 54;
lslash = 28;
ntilde = -13;
odieresis = -16;
};
Eacute = {
Eth = 26;
Lslash = 29;
};
Ecaron = {
Lslash = 29;
T = 9;
W = 19;
parenright = 65;
};
Edieresis = {
T = 9;
W = 19;
d = -24;
f = -21;
l = -8;
m = -21;
n = -21;
parenright = 65;
r = -24;
t = -21;
};
Edotaccent = {
T = 9;
d = -24;
g = -24;
j = -31;
m = -21;
n = -21;
parenright = 65;
r = -24;
};
Egrave = {
ccedilla = -23;
};
Emacron = {
T = 9;
a = -24;
d = -24;
emacron = -20;
g = -24;
gcommaaccent = -24;
n = -21;
o = -24;
parenright = 65;
r = -24;
t = -21;
};
Eogonek = {
Lslash = 29;
T = 9;
comma = 90;
eogonek = -19;
parenright = 78;
};
Eth = {
A = -19;
AE = -33;
G = 13;
J = -38;
T = -30;
V = -17;
comma = -30;
hyphen = 10;
period = -41;
};
F = {
AE = -68;
Adieresis = -48;
Amacron = -48;
Aogonek = -48;
Aring = -48;
Eth = 30;
Odieresis = -5;
adieresis = -14;
ae = -31;
amacron = -15;
aring = -16;
edieresis = -14;
edotaccent = -16;
emacron = -15;
icircumflex = 43;
idieresis = 65;
imacron = 30;
odieresis = -14;
ohungarumlaut = -15;
oslash = -20;
ucircumflex = -22;
udieresis = -22;
umacron = -22;
};
G = {
AE = -19;
Adieresis = -10;
Amacron = -10;
Aogonek = -10;
Aring = -10;
Eth = 27;
Hbar = 32;
Lslash = 29;
Odieresis = 9;
ae = -14;
aring = -8;
edotaccent = -10;
lslash = 34;
trademark = -38;
ucircumflex = -12;
wcircumflex = -7;
};
Gbreve = {
A = -10;
T = -29;
a = -8;
e = -10;
};
Gcommaaccent = {
A = -10;
e = -10;
};
Gdotaccent = {
J = -25;
T = -29;
a = -8;
d = -9;
e = -10;
j = -73;
n = -12;
o = -10;
r = -15;
u = -12;
w = -7;
};
Germandbls = {
S = 14;
T = -20;
comma = -9;
period = -17;
};
H = {
E = 0;
Lslash = 22;
adieresis = -4;
ae = -14;
aring = -7;
colon = 0;
i = 4;
icircumflex = 25;
imacron = 20;
lslash = 38;
m = -15;
odieresis = -5;
oslash = -7;
period = 0;
quotesingle = 0;
ucircumflex = -11;
udieresis = -8;
};
Hbar = {
B = 32;
D = 32;
E = 32;
Gdotaccent = 29;
H = 32;
Hbar = 102;
I = 32;
L = 32;
M = 31;
N = 31;
O = 29;
Q = 29;
R = 32;
S = 48;
T = 35;
U = 41;
W = 63;
Zdotaccent = 35;
b = 29;
i = 30;
l = 28;
parenright = 70;
quotesingle = 37;
u = 10;
w = 35;
};
I = {
Hbar = 32;
Lslash = 22;
Thorn = 13;
lslash = 38;
m = -15;
n = -16;
ncaron = -12;
ntilde = -10;
};
Iacute = {
Thorn = 13;
ntilde = -10;
};
Icircumflex = {
m = -15;
n = -16;
parenright = 74;
r = -21;
t = -9;
};
Idieresis = {
idieresis = 66;
parenright = 78;
};
Idotaccent = {
c = -11;
ccedilla = -7;
d = -7;
m = -15;
n = -16;
o = -14;
parenright = 52;
r = -21;
t = -9;
};
Idotbelow = {
comma = 98;
};
Imacron = {
j = -46;
parenright = 68;
r = -21;
t = -9;
};
Iogonek = {
comma = 98;
m = -14;
parenright = 59;
r = -20;
t = -9;
};
J = {
A = -16;
AE = -23;
Aacute = -16;
Acircumflex = -16;
Adieresis = -16;
Agrave = -16;
Amacron = -16;
Aogonek = -16;
Aring = -16;
Atilde = -16;
Hbar = 32;
J = -29;
a = -14;
aacute = -13;
adieresis = -7;
ae = -16;
amacron = -7;
aogonek = -14;
comma = -21;
e = -14;
eogonek = -14;
icircumflex = 25;
imacron = 17;
j = -71;
odieresis = -7;
oslash = -11;
period = -35;
r = -30;
slash = -37;
u = -21;
ucircumflex = -16;
udieresis = -14;
umacron = -16;
uogonek = -21;
y = -10;
};
K = {
Cacute = -28;
Ccaron = -28;
Ccedilla = -28;
OE = -29;
Odieresis = -29;
Ohungarumlaut = -29;
Scaron = -8;
Ydotbelow = -15;
Zcaron = 15;
Zdotaccent = 15;
adieresis = -30;
ae = -26;
amacron = -30;
aogonek = -31;
aring = -31;
bulletoperator = -121;
cacute = -32;
ccaron = -30;
e = -36;
edieresis = -29;
edotaccent = -31;
emacron = -29;
eogonek = -31;
idieresis = 52;
imacron = 27;
odieresis = -33;
oe = -38;
ohungarumlaut = -33;
r = -6;
rcaron = -6;
ucircumflex = -41;
udieresis = -40;
umacron = -40;
uring = -41;
ydieresis = -46;
ygrave = -54;
};
Kcommaaccent = {
O = -29;
a = -31;
e = -31;
emacron = -29;
imacron = 27;
o = -34;
u = -41;
umacron = -40;
};
L = {
Ccaron = -41;
Ccedilla = -41;
Gbreve = -42;
Gdotaccent = -42;
Idotaccent = -13;
OE = -42;
Odieresis = -42;
Ohungarumlaut = -42;
Scaron = -19;
Scedilla = -19;
Scommaaccent = -19;
Tcaron = -102;
Tcommaaccent = -102;
Ucircumflex = -38;
Udieresis = -38;
Uhungarumlaut = -38;
Umacron = -38;
Uogonek = -38;
Uring = -38;
Wcircumflex = -52;
Ycircumflex = -112;
Ydieresis = -112;
Ydotbelow = -112;
adieresis = -14;
ae = -6;
amacron = -14;
aogonek = -14;
aring = -14;
bulletoperator = -175;
ecaron = -14;
edieresis = -14;
edotaccent = -14;
emacron = -14;
icircumflex = -18;
imacron = -18;
odieresis = -15;
ohungarumlaut = -15;
ordfeminine = -205;
ordmasculine = -205;
oslash = -5;
trademark = -148;
ucircumflex = -23;
udieresis = -23;
umacron = -23;
uring = -23;
ycircumflex = -86;
ydieresis = -86;
};
Lacute = {
T = -101;
V = -94;
};
Lcaron = {
Ccaron = -41;
O = -42;
S = -19;
Scaron = -19;
T = -101;
U = -38;
Uacute = -38;
V = -94;
a = -14;
quotedbl = -149;
quotedblleft = -179;
quoteleft = -168;
quotesingle = -132;
u = -23;
uacute = -23;
v = -79;
w = -62;
};
Lcommaaccent = {
C = -41;
G = -42;
Gcommaaccent = -42;
J = 20;
O = -42;
S = -19;
Scaron = -19;
T = -102;
U = -38;
Umacron = -38;
V = -94;
Y = -112;
a = -14;
e = -14;
i = -15;
o = -15;
quotedbl = -187;
quotedblleft = -204;
quotedblright = -206;
quotesingle = -132;
u = -23;
umacron = -23;
v = -79;
};
Lslash = {
A = 13;
Aogonek = 13;
C = -33;
G = -34;
O = -34;
Oacute = -34;
Ocircumflex = -34;
Ograve = -34;
S = -17;
T = -97;
U = -34;
Uring = -34;
W = -48;
Y = -108;
Ydieresis = -108;
a = -11;
aacute = -11;
aogonek = -11;
comma = 20;
e = -11;
eogonek = -11;
i = -11;
o = -11;
oacute = -11;
period = 16;
quotedbl = -136;
quotedblleft = -152;
quotedblright = -157;
quoteleft = -148;
quoteright = -157;
quotesingle = -132;
u = -19;
uring = -19;
y = -84;
ydieresis = -84;
};
M = {
Hbar = 31;
Lslash = 22;
T = -6;
Thorn = 13;
W = 0;
Y = -9;
Ytilde = -9;
adieresis = -4;
ae = -14;
amacron = -7;
aring = -7;
eacute = -7;
ecaron = -7;
edieresis = -4;
emacron = -7;
idieresis = 31;
imacron = 15;
lslash = 38;
odieresis = -7;
ordfeminine = -24;
oslash = -7;
parenright = 28;
quotedbl = -11;
quotesingle = -11;
racute = -19;
ucircumflex = -11;
udieresis = -9;
uhungarumlaut = -11;
umacron = -12;
uring = -14;
};
M.ss01 = {
T = -17;
V = -15;
Y = -21;
Ytilde = -21;
lslash = 39;
parenright = 17;
quotedbl = -24;
quotesingle = -24;
udieresis = -11;
};
N = {
A = -2;
AE = -10;
Atilde = -2;
Hbar = 32;
Thorn = 13;
adieresis = -4;
ae = -14;
amacron = -6;
aring = -7;
ecaron = -7;
edieresis = -4;
i = 3;
icircumflex = 25;
idieresis = 43;
imacron = 19;
j = -62;
odieresis = -6;
oe = -13;
ordmasculine = -23;
oslash = -9;
ucircumflex = -11;
udieresis = -8;
};
N.ss01 = {
T = -25;
Tcommaaccent = -25;
V = -18;
Y = -26;
ae = -14;
parenright = 13;
quotedbl = -26;
quotesingle = -26;
udieresis = -12;
};
Nacute = {
d = -7;
j = -62;
n = -18;
nacute = -18;
parenright = 45;
};
Ncaron = {
parenright = 45;
};
Ncommaaccent = {
e = -10;
u = -16;
umacron = -11;
};
Ntilde = {
A = -2;
J = -9;
a = -7;
e = -10;
o = -13;
parenright = 45;
u = -16;
};
O = {
AE = -30;
Cacute = 14;
Ccaron = 14;
Ccedilla = 14;
Cdotaccent = 14;
Dcroat = 35;
Eth = 35;
Gbreve = 14;
Gcommaaccent = 14;
Gdotaccent = 14;
Hbar = 29;
Lslash = 45;
Tcaron = -28;
Tcommaaccent = -28;
V = 0;
X = 0;
Ydieresis = -25;
Zcaron = -6;
Zdotaccent = -6;
germandbls = -18;
lslash = 54;
r = -15;
trademark = -46;
};
OE = {
c = -23;
d = -24;
n = -21;
parenright = 65;
t = -21;
u = -28;
udieresis = -18;
};
Oacute = {
Eth = 35;
Lslash = 45;
Zacute = -6;
};
Ocircumflex = {
Lslash = 45;
};
Odieresis = {
A = -17;
Adieresis = -17;
C = 14;
Ccedilla = 14;
Eth = 35;
G = 14;
Gbreve = 14;
J = -35;
Odieresis = 14;
T = -28;
V = -15;
X = -52;
Y = -25;
Yacute = -25;
Z = -6;
b = -5;
comma = -22;
hyphen = 11;
j = -67;
k = -5;
l = -5;
m = -11;
n = -11;
p = -9;
period = -39;
r = -15;
slash = -37;
underscore = -179;
v = -11;
y = -11;
};
Ograve = {
Lslash = 45;
};
Ohorn = {
parenright = 49;
};
Ohornacute = {
T = -5;
};
Ohorndotbelow = {
T = -5;
};
Ohorngrave = {
parenright = 49;
};
Ohungarumlaut = {
A = -17;
Aacute = -17;
G = 14;
J = -35;
T = -28;
V = -15;
comma = -22;
hyphen = 11;
k = -5;
period = -39;
r = -15;
};
Oslash = {
Eth = 35;
G = 14;
J = -35;
hyphen = 11;
j = -63;
n = -11;
period = -39;
r = -15;
v = -12;
y = -11;
};
P = {
AE = -78;
Adieresis = -45;
Amacron = -45;
Aogonek = -45;
Aring = -45;
Cacute = 20;
Ccaron = 20;
Ccedilla = 20;
Lslash = 49;
Odieresis = 19;
Ohungarumlaut = 19;
Oslash = 19;
Sacute = 19;
Scaron = 19;
Scedilla = 19;
Ucircumflex = 19;
Udieresis = 19;
Umacron = 19;
Uogonek = 19;
Uring = 19;
Wcircumflex = 28;
adieresis = -14;
ae = -42;
amacron = -15;
aring = -15;
ecaron = -16;
edieresis = -15;
edotaccent = -16;
emacron = -16;
icircumflex = 24;
idieresis = 34;
imacron = 11;
lslash = 57;
odieresis = -17;
rcaron = -25;
udieresis = -7;
uring = -7;
};
Q = {
Dcroat = 35;
trademark = -46;
};
R = {
Adieresis = 15;
Amacron = 15;
Aogonek = 15;
Aring = 15;
Dcroat = 22;
Eth = 22;
Hbar = 49;
Lslash = 27;
Scaron = 14;
Scedilla = 14;
Scommaaccent = 14;
Tcaron = -12;
Tcommaaccent = -12;
Thorn = 17;
W = 0;
Wcircumflex = 11;
Zcaron = 19;
Zdotaccent = 19;
idieresis = 37;
};
Racute = {
Scaron = 14;
T = -12;
};
Rcaron = {
A = 15;
Aacute = 15;
S = 14;
rcaron = -15;
};
S = {
AE = -12;
Hbar = 39;
I = 0;
Lslash = 16;
Tcaron = -22;
Tcommaaccent = -22;
W = 0;
ae = -9;
aogonek = -9;
aring = -9;
atilde = 0;
edotaccent = -11;
idieresis = 25;
lslash = 21;
oe = -11;
trademark = -28;
u = -14;
ucircumflex = -10;
};
Sacute = {
c = -11;
e = -11;
l = -5;
m = -10;
n = -11;
p = -13;
r = -15;
};
Scaron = {
J = -13;
T = -22;
Tcaron = -22;
V = -9;
Y = -24;
a = -9;
cacute = -11;
e = -11;
edotaccent = -11;
hyphen = 13;
j = -71;
k = -3;
l = -5;
m = -10;
o = -11;
p = -13;
r = -15;
t = -15;
tcaron = -15;
u = -12;
};
Scedilla = {
T = -22;
X = -24;
Y = -24;
Yacute = -24;
a = -9;
comma = 24;
e = -11;
hyphen = 13;
idotless = -14;
o = -11;
parenright = 22;
r = -14;
t = -15;
u = -10;
};
Scommaaccent = {
T = -22;
a = -9;
c = -11;
e = -11;
hyphen = 13;
o = -11;
t = -15;
u = -10;
};
T = {
AE = -96;
Adieresis = -83;
Amacron = -83;
Aogonek = -83;
Aring = -83;
Ccaron = -27;
Ccedilla = -27;
Hbar = 35;
M.ss01 = -18;
N.ss01 = -25;
OE = -28;
Odieresis = -28;
Ohungarumlaut = -28;
Oslash = -28;
Wcircumflex = 27;
Wdieresis = 27;
Ycircumflex = 18;
Z = 0;
a = -92;
aacute = -92;
adieresis = -49;
adotbelow = -92;
ae = -61;
amacron = -78;
aogonek = -92;
aring = -84;
c = -95;
ccaron = -67;
ccedilla = -95;
e = -95;
eacute = -95;
ecaron = -70;
edieresis = -41;
edotaccent = -90;
edotbelow = -95;
emacron = -75;
eogonek = -95;
hbar = 38;
icircumflex = 46;
idieresis = 78;
imacron = 35;
oacute = -97;
odieresis = -50;
odotbelow = -97;
oe = -97;
ohungarumlaut = -77;
oslash = -98;
racute = -84;
rcaron = -21;
sacute = -57;
scaron = -25;
scedilla = -60;
ucircumflex = -40;
udieresis = -26;
uhorngrave = -38;
uhungarumlaut = -38;
umacron = -41;
uogonek = -55;
uring = -53;
wcircumflex = -51;
ycircumflex = -28;
yhookabove = -42;
};
Tcaron = {
A = -83;
Aacute = -83;
Aring = -83;
J = -90;
O = -28;
T = 38;
a = -92;
comma = -82;
ellipsis = -147;
hyphen = -59;
o = -97;
period = -89;
slash = -100;
u = -55;
};
Tcommaaccent = {
A = -83;
Abreve = -83;
Acircumflex = -83;
C = -27;
O = -28;
a = -92;
aacute = -92;
abreve = -76;
acircumflex = -71;
comma = -42;
e = -95;
hyphen = -59;
icircumflex = 46;
o = -97;
period = -86;
slash = -100;
u = -55;
v = -54;
};
Thorn = {
A = -22;
AE = -44;
Aacute = -22;
J = -53;
O = 25;
Oacute = 25;
Odieresis = 25;
V = -18;
Y = -47;
Yacute = -47;
ae = -22;
e = -3;
j = -61;
o = -4;
oacute = -4;
period = -60;
r = -17;
v = -11;
y = -14;
yacute = -14;
};
U = {
AE = -27;
Adieresis = -17;
Amacron = -17;
Dcroat = 21;
Eth = 21;
Hbar = 41;
Lslash = 32;
Thorn = 15;
germandbls = -15;
hbar = 24;
lslash = 48;
nacute = -21;
ntilde = -17;
r = -26;
};
Uacute = {
Eth = 21;
rcaron = -18;
};
Ucircumflex = {
A = -17;
J = -33;
m = -21;
n = -21;
parenright = 47;
period = -37;
r = -26;
};
Udieresis = {
A = -17;
J = -33;
L = 3;
R = 3;
Udieresis = 10;
V = 9;
W = 23;
X = -16;
ccedilla = -7;
comma = -20;
m = -21;
n = -21;
p = -15;
parenright = 48;
period = -37;
r = -26;
udieresis = -7;
};
Ugrave = {
lslash = 48;
};
Uhungarumlaut = {
J = -33;
V = 9;
comma = -20;
parenright = 50;
period = -37;
r = -26;
};
Umacron = {
J = -33;
V = 9;
d = -7;
m = -21;
n = -21;
parenright = 46;
period = -37;
r = -26;
};
Uogonek = {
J = -33;
comma = 22;
parenright = 50;
period = -37;
quotedblleft = -21;
};
Uring = {
J = -33;
Lslash = 32;
V = 9;
comma = -20;
n = -21;
nacute = -21;
parenright = 46;
period = -37;
r = -26;
uring = -12;
};
V = {
AE = -117;
Adieresis = -106;
Amacron = -109;
Aogonek = -110;
Aring = -110;
Ccaron = -17;
Gcommaaccent = -17;
M.ss01 = -16;
N.ss01 = -19;
OE = -17;
Odieresis = -17;
Ohungarumlaut = -17;
Oslash = -17;
Udieresis = 9;
Uhungarumlaut = 9;
Uogonek = 9;
Uring = 9;
abrevetilde = -69;
adieresis = -44;
ae = -80;
amacron = -72;
aring = -74;
ccaron = -54;
dcaron = -75;
ecaron = -57;
edieresis = -36;
edotaccent = -76;
egrave = -52;
emacron = -70;
gdotaccent = -73;
icircumflex = 30;
idieresis = 74;
imacron = 39;
odieresis = -45;
oe = -77;
oslash = -79;
racute = -84;
udieresis = -33;
uring = -38;
zcaron = -14;
};
W = {
A = 0;
AE = -49;
Adieresis = -39;
Amacron = -39;
Aogonek = -39;
Aring = -39;
Edieresis = 14;
Eogonek = 14;
Hbar = 63;
Lslash = 29;
Ucircumflex = 23;
Udieresis = 23;
W = 0;
Ycircumflex = 29;
adieresis = -23;
ae = -48;
amacron = -25;
aogonek = -28;
aring = -28;
ecaron = -28;
edieresis = -24;
emacron = -26;
eogonek = -29;
icircumflex = 48;
idieresis = 81;
imacron = 46;
lslash = 29;
odieresis = -25;
oe = -30;
udieresis = -4;
};
Wcircumflex = {
A = -39;
P = 14;
R = 14;
Y = 29;
a = -28;
c = -29;
o = -30;
r = -49;
};
X = {
Ccaron = -48;
Ccedilla = -48;
Odieresis = -49;
Scedilla = -21;
adieresis = -62;
amacron = -65;
edieresis = -61;
imacron = 21;
odieresis = -66;
ucircumflex = -73;
udieresis = -63;
};
Y = {
AE = -108;
Adieresis = -97;
Amacron = -98;
Aogonek = -99;
Aring = -99;
C = -25;
Cacute = -25;
Ccaron = -25;
Ccedilla = -25;
Gbreve = -26;
M.ss01 = -22;
N = -4;
N.ss01 = -27;
Odieresis = -26;
Ohungarumlaut = -26;
Sacute = -11;
Scaron = -11;
Tcaron = 17;
Zcaron = -9;
Zdotaccent = -9;
adieresis = -39;
agrave = -54;
amacron = -75;
aogonek = -100;
aring = -96;
ccaron = -50;
ccedilla = -103;
ecaron = -53;
ecircumflex = -79;
ecircumflexacute = -80;
edieresis = -38;
egrave = -50;
emacron = -68;
etilde = -60;
idieresis = 74;
imacron = 42;
ntilde = -58;
odieresis = -41;
oe = -105;
ograve = -55;
oslash = -107;
scedilla = -76;
ucircumflex = -56;
udieresis = -32;
umacron = -56;
};
Yacute = {
Adieresis = -97;
Ccaron = -25;
Ccedilla = -25;
Odieresis = -26;
Scaron = -11;
odieresis = -41;
udieresis = -32;
};
Ycircumflex = {
A = -99;
Amacron = -98;
N.ss01 = -27;
a = -100;
comma = -97;
d = -100;
imacron = 46;
o = -105;
period = -105;
quotesingle = 24;
u = -56;
};
Ydieresis = {
A = -99;
Agrave = -99;
Aring = -99;
C = -25;
comma = -97;
e = -102;
hyphen = -61;
n = -106;
period = -105;
r = -108;
slash = -114;
};
Ydotbelow = {
comma = -61;
};
Z = {
E = 0;
Odieresis = -10;
Ohungarumlaut = -10;
Z = 0;
adieresis = -22;
amacron = -24;
aogonek = -28;
bulletoperator = -107;
edieresis = -21;
emacron = -25;
icircumflex = 38;
imacron = 32;
odieresis = -24;
oe = -28;
rcaron = -21;
ucircumflex = -23;
udieresis = -18;
uring = -23;
};
Zacute = {
W = 21;
e = -27;
ecaron = -25;
hyphen = -13;
o = -28;
r = -31;
};
Zcaron = {
O = -10;
a = -28;
aacute = -28;
aogonek = -28;
d = -28;
dcaron = -28;
e = -27;
edotaccent = -25;
g = -28;
hyphen = -13;
imacron = 33;
l = -9;
m = -27;
n = -27;
o = -28;
oacute = -28;
parenright = 39;
r = -31;
u = -26;
};
Zdotaccent = {
O = -10;
W = 21;
a = -28;
aogonek = -28;
e = -27;
edieresis = -21;
g = -28;
m = -27;
n = -27;
o = -28;
oacute = -28;
u = -26;
};
a = {
adieresis = -8;
ae = -10;
bulletoperator = -56;
cacute = -9;
ccaron = -9;
ccedilla = -9;
cdotaccent = -9;
dcaron = -8;
edieresis = -9;
edotaccent = -9;
emacron = -9;
eth = -10;
gbreve = -8;
gcommaaccent = -8;
gdotaccent = -8;
germandbls = -10;
lslash = 43;
nacute = -14;
ncaron = -14;
ncommaaccent = -14;
ntilde = -14;
odieresis = -10;
parenright = 0;
quotedbl = 0;
quotedblright = -51;
quoteright = -51;
quotesingle = -34;
r = -20;
racute = -20;
rcaron = -20;
t = -12;
tcaron = -12;
tcommaaccent = -11;
trademark = -56;
udieresis = -14;
};
aacute = {
ae = -10;
ccaron = -9;
dcaron = -7;
eth = -10;
f = -2;
lslash = 46;
ncaron = -14;
ntilde = -14;
r = -20;
rcaron = -20;
tcaron = -9;
};
abreve = {
tcommaaccent = -9;
};
acircumflex = {
gbreve = -8;
tcommaaccent = -9;
};
adieresis = {
a = -8;
adieresis = -6;
c = -9;
ccaron = -9;
ccedilla = -9;
d = -7;
e = -9;
f = -2;
g = -8;
germandbls = -10;
j = -58;
m = -14;
n = -14;
o = -10;
odieresis = -10;
parenright = 14;
q = -7;
quotedbl = -18;
quotedblright = -30;
quoteright = -30;
r = -20;
t = -9;
tcaron = -9;
u = -14;
};
adotbelow = {
comma = 25;
};
ae = {
b = -6;
f = -15;
hyphen = 21;
j = -56;
k = -6;
l = -7;
p = -6;
period = -10;
quotedbl = -46;
quotedblleft = -55;
quotedblright = -62;
r = -9;
s = 15;
t = -16;
v = -18;
x = -35;
};
agrave = {
lslash = 44;
};
amacron = {
a = -8;
c = -9;
ccaron = -9;
d = -7;
g = -8;
gcommaaccent = -8;
guillemetright = -19;
j = -58;
m = -14;
n = -14;
ncommaaccent = -14;
o = -10;
parenright = 9;
quotedbl = -18;
quotedblleft = -34;
quotedblright = -33;
quoteright = -33;
quotesingle = -18;
r = -20;
t = -10;
u = -14;
};
ampersand = {
edieresis = -59;
};
aogonek = {
aogonek = -6;
c = -9;
cacute = -9;
comma = 111;
d = -7;
j = -36;
lslash = 44;
parenright = 38;
period = 10;
quotedbl = -34;
quotedblleft = -41;
quotedblright = -51;
quoteleft = -39;
r = -20;
t = -11;
};
aring = {
c = -9;
d = -7;
e = -9;
g = -8;
j = -58;
m = -14;
n = -14;
o = -10;
quotedbl = -27;
quotedblleft = -34;
quotedblright = -46;
quoteright = -46;
r = -20;
t = -9;
};
atilde = {
lslash = 46;
};
b = {
acircumflexacute = 2;
adieresis = 5;
ae = -4;
amacron = 5;
aogonek = 5;
aring = 5;
ccaron = 5;
ecaron = 5;
edieresis = 5;
edotaccent = 5;
emacron = 5;
eogonek = 5;
icircumflex = -5;
imacron = -5;
lcaron = -8;
lcommaaccent = -8;
lslash = 45;
odieresis = 5;
oe = 5;
ohungarumlaut = 5;
oslash = 4;
r = -10;
rcaron = -10;
scaron = 10;
scedilla = 11;
scommaaccent = 10;
tcommaaccent = -13;
trademark = -97;
ucircumflex = -4;
udieresis = -4;
umacron = -4;
uogonek = -4;
wcircumflex = -14;
};
bulletoperator = {
A = -95;
T = -131;
V = -93;
X = -157;
Z = -98;
h = -56;
l = -56;
one = -76;
t = -52;
x = -83;
};
c = {
l = 0;
lslash = 45;
m = -6;
r = -9;
scommaaccent = 12;
tcommaaccent = -5;
trademark = -87;
ucircumflex = -6;
udieresis = -6;
umacron = -6;
uring = -6;
};
cacute = {
hyphen = 32;
j = -48;
n = -6;
parenright = 19;
question = -33;
quotedbl = -12;
quotedblleft = -26;
quotedblright = -27;
quoteright = -27;
u = -6;
w = -9;
y = -16;
};
ccaron = {
hyphen = 32;
iacute = -4;
j = -48;
k = -2;
l = -6;
lslash = 45;
m = -6;
n = -6;
ncaron = -6;
parenright = 17;
quotedblleft = -26;
r = -9;
s = 13;
scaron = 14;
t = -5;
u = -6;
uring = -6;
v = -14;
y = -16;
};
ccedilla = {
comma = 53;
hyphen = 32;
idotless = -4;
j = -48;
k = -4;
l = -6;
m = -6;
quotedbl = -37;
quotedblleft = -45;
quotedblright = -55;
quoteright = -55;
quotesingle = -37;
r = -9;
s = 13;
t = -5;
u = -6;
ucircumflex = -6;
udieresis = -6;
y = -16;
yacute = -16;
};
cdotaccent = {
hyphen = 32;
j = -48;
l = -6;
u = -6;
};
cent = {
seven = -69;
};
comma = {
asterisk = -138;
emdash = -42;
four = -22;
nine = -13;
one = -84;
parenright = 82;
quotedbl = -138;
quotedblleft = -138;
quotedblright = -138;
quoteleft = -138;
quoteright = -138;
quotesingle = -132;
seven = -58;
six = -16;
three = -10;
zero = -23;
};
d = {
acircumflextilde = 0;
ae = -10;
aogonek = -5;
aring = -5;
ccaron = -9;
ccedilla = -9;
ecaron = -9;
ecircumflex = 0;
ecircumflextilde = 0;
edotaccent = -9;
emacron = -8;
eogonek = -9;
idieresis = 16;
lslash = 51;
ncaron = -12;
ncommaaccent = -13;
odieresis = -5;
oe = -10;
ohungarumlaut = -7;
r = -19;
racute = -18;
rcaron = -17;
ucircumflex = -11;
udieresis = -11;
uhungarumlaut = -11;
umacron = -12;
uogonek = -13;
uring = -13;
};
dcaron = {
C = 105;
H = 133;
a = 43;
aacute = 43;
bracketright = 158;
c = 38;
colon = 102;
dcaron = 43;
e = 39;
h = 104;
i = 101;
k = 104;
l = 104;
m = 35;
n = 30;
o = 33;
parenright = 224;
question = 142;
quotedbl = 185;
quotedblleft = 137;
quoteleft = 129;
quotesingle = 185;
s = 79;
semicolon = 107;
t = 101;
tcaron = 101;
u = 67;
uacute = 68;
uring = 75;
v = 86;
w = 91;
y = 82;
zacute = 95;
zcaron = 104;
};
dcroat = {
a = -6;
e = -10;
edotbelow = -10;
ehookabove = -10;
ocircumflexdotbelow = -2;
ocircumflexgrave = -2;
ocircumflexhookabove = -2;
ohorntilde = -2;
};
dollar = {
eight = 6;
one = -19;
period = -18;
seven = -22;
six = 7;
three = -8;
underscore = -142;
};
e = {
Tcommaaccent = -91;
germandbls = -15;
hbar = -6;
icircumflex = -6;
idieresis = -6;
kcommaaccent = -6;
lcaron = -7;
lcommaaccent = -7;
lslash = 46;
quotedbl = -46;
quotedblleft = 0;
quotedblright = -62;
quoteright = -62;
quotesingle = -46;
r = -9;
rcaron = -8;
sacute = 15;
scaron = 15;
scedilla = 15;
scommaaccent = 15;
tcaron = -16;
tcommaaccent = -16;
trademark = -94;
ydieresis = -20;
};
eacute = {
lslash = 47;
parenright = 0;
r = -8;
rcaron = -7;
scaron = 16;
};
ecaron = {
comma = -6;
h = -6;
hyphen = 21;
j = -56;
k = -6;
l = -7;
lslash = 47;
p = -6;
period = -10;
quotedblleft = -42;
quoteleft = -36;
r = -8;
rcaron = -7;
s = 15;
sacute = 15;
scaron = 16;
t = -16;
tcaron = -16;
v = -18;
w = -13;
};
ecircumflex = {
r = -8;
scedilla = 15;
};
ecircumflexacute = {
parenright = 58;
question = 0;
quotedbl = 0;
quotedblright = -9;
quotesingle = 0;
};
ecircumflexdotbelow = {
comma = 34;
};
ecircumflexgrave = {
parenright = 37;
quotedbl = 0;
quotedblright = -11;
};
ecircumflexhookabove = {
parenright = 38;
quotedblright = -31;
};
edieresis = {
b = -6;
comma = -6;
f = -12;
h = -6;
hyphen = 21;
j = -56;
k = -6;
l = -7;
lslash = 47;
p = -6;
parenright = 17;
period = -10;
quotedbl = -21;
quotedblleft = -42;
quotedblright = -37;
quoteright = -37;
quotesingle = -21;
r = -8;
s = 15;
t = -15;
v = -18;
w = -13;
x = -35;
y = -20;
};
edotaccent = {
comma = -6;
hyphen = 21;
j = -56;
k = -6;
l = -7;
p = -6;
period = -10;
quotedbl = -37;
quotedblleft = -51;
quoteleft = -46;
quotesingle = -37;
r = -8;
s = 15;
scaron = 16;
t = -16;
v = -18;
};
edotbelow = {
comma = 33;
};
egrave = {
lslash = 47;
r = -8;
};
eight = {
comma = 0;
ordmasculine = -17;
};
ellipsis = {
zero = 0;
};
emacron = {
b = -6;
comma = -6;
hyphen = 21;
j = -56;
k = -6;
kcommaaccent = -6;
l = -7;
lcommaaccent = -7;
p = -6;
period = -10;
quotedbl = -22;
quotedblleft = -42;
quotedblright = -51;
r = -8;
s = 15;
scaron = 16;
t = -16;
v = -18;
x = -35;
y = -20;
};
emdash = {
a = 0;
};
eogonek = {
b = -6;
comma = 69;
hyphen = 21;
k = -6;
l = -7;
lslash = 47;
p = -6;
period = -10;
question = -46;
quotedbl = -46;
quotedblleft = -55;
quotedblright = -62;
quoteleft = -50;
s = 15;
sacute = 15;
scaron = 16;
t = -16;
w = -12;
};
eth = {
a = 53;
aacute = 53;
ae = 33;
amacron = 53;
b = 31;
c = 53;
colon = 33;
comma = 34;
d = 53;
e = 53;
emacron = 53;
eth = 45;
f = 10;
g = 48;
h = 31;
hyphen = 64;
i = 33;
iacute = 29;
j = -22;
k = 31;
l = 29;
m = 30;
n = 30;
o = 52;
oacute = 52;
odieresis = 52;
oslash = 49;
p = 29;
parenright = 44;
period = 14;
quotedblleft = -21;
r = 25;
s = 55;
thorn = 31;
u = 30;
uacute = 30;
};
euro = {
comma = -23;
one = -18;
period = -27;
seven = -25;
slash = -31;
};
exclamdown = {
T = -51;
V = -30;
Y = -48;
};
f = {
adieresis = -16;
ae = -40;
amacron = -16;
aogonek = -16;
aring = -16;
b = 0;
ccedilla = -19;
ecaron = -18;
edieresis = -17;
edotaccent = -19;
emacron = -18;
eogonek = -19;
eth = -18;
f = 0;
g = 0;
o = 0;
odieresis = -20;
oe = -21;
ohungarumlaut = -21;
oslash = -21;
r = -33;
ucircumflex = -7;
udieresis = -4;
y = 0;
};
five = {
ordfeminine = -26;
ordmasculine = -27;
};
four = {
ordfeminine = -79;
ordmasculine = -79;
trademark = -99;
};
g = {
adieresis = -6;
ae = -10;
amacron = -6;
aogonek = -6;
aring = -6;
ccedilla = -9;
comma = 111;
edieresis = -9;
edotaccent = -9;
emacron = -9;
eogonek = -9;
eth = -9;
g = -2;
iogonek = 6;
j = -45;
lslash = 44;
odieresis = -10;
ohungarumlaut = -10;
oslash = -3;
parenright = 18;
period = 6;
quotedbl = -34;
quotedblright = -51;
quotesingle = -34;
r = -20;
trademark = -56;
ucircumflex = -13;
udieresis = -13;
uhungarumlaut = -13;
umacron = -13;
uogonek = -12;
uring = -13;
};
gbreve = {
a = -6;
c = -9;
ccedilla = -9;
comma = 111;
d = -7;
e = -9;
m = -14;
n = -14;
o = -10;
quotedblleft = -34;
quoteright = -30;
quotesingle = -18;
r = -20;
u = -13;
udieresis = -12;
};
gcommaaccent = {
a = -6;
comma = 111;
e = -9;
emacron = -9;
o = -10;
u = -13;
};
gdotaccent = {
a = -6;
agrave = -6;
comma = 111;
d = -7;
e = -9;
j = -45;
n = -14;
o = -10;
r = -20;
u = -13;
};
germandbls = {
b = -14;
comma = -14;
f = -8;
guilsinglright = -25;
h = -14;
i = -12;
j = -75;
k = -14;
l = -16;
m = -15;
n = -15;
p = -16;
period = -20;
quotedblleft = -25;
quoteleft = -25;
r = -19;
t = -11;
u = -15;
};
guillemetleft = {
AE = -33;
Adieresis = -22;
Aring = -22;
Ccaron = -22;
Ccedilla = -22;
Icircumflex = -21;
Idotaccent = -21;
Kcommaaccent = -21;
Odieresis = -22;
Scedilla = -15;
Tcommaaccent = -64;
Udieresis = -23;
adieresis = -32;
aring = -32;
ccedilla = -32;
odieresis = -34;
quotedblbase = -74;
udieresis = -21;
};
guilsinglleft = {
Odieresis = -22;
Tcommaaccent = -64;
Udieresis = -23;
odieresis = -34;
quotedblbase = -74;
};
h = {
adieresis = -7;
ae = -9;
amacron = -7;
aogonek = -7;
aring = -7;
ccaron = -7;
ccedilla = -7;
edieresis = -6;
emacron = -6;
eogonek = -6;
germandbls = -24;
ihookabove = -9;
lacute = -19;
lcaron = -19;
lslash = 42;
odieresis = -8;
oe = -8;
ohungarumlaut = -8;
quotesingle = 0;
r = -18;
racute = -18;
rcaron = -18;
trademark = -95;
ucircumflex = -20;
udieresis = -20;
uhungarumlaut = -20;
umacron = -20;
uogonek = -20;
uring = -20;
wcircumflex = -16;
ycircumflex = -21;
};
hbar = {
a = -7;
d = -7;
e = -6;
f = -13;
gdotaccent = -8;
j = -58;
l = -19;
m = -12;
o = -8;
q = -7;
r = -18;
t = -13;
u = -20;
w = -16;
};
hyphen = {
Cacute = 11;
Ccaron = 11;
Ccedilla = 11;
Cdotaccent = 11;
Dcroat = 60;
Eth = 60;
Gcommaaccent = 11;
Gdotaccent = 11;
Lslash = 57;
Odieresis = 11;
Ohungarumlaut = 11;
Oslash = 11;
Sacute = 20;
Scaron = 20;
Scedilla = 20;
Scommaaccent = 20;
Tcaron = -59;
Tcommaaccent = -59;
Ycircumflex = -60;
Zacute = 4;
Zcaron = 4;
Zdotaccent = 4;
adieresis = 16;
ae = 15;
amacron = 16;
aogonek = 16;
aring = 16;
cacute = 16;
ccaron = 16;
ccedilla = 16;
cdotaccent = 16;
dcaron = 16;
edieresis = 16;
edotaccent = 16;
gdotaccent = 15;
lslash = 79;
odieresis = 16;
ohungarumlaut = 16;
oslash = 13;
quotedblbase = -32;
sacute = 28;
scaron = 28;
scedilla = 28;
scommaaccent = 28;
};
i = {
ae = -7;
cacute = -6;
ccaron = -6;
ccedilla = -6;
cdotaccent = -6;
comma = 0;
edieresis = -4;
edotaccent = -5;
eogonek = -5;
gcommaaccent = -5;
gdotaccent = -5;
idieresis = 28;
j = -52;
lslash = 51;
n = -10;
ntilde = -7;
odieresis = -6;
r = -16;
rcaron = -15;
tcaron = -5;
tcommaaccent = -3;
u = -10;
z = 0;
};
iacute = {
lslash = 54;
r = -12;
scaron = 7;
zcaron = 7;
};
icircumflex = {
b = 7;
h = 7;
i = 9;
icircumflex = 50;
j = -30;
k = 7;
parenright = 75;
quotedbl = 35;
quotesingle = 35;
r = -12;
z = 5;
};
idieresis = {
Idieresis = 67;
b = 19;
h = 19;
i = 32;
icircumflex = 50;
idieresis = 50;
igrave = 40;
k = 19;
l = 19;
parenright = 104;
r = -12;
};
idotless = {
r = -12;
};
igrave = {
lslash = 54;
};
ihookabove = {
parenright = 76;
};
imacron = {
b = 5;
imacron = 38;
j = -30;
k = 5;
kcommaaccent = 5;
parenright = 86;
quotedbl = 30;
r = -12;
z = 5;
};
iogonek = {
comma = 115;
iogonek = 11;
j = -33;
lslash = 51;
parenright = 70;
period = 14;
quotedblleft = -23;
quoteleft = -23;
r = -15;
};
itilde = {
icircumflex = 50;
parenright = 93;
quotedbl = 41;
quotedblright = 16;
quotesingle = 41;
};
j = {
a = 0;
ae = -7;
edotaccent = -5;
eogonek = -5;
idieresis = 28;
iogonek = 12;
lslash = 51;
odieresis = -3;
period = 14;
};
k = {
adieresis = -30;
ae = -23;
amacron = -31;
aogonek = -31;
aring = -31;
cacute = -31;
ccaron = -31;
ccedilla = -31;
cdotaccent = -31;
ecaron = -31;
edieresis = -31;
edotaccent = -31;
emacron = -31;
eogonek = -31;
iogonek = 8;
odieresis = -33;
oe = -33;
ohungarumlaut = -33;
sacute = -11;
scaron = -10;
scedilla = -10;
trademark = -68;
w = 0;
y = 0;
};
kcommaaccent = {
a = -31;
amacron = -30;
e = -31;
emacron = -30;
o = -33;
s = -10;
};
l = {
Idotaccent = -32;
a = -29;
adieresis = -25;
ae = -22;
amacron = -25;
aogonek = -28;
aring = -25;
bulletoperator = -100;
c = -29;
cacute = -26;
ccaron = -25;
ccedilla = -29;
cdotaccent = -25;
e = -29;
ecaron = -25;
edieresis = -25;
edotaccent = -25;
emacron = -25;
eogonek = -29;
gbreve = -25;
gcommaaccent = -27;
gdotaccent = -25;
germandbls = -35;
hbar = -27;
icircumflex = -16;
imacron = -25;
iogonek = -7;
kcommaaccent = -27;
nacute = -24;
ncaron = -24;
o = -31;
odieresis = -29;
oe = -31;
ohungarumlaut = -29;
oslash = -16;
scaron = -5;
scedilla = -8;
tcaron = -63;
tcommaaccent = -63;
thorn = -27;
trademark = -58;
ucircumflex = -36;
udieresis = -36;
uhungarumlaut = -36;
umacron = -36;
uogonek = -36;
uring = -36;
wcircumflex = -44;
wdieresis = -44;
ycircumflex = -50;
ydieresis = -50;
zcaron = -12;
zdotaccent = -12;
};
lacute = {
b = -27;
ccaron = -25;
e = -29;
h = -27;
j = -70;
k = -27;
n = -24;
ncaron = -24;
p = -27;
t = -63;
v = -48;
z = -12;
zcaron = -12;
};
lcaron = {
b = 46;
bracketright = 86;
h = 46;
i = 47;
k = 46;
parenright = 150;
period = -12;
question = 78;
quotedbl = 111;
quotedblleft = 63;
quoteleft = 56;
quotesingle = 111;
s = 29;
scaron = 32;
t = 39;
u = 26;
uacute = 27;
v = 20;
zcaron = 64;
};
lcommaaccent = {
a = -25;
amacron = -25;
b = -27;
c = -25;
ccaron = -25;
comma = 95;
d = -26;
e = -25;
emacron = -25;
f = -63;
g = -25;
gcommaaccent = -25;
h = -27;
i = -25;
imacron = -25;
j = -50;
k = -27;
kcommaaccent = -27;
l = -27;
lcommaaccent = -27;
m = -24;
n = -24;
ncommaaccent = -24;
o = -29;
p = -27;
parenright = 43;
period = -11;
quotedblleft = -73;
quotedblright = -75;
r = -27;
t = -63;
u = -36;
umacron = -36;
v = -48;
};
lslash = {
comma = -8;
hyphen = 21;
j = -53;
lslash = 50;
period = -12;
s = 21;
};
m = {
adieresis = -4;
ae = -7;
amacron = -4;
aogonek = -4;
aring = -4;
bulletoperator = -53;
ccaron = -5;
ccedilla = -5;
ecaron = -4;
edieresis = -4;
edotaccent = -4;
emacron = -4;
eogonek = -4;
hbar = -12;
icircumflex = -14;
imacron = -14;
lcommaaccent = -18;
lslash = 38;
odieresis = -5;
oe = -5;
ordmasculine = -53;
racute = -16;
rcaron = -16;
t = -18;
tcommaaccent = -18;
thorn = -11;
trademark = -97;
ucircumflex = -18;
udieresis = -18;
uhungarumlaut = -18;
umacron = -18;
uogonek = -18;
uring = -18;
wgrave = -20;
zcaron = -3;
};
n = {
Tcommaaccent = -100;
adieresis = -4;
ae = -7;
amacron = -4;
aogonek = -4;
aring = -4;
bulletoperator = -53;
ccaron = -5;
ccedilla = -5;
cdotaccent = -5;
ecaron = -5;
edieresis = -5;
edotaccent = -5;
emacron = -5;
eogonek = -5;
gbreve = -6;
gdotaccent = -6;
germandbls = -24;
hbar = -13;
icircumflex = -14;
idieresis = -14;
imacron = -14;
lslash = 37;
odieresis = -6;
oe = -6;
ohungarumlaut = -6;
ordmasculine = -54;
r = -16;
tcommaaccent = -20;
thorn = -12;
trademark = -100;
ucircumflex = -18;
udieresis = -18;
uhungarumlaut = -18;
umacron = -18;
uogonek = -18;
uring = -18;
wcircumflex = -21;
ydieresis = -27;
zcaron = -4;
zdotaccent = -4;
};
nacute = {
T = -63;
c = -5;
d = -5;
f = -18;
j = -56;
k = -12;
l = -19;
quotedblright = -58;
t = -18;
u = -18;
uring = -18;
w = -21;
y = -27;
};
ncaron = {
a = -4;
j = -56;
k = -13;
l = -19;
o = -6;
quotedblleft = -51;
quotedblright = -60;
r = -16;
t = -18;
u = -18;
udieresis = -18;
uring = -18;
y = -27;
yacute = -26;
};
ncommaaccent = {
a = -4;
amacron = -4;
e = -5;
emacron = -5;
gcommaaccent = -6;
j = -56;
k = -13;
kcommaaccent = -13;
l = -20;
o = -6;
r = -16;
t = -20;
u = -18;
umacron = -18;
v = -24;
};
nine = {
ordmasculine = -17;
};
ntilde = {
a = -4;
aacute = -4;
e = -5;
eacute = -5;
f = -18;
guillemetright = -22;
iacute = -14;
j = -56;
l = -19;
o = -6;
oacute = -6;
quotedbl = -34;
quotedblright = -58;
t = -18;
u = -18;
uacute = -18;
v = -24;
y = -27;
};
numbersign = {
ccedilla = -28;
};
o = {
Ydieresis = -104;
cacute = 5;
ccaron = 5;
ccedilla = 5;
cdotaccent = 5;
dcaron = 5;
edieresis = 5;
germandbls = -18;
hbar = -10;
icircumflex = -10;
idieresis = -10;
imacron = -10;
kcommaaccent = -10;
lcaron = -10;
lcommaaccent = -10;
lslash = 41;
nacute = -6;
ncaron = -6;
ncommaaccent = -6;
ntilde = -6;
odieresis = 4;
r = -11;
rcaron = -10;
sacute = 8;
scaron = 8;
scedilla = 8;
scommaaccent = 8;
tcaron = -20;
tcommaaccent = -16;
trademark = -100;
ucircumflex = -6;
x = 0;
ydieresis = -23;
zacute = -8;
zcaron = -8;
zdotaccent = -8;
};
oacute = {
lslash = 43;
r = -10;
scaron = 8;
zacute = -7;
zcaron = -7;
zdotaccent = -7;
};
ocircumflex = {
lcaron = -10;
lslash = 44;
r = -10;
zcaron = -7;
};
ocircumflexacute = {
parenright = 36;
quotedbl = 0;
quotedblright = -16;
};
ocircumflexdotbelow = {
comma = 29;
};
ocircumflexgrave = {
guillemetright = -34;
hyphen = 16;
i = -6;
m = -5;
n = -6;
period = -19;
};
ocircumflexhookabove = {
guillemetright = -34;
i = -6;
n = -6;
period = -19;
quotedbl = -18;
quotedblright = -39;
};
odieresis = {
a = 5;
adieresis = 5;
b = -4;
c = 5;
ccedilla = 5;
d = 5;
e = 5;
f = -15;
g = 2;
germandbls = -17;
guillemetright = -34;
h = -4;
hyphen = 16;
i = -6;
j = -60;
k = -4;
l = -10;
m = -5;
n = -6;
odieresis = 4;
p = -10;
period = -19;
quotedbl = -26;
quotedblleft = -49;
quotedblright = -50;
quoteright = -50;
quotesingle = -26;
r = -10;
s = 8;
scedilla = 8;
t = -16;
u = -6;
underscore = -153;
v = -21;
w = -15;
x = -45;
y = -25;
yacute = -23;
z = -8;
};
odotbelow = {
comma = 28;
r = -10;
};
oe = {
T = -91;
j = -56;
l = -7;
r = -9;
s = 15;
t = -16;
u = -2;
v = -18;
x = -35;
};
ograve = {
lslash = 43;
r = -10;
};
ohorn = {
n = -6;
parenright = 32;
period = -21;
};
ohornacute = {
c = 4;
n = -6;
};
ohorndotbelow = {
c = 4;
comma = 27;
n = -6;
period = -21;
};
ohorngrave = {
comma = -7;
n = -6;
parenright = 32;
period = -21;
};
ohornhookabove = {
n = -6;
parenright = 34;
period = -21;
};
ohorntilde = {
n = -6;
parenright = 36;
period = -21;
};
ohungarumlaut = {
a = 5;
aacute = 5;
d = 5;
e = 5;
f = -14;
hyphen = 16;
i = -6;
iacute = -10;
j = -60;
l = -9;
m = -5;
n = -6;
p = -10;
period = -19;
quotedblright = -28;
r = -10;
s = 8;
t = -16;
v = -21;
z = -8;
};
ordfeminine = {
comma = -138;
parenright = 44;
period = -136;
};
ordmasculine = {
comma = -138;
period = -136;
slash = -91;
};
oslash = {
d = 5;
e = 4;
hyphen = 14;
j = -59;
m = -7;
n = -7;
period = -20;
r = -11;
s = 9;
};
otilde = {
r = -10;
};
p = {
adieresis = 5;
ae = -3;
amacron = 5;
aogonek = 5;
aring = 5;
cacute = 5;
ccaron = 5;
ccedilla = 5;
ecaron = 5;
edieresis = 5;
edotaccent = 5;
emacron = 5;
eogonek = 5;
icircumflex = -5;
imacron = -6;
lacute = -8;
lcaron = -8;
lcommaaccent = -8;
lslash = 45;
odieresis = 5;
ohungarumlaut = 5;
r = -10;
racute = -10;
rcaron = -10;
sacute = 10;
scaron = 10;
scedilla = 11;
tcaron = -13;
tcommaaccent = -13;
trademark = -94;
ucircumflex = -4;
udieresis = -4;
umacron = -4;
uogonek = -4;
uring = -4;
wcircumflex = -13;
};
parenleft = {
Adieresis = 7;
C = 4;
Ccaron = 4;
Dcaron = 46;
Dcroat = 50;
Ecaron = 46;
Edieresis = 47;
Edotaccent = 46;
Emacron = 46;
Eogonek = 46;
Eth = 50;
Hbar = 70;
Icircumflex = 74;
Idieresis = 77;
Idotaccent = 52;
Imacron = 68;
Iogonek = 103;
Kcommaaccent = 46;
Lcaron = 46;
Lcommaaccent = 47;
Lslash = 52;
N.ss01 = 13;
Ncommaaccent = 30;
Ntilde = 31;
Rcaron = 46;
Sacute = 29;
Scaron = 30;
Scedilla = 30;
Scommaaccent = 30;
Thorn = 58;
Ucircumflex = 47;
Udieresis = 48;
Uhungarumlaut = 47;
Umacron = 46;
Uogonek = 46;
Uring = 46;
Wcircumflex = 59;
Ydieresis = 37;
Zacute = 56;
Zcaron = 56;
Zdotaccent = 56;
hbar = 78;
icircumflex = 71;
idieresis = 98;
igrave = 82;
imacron = 81;
iogonek = 121;
itilde = 86;
kcommaaccent = 45;
lcaron = 39;
lcommaaccent = 57;
lslash = 49;
quotedblbase = 11;
quotesinglbase = 54;
rcaron = 32;
sacute = 12;
scaron = 34;
scedilla = 18;
scommaaccent = 17;
section = 20;
thorn = 34;
zcaron = 31;
};
period = {
ordfeminine = -136;
ordmasculine = -136;
};
plus = {
yen = -75;
};
q = {
comma = 111;
edieresis = -9;
j = -34;
parenright = 60;
period = 10;
trademark = -56;
ucircumflex = -13;
udieresis = -13;
};
quotedbl = {
AE = -119;
Adieresis = -86;
Amacron = -86;
Aring = -86;
Ccaron = -16;
Ccedilla = -16;
Hbar = 37;
M.ss01 = -24;
N.ss01 = -26;
Odieresis = -16;
Scedilla = -8;
Udieresis = 9;
Zcaron = -19;
a = -47;
ae = -53;
aring = -37;
ccaron = -26;
ccedilla = -50;
ecircumflex = -25;
egrave = -25;
icircumflex = 31;
o = -52;
odieresis = -28;
oslash = -53;
scedilla = -24;
};
quotedblbase = {
Adieresis = -15;
Aogonek = -14;
Cacute = -56;
Ccaron = -56;
Ccedilla = -56;
Dcroat = -31;
Gcommaaccent = -56;
Icircumflex = -31;
Idotaccent = -31;
Imacron = -31;
Kcommaaccent = -31;
Lcommaaccent = -31;
Lslash = -31;
Ncommaaccent = -31;
Odieresis = -56;
Ohungarumlaut = -56;
Oslash = -26;
Rcaron = -31;
Sacute = -39;
Scaron = -39;
Scedilla = -37;
Scommaaccent = -38;
Tcaron = -130;
Tcommaaccent = -128;
Thorn = -21;
Udieresis = -53;
Umacron = -53;
Zcaron = -15;
Zdotaccent = -15;
adieresis = -29;
aring = -29;
ccaron = -29;
ccedilla = -29;
icircumflex = -24;
odieresis = -30;
quotedblbase = -63;
scaron = -18;
tcommaaccent = -75;
thorn = -24;
udieresis = -38;
};
quotedblleft = {
AE = -135;
Adieresis = -102;
Amacron = -102;
Aring = -102;
Ccedilla = -23;
Idotaccent = -28;
Kcommaaccent = -28;
Odieresis = -23;
Scedilla = -15;
Udieresis = -21;
Zcaron = -42;
ccedilla = -57;
odieresis = -47;
quotedblbase = -274;
scedilla = -39;
};
quotedblright = {
AE = -161;
Adieresis = -119;
Aring = -119;
Cacute = -45;
Ccaron = -45;
Odieresis = -46;
Oslash = -46;
Scaron = -24;
Zcaron = -33;
adieresis = -71;
ae = -74;
aring = -75;
cacute = -81;
ccaron = -77;
ccedilla = -81;
odieresis = -72;
oslash = -86;
quotesinglbase = -143;
scaron = -46;
};
quoteleft = {
AE = -129;
Adieresis = -97;
Amacron = -97;
Aring = -97;
Ccedilla = -20;
Zcaron = -44;
aring = -47;
ccaron = -43;
ccedilla = -53;
oslash = -55;
quotedblbase = -168;
};
quoteright = {
AE = -161;
Adieresis = -119;
Amacron = -119;
Aogonek = -121;
Aring = -119;
Ccaron = -45;
Gdotaccent = -46;
Hbar = 20;
OE = -46;
Odieresis = -46;
Ohungarumlaut = -46;
Oslash = -46;
adieresis = -71;
ae = -74;
amacron = -75;
aogonek = -75;
aring = -75;
ccaron = -77;
ccedilla = -81;
cdotaccent = -78;
edieresis = -66;
emacron = -76;
gdotaccent = -71;
odieresis = -72;
oe = -84;
ohungarumlaut = -79;
oslash = -86;
quotedblbase = -168;
u = -50;
udieresis = -31;
ytilde = -11;
};
quotesinglbase = {
Ccaron = -40;
Odieresis = -41;
Scaron = -25;
Tcaron = -116;
Udieresis = -37;
Umacron = -37;
};
quotesingle = {
AE = -119;
Adieresis = -86;
Amacron = -86;
Aring = -86;
Gdotaccent = -16;
Hbar = 37;
M.ss01 = -24;
N.ss01 = -26;
OE = -16;
a = -47;
aacute = -44;
adieresis = -24;
ae = -53;
amacron = -27;
c = -50;
ccaron = -26;
ccedilla = -50;
cdotaccent = -44;
e = -50;
eacute = -46;
edieresis = -25;
emacron = -29;
gdotaccent = -39;
hbar = 33;
icircumflex = 31;
igrave = 23;
itilde = 40;
o = -52;
odieresis = -28;
oe = -52;
u = -31;
udieresis = -16;
ytilde = 0;
};
r = {
Adieresis = -81;
adieresis = -20;
ae = -39;
amacron = -20;
aogonek = -20;
aring = -20;
cacute = -22;
ccaron = -22;
ccedilla = -22;
cdotaccent = -22;
dcaron = -20;
ecaron = -21;
edieresis = -21;
edotaccent = -21;
emacron = -21;
eogonek = -21;
eth = -21;
gbreve = -16;
gcommaaccent = -16;
gdotaccent = -16;
germandbls = -17;
imacron = -7;
kcommaaccent = -6;
lslash = 24;
m = -24;
n = 0;
nacute = -25;
ncaron = -25;
ncommaaccent = -25;
ntilde = -25;
o = -22;
odieresis = -23;
oe = -23;
ohungarumlaut = -23;
oslash = -25;
r = -28;
trademark = -59;
u = -5;
wcircumflex = 14;
ydieresis = 13;
zcaron = 6;
};
racute = {
a = -20;
c = -22;
ccaron = -22;
comma = -77;
d = -20;
j = -51;
m = -24;
n = -25;
ncaron = -25;
parenright = 55;
period = -82;
};
rcaron = {
a = -20;
aacute = -20;
c = -22;
cacute = -22;
ccaron = -22;
comma = -77;
d = -20;
e = -21;
ecaron = -21;
ellipsis = -133;
iacute = -7;
m = -24;
n = -25;
ncaron = -25;
o = -23;
parenright = 52;
period = -82;
r = -28;
};
s = {
adieresis = -4;
amacron = -4;
aogonek = -4;
aring = -4;
ccaron = -4;
ccedilla = -4;
comma = 0;
edieresis = -4;
edotaccent = -4;
emacron = -4;
eogonek = -4;
hbar = -8;
icircumflex = -8;
idieresis = -8;
imacron = -8;
iogonek = -4;
lcaron = -8;
lslash = 50;
odieresis = -5;
oe = -5;
ohungarumlaut = -5;
period = 0;
r = -9;
tcaron = -10;
tcommaaccent = -10;
thorn = -8;
trademark = -88;
ucircumflex = -6;
udieresis = -6;
uhungarumlaut = -6;
umacron = -6;
uogonek = -6;
uring = -6;
wacute = -12;
wcircumflex = -12;
ycircumflex = -18;
};
sacute = {
b = -8;
c = -4;
cacute = -4;
hyphen = 17;
j = -58;
l = -8;
p = -8;
r = -9;
w = -12;
y = -18;
};
scaron = {
a = -4;
amacron = -4;
b = -8;
c = -4;
cacute = -4;
ccaron = -4;
d = -4;
e = -4;
edotaccent = -4;
emacron = -4;
h = -8;
hyphen = 17;
i = -4;
iacute = -8;
imacron = -4;
j = -58;
k = -8;
kcommaaccent = -8;
l = -8;
lcaron = -8;
lcommaaccent = -8;
lslash = 50;
o = -5;
p = -8;
parenright = 21;
question = -36;
quotedblleft = -30;
quotedblright = -36;
r = -9;
s = 11;
scaron = 13;
t = -10;
tcaron = -10;
u = -6;
umacron = -6;
uogonek = -6;
v = -17;
w = -12;
y = -18;
z = 10;
zcaron = 10;
};
scedilla = {
T = -79;
a = -4;
b = -8;
ccedilla = -4;
comma = 72;
d = -4;
e = -4;
ecircumflex = -4;
f = -10;
guillemetright = -19;
h = -8;
hyphen = 17;
i = -4;
icircumflex = -8;
idotless = -8;
j = -58;
k = -8;
l = -8;
o = -5;
odieresis = -5;
p = -8;
q = -4;
quotedbl = -43;
quotedblleft = -49;
quotedblright = -60;
quoteright = -60;
quotesingle = -43;
r = -9;
s = 11;
scedilla = 13;
t = -10;
u = -6;
ucircumflex = -6;
udieresis = -6;
v = -17;
x = -23;
y = -16;
yacute = -16;
};
scommaaccent = {
a = -4;
abreve = -4;
c = -4;
comma = 71;
e = -4;
hyphen = 17;
i = -4;
o = -5;
quotedbl = -43;
quotedblright = -60;
t = -10;
u = -6;
v = -17;
};
section = {
one = -23;
};
semicolon = {
parenright = 19;
quotedbl = -23;
quotedblright = -41;
};
seven = {
Aring = -81;
};
six = {
ordmasculine = -12;
};
slash = {
AE = -122;
Adieresis = -102;
Amacron = -103;
Aring = -103;
Ccaron = -35;
Ccedilla = -35;
M.ss01 = -33;
N.ss01 = -39;
Odieresis = -36;
Oslash = -36;
adieresis = -42;
ae = -72;
amacron = -58;
aring = -58;
ccaron = -51;
ccedilla = -62;
cent = -61;
odieresis = -43;
oe = -64;
oslash = -66;
quotedblbase = -120;
two = 0;
};
sterling = {
eight = -26;
four = -44;
nine = -20;
one = -22;
seven = -23;
six = -20;
three = -20;
two = -12;
};
t = {
ae = 6;
f = 0;
hbar = 12;
iogonek = 19;
lslash = 36;
oslash = 8;
sacute = 22;
scaron = 22;
scedilla = 22;
trademark = -44;
v = 0;
ycircumflex = 6;
zcaron = 19;
};
tcaron = {
colon = 36;
comma = 22;
i = 27;
k = 18;
parenright = 141;
period = 17;
question = 55;
quotedbl = 74;
quotedblleft = 35;
quoteleft = 29;
quotesingle = 74;
s = 23;
scaron = 28;
};
tcommaaccent = {
comma = 96;
parenright = 55;
period = 17;
};
thorn = {
a = 5;
aacute = 5;
ae = -6;
e = 5;
eacute = 5;
i = -6;
iacute = -10;
j = -60;
o = 4;
oacute = 4;
odieresis = 4;
period = -19;
r = -10;
u = -6;
uacute = -6;
v = -21;
y = -25;
yacute = -23;
};
three = {
ordfeminine = -21;
ordmasculine = -21;
};
trademark = {
comma = -51;
period = -53;
};
two = {
bulletoperator = -59;
ordfeminine = -10;
ordmasculine = -10;
};
u = {
ae = -10;
amacron = -4;
cacute = -5;
ccaron = -5;
ccedilla = -5;
cdotaccent = -5;
dcaron = -5;
edieresis = -5;
eth = -5;
gbreve = -6;
gcommaaccent = -6;
gdotaccent = -6;
germandbls = -24;
idieresis = -14;
lcaron = -14;
lcommaaccent = -14;
lslash = 49;
nacute = -18;
ncaron = -18;
ncommaaccent = -18;
ntilde = -18;
r = -22;
rcaron = -22;
tcaron = -11;
thorn = -12;
trademark = -54;
};
uacute = {
ccaron = -5;
eth = -5;
ncaron = -18;
ntilde = -18;
r = -22;
rcaron = -22;
};
ucircumflex = {
b = -11;
c = -5;
comma = -10;
d = -5;
g = -6;
j = -66;
k = -11;
l = -13;
m = -18;
n = -18;
p = -13;
period = -25;
r = -22;
t = -4;
};
udieresis = {
a = -4;
b = -11;
c = -5;
ccedilla = -5;
comma = -10;
d = -5;
e = -5;
egrave = -5;
f = -2;
g = -6;
gbreve = -6;
germandbls = -23;
guillemetright = -21;
h = -11;
iacute = -13;
j = -66;
k = -11;
l = -12;
m = -18;
n = -18;
ncaron = -18;
p = -12;
period = -25;
quotedbl = -15;
quotedblleft = -22;
quotedblright = -27;
quoteright = -27;
quotesingle = -15;
r = -22;
t = -2;
udieresis = -11;
x = -5;
};
udotbelow = {
comma = 30;
};
ugrave = {
lslash = 49;
nacute = -18;
r = -22;
};
uhorn = {
ohorntilde = 0;
};
uhorndotbelow = {
comma = 31;
};
uhungarumlaut = {
b = -9;
comma = -10;
e = -5;
j = -65;
k = -9;
l = -11;
m = -18;
n = -18;
parenright = 36;
period = -25;
r = -22;
};
umacron = {
b = -12;
c = -5;
ccaron = -5;
comma = -10;
d = -5;
g = -6;
j = -66;
k = -12;
l = -14;
m = -18;
n = -18;
ncommaaccent = -18;
p = -13;
period = -25;
r = -22;
t = -4;
};
underscore = {
Odieresis = -179;
adieresis = -147;
edotaccent = -150;
odieresis = -153;
};
uogonek = {
comma = 59;
j = -66;
lslash = 49;
period = -24;
quotedblleft = -38;
quotedblright = -49;
quoteleft = -36;
};
uring = {
b = -13;
ccaron = -5;
comma = -10;
d = -5;
j = -66;
k = -13;
l = -14;
lslash = 49;
m = -18;
n = -18;
nacute = -18;
ncaron = -18;
period = -25;
quotedblleft = -31;
quoteleft = -30;
r = -22;
rcaron = -22;
};
v = {
adieresis = -18;
ae = -30;
amacron = -18;
aogonek = -18;
aring = -18;
cacute = -19;
ccaron = -19;
ccedilla = -19;
dcaron = -18;
ecaron = -19;
edieresis = -19;
edotaccent = -19;
emacron = -19;
eogonek = -18;
eth = -9;
gbreve = -15;
ncaron = -24;
odieresis = -20;
oe = -20;
ohungarumlaut = -20;
oslash = -21;
racute = -27;
rcaron = -27;
trademark = -49;
zcaron = 21;
};
w = {
adieresis = -13;
ae = -23;
amacron = -13;
aogonek = -13;
aring = -13;
ccaron = -14;
ccedilla = -14;
cdotaccent = -14;
ecaron = -14;
edieresis = -14;
emacron = -14;
eogonek = -14;
gdotaccent = -11;
lslash = 47;
nacute = -20;
odieresis = -15;
r = -24;
trademark = -46;
ycircumflex = 21;
zacute = 20;
zdotaccent = 20;
};
wacute = {
n = -20;
r = -24;
};
wcircumflex = {
a = -13;
e = -14;
n = -20;
o = -15;
r = -24;
y = 21;
};
wdieresis = {
o = -15;
r = -24;
};
wgrave = {
g = -11;
};
x = {
adieresis = -35;
ae = -29;
amacron = -35;
aring = -35;
ccedilla = -39;
edieresis = -38;
emacron = -38;
odieresis = -44;
oe = -44;
scedilla = -13;
trademark = -66;
};
y = {
Ydieresis = -35;
adieresis = -21;
ae = -31;
amacron = -21;
aogonek = -21;
aring = -21;
cacute = -23;
ccaron = -23;
ccedilla = -20;
comma = 0;
ecaron = -22;
edieresis = -22;
emacron = -22;
eogonek = -20;
eth = -10;
gbreve = -18;
lslash = 31;
n = 0;
nacute = -27;
ncaron = -27;
ntilde = -27;
odieresis = -25;
ohungarumlaut = -25;
oslash = -25;
racute = -29;
rcaron = -29;
sacute = -7;
scaron = -6;
scedilla = -5;
trademark = -52;
zacute = 21;
zcaron = 21;
zdotaccent = 21;
};
yacute = {
adieresis = -19;
ccaron = -20;
ccedilla = -20;
eth = -10;
ncaron = -26;
odieresis = -22;
rcaron = -28;
scaron = -5;
zcaron = 21;
};
ycircumflex = {
d = -20;
m = -26;
n = -27;
period = -67;
r = -29;
};
ydieresis = {
c = -22;
d = -19;
e = -22;
n = -27;
o = -24;
period = -67;
r = -29;
s = -5;
};
ydotbelow = {
comma = 41;
parenright = 51;
period = -46;
};
yen = {
one = -24;
};
ytilde = {
quotedblright = -15;
};
z = {
adieresis = -10;
amacron = -11;
aogonek = -10;
ccaron = -12;
ccedilla = -11;
dcaron = -11;
edieresis = -11;
edotaccent = -11;
emacron = -11;
eogonek = -11;
g = 0;
lslash = 62;
odieresis = -13;
ohungarumlaut = -13;
r = -11;
rcaron = -10;
scaron = 15;
scedilla = 15;
trademark = -57;
ucircumflex = -7;
udieresis = -7;
uhungarumlaut = -7;
umacron = -7;
uogonek = -7;
uring = -7;
zcaron = 10;
};
zacute = {
a = -9;
c = -11;
cacute = -8;
d = -9;
e = -11;
ecaron = -7;
l = -5;
n = -3;
o = -13;
parenright = 39;
r = -9;
s = 15;
w = 10;
};
zcaron = {
a = -9;
aacute = -8;
amacron = -7;
aogonek = -8;
c = -11;
d = -9;
dcaron = -9;
dcroat = -9;
e = -11;
edotaccent = -8;
emacron = -7;
eogonek = -8;
g = -6;
gcommaaccent = -6;
j = -36;
l = -5;
lslash = 62;
n = -3;
o = -13;
oacute = -9;
parenright = 37;
r = -9;
s = 15;
scaron = 15;
u = -7;
umacron = -7;
uogonek = -7;
uring = -7;
zcaron = 10;
};
zdotaccent = {
a = -9;
aogonek = -8;
c = -11;
d = -9;
e = -11;
eogonek = -8;
g = -6;
j = -36;
l = -5;
lslash = 62;
n = -3;
o = -13;
oacute = -9;
s = 15;
u = -7;
zdotaccent = 10;
};
zero = {
ordfeminine = -22;
ordmasculine = -22;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = copyrights;
values = (
{
language = dflt;
value = "Copyright 2024 The Momo Trust Project Authors (https://github.com/typeassociates/MomoTrustDisplay)";
}
);
},
{
key = designers;
values = (
{
language = dflt;
value = "Duy — N, Phuc Tran, Bao Truong";
}
);
},
{
key = designerURL;
value = "https://m-n.associates/";
},
{
key = licenses;
values = (
{
language = dflt;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org";
}
);
},
{
key = licenseURL;
value = "https://openfontlicense.org";
},
{
key = manufacturers;
values = (
{
language = dflt;
value = "M — N Associates";
},
{
language = dflt;
value = "TYPE Associates";
}
);
},
{
key = manufacturerURL;
value = "https://m-n.associates/";
},
{
key = vendorID;
value = TA;
}
);
unitsPerEm = 1000;
userData = {
GSDimensionPlugin.Dimensions = {
m01 = {
HH = "148";
HV = "166";
OH = "150";
OV = "170";
nV = "162";
nd = "136";
oH = "140";
oV = "165";
tH = "130";
};
};
KernOnKerningWeightLimit = 36000;
KernOnRegenerateGroups = 0;
KernOnVersion = "1.31";
};
versionMajor = 1;
versionMinor = 0;
}
